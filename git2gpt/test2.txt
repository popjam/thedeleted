The following text is a Git repository with code. The structure of the text are sections that begin with ----, followed by a single line containing the file path and file name, followed by a variable amount of lines containing the file contents. The text representing the Git repository ends when the symbols --END-- are encounted. Any further text beyond --END-- are meant to be interpreted as instructions using the aforementioned Git repository as context.
----
enums\ActiveSlot.ts
export enum ActiveSlot {
  /** The main slot for active items, in the top-left-hand corner. */
  PRIMARY = 0,

  /** The Schoolbag slot, to the top-left of the active item. */
  SECONDARY = 1,

  /** The permanent card/pill slot. Several Tainted characters use this slot. */
  POCKET = 2,

  /** A single use card/pill slot. Used by Dice Bag. */
  POCKET_SINGLE_USE = 3,
}

----
enums\BackdropType.ts
export enum BackdropType {
  BASEMENT = 1,
  CELLAR = 2,
  BURNING_BASEMENT = 3,
  CAVES = 4,
  CATACOMBS = 5,
  FLOODED_CAVES = 6,
  DEPTHS = 7,
  NECROPOLIS = 8,
  DANK_DEPTHS = 9,
  WOMB = 10,
  UTERO = 11,
  SCARRED_WOMB = 12,
  BLUE_WOMB = 13,
  SHEOL = 14,
  CATHEDRAL = 15,
  DARK_ROOM = 16,
  CHEST = 17,
  MEGA_SATAN = 18,
  LIBRARY = 19,
  SHOP = 20,
  CLEAN_BEDROOM = 21,
  DIRTY_BEDROOM = 22,
  SECRET = 23,
  DICE = 24,
  ARCADE = 25,
  ERROR_ROOM = 26,
  BLUE_WOMB_PASS = 27,
  GREED_SHOP = 28,
  DUNGEON = 29,
  SACRIFICE = 30,
  DOWNPOUR = 31,
  MINES = 32,
  MAUSOLEUM = 33,
  CORPSE = 34,
  PLANETARIUM = 35,
  DOWNPOUR_ENTRANCE = 36,
  MINES_ENTRANCE = 37,
  MAUSOLEUM_ENTRANCE = 38,
  CORPSE_ENTRANCE = 39,
  MAUSOLEUM_2 = 40,
  MAUSOLEUM_3 = 41,
  MAUSOLEUM_4 = 42,
  CORPSE_2 = 43,
  CORPSE_3 = 44,
  DROSS = 45,
  ASHPIT = 46,
  GEHENNA = 47,
  MORTIS = 48,

  /** This corresponds to Isaac's bedroom on the Home floor, not a clean bedroom. */
  ISAACS_BEDROOM = 49,

  HALLWAY = 50,
  MOMS_BEDROOM = 51,

  /** The closet on the right side of the Home floor. */
  CLOSET = 52,

  /** The secret closet on the left side of the Home floor. */
  CLOSET_B = 53,

  DOGMA = 54,
  DUNGEON_GIDEON = 55,
  DUNGEON_ROTGUT = 56,
  DUNGEON_BEAST = 57,
  MINES_SHAFT = 58,
  ASHPIT_SHAFT = 59,
  DARK_CLOSET = 60,
}

----
enums\BrokenWatchState.ts
/** Used by the `Room.SetBrokenWatchState` method. */
export enum BrokenWatchState {
  NONE = 0,
  SLOW = 1,
  FAST = 2,
}

----
enums\ButtonAction.ts
export enum ButtonAction {
  /** This only fires on `InputHook.GET_ACTION_VALUE` (2). */
  LEFT = 0,

  /** This only fires on `InputHook.GET_ACTION_VALUE` (2). */
  RIGHT = 1,

  /** This only fires on `InputHook.GET_ACTION_VALUE` (2). */
  UP = 2,

  /** This only fires on `InputHook.GET_ACTION_VALUE` (2). */
  DOWN = 3,

  /** This fires on `InputHook.IS_ACTION_PRESSED` (0) and `InputHook.GET_ACTION_VALUE` (2). */
  SHOOT_LEFT = 4,

  /** This fires on `InputHook.IS_ACTION_PRESSED` (0) and `InputHook.GET_ACTION_VALUE` (2). */
  SHOOT_RIGHT = 5,

  /** This fires on `InputHook.IS_ACTION_PRESSED` (0) and `InputHook.GET_ACTION_VALUE` (2). */
  SHOOT_UP = 6,

  /** This fires on `InputHook.IS_ACTION_PRESSED` (0) and `InputHook.GET_ACTION_VALUE` (2). */
  SHOOT_DOWN = 7,

  /** This only fires on `InputHook.IS_ACTION_TRIGGERED` (1). */
  BOMB = 8,

  /** This fires on `InputHook.IS_ACTION_PRESSED` (0) and `InputHook.IS_ACTION_TRIGGERED` (1). */
  ITEM = 9,

  /** This only fires on `InputHook.IS_ACTION_TRIGGERED` (1). */
  PILL_CARD = 10,

  /**
   * This is also used for switching cards, switching The Forgotten, holding Esau in place, and so
   * on.
   *
   * This fires on `InputHook.IS_ACTION_PRESSED` (0) and `InputHook.IS_ACTION_TRIGGERED` (1).
   */
  DROP = 11,

  /** This only fires on `InputHook.IS_ACTION_TRIGGERED` (1). */
  PAUSE = 12,

  /** This only fires on `InputHook.IS_ACTION_PRESSED` (0). */
  MAP = 13,

  /** This only fires on `InputHook.IS_ACTION_TRIGGERED` (1). */
  MENU_CONFIRM = 14,

  /** This only fires on `InputHook.IS_ACTION_TRIGGERED` (1). */
  MENU_BACK = 15,

  /** This only fires on `InputHook.IS_ACTION_PRESSED` (0). */
  RESTART = 16,

  /** This only fires on `InputHook.IS_ACTION_TRIGGERED` (1). */
  FULLSCREEN = 17,

  /** This only fires on `InputHook.IS_ACTION_TRIGGERED` (1). */
  MUTE = 18,

  // Does not seem to trigger any input hooks while on keyboard.
  JOIN_MULTIPLAYER = 19,

  /** This only fires on `InputHook.IS_ACTION_TRIGGERED` (1). */
  MENU_LEFT = 20,

  /** This only fires on `InputHook.IS_ACTION_TRIGGERED` (1). */
  MENU_RIGHT = 21,

  // Does not seem to trigger any input hooks while on keyboard.
  MENU_UP = 22,

  // Does not seem to trigger any input hooks while on keyboard.
  MENU_DOWN = 23,

  // Does not seem to trigger any input hooks while on keyboard.
  MENU_LT = 24,

  // Does not seem to trigger any input hooks while on keyboard.
  MENU_RT = 25,

  // Does not seem to trigger any input hooks while on keyboard.
  MENU_TAB = 26,

  /** This only fires on `InputHook.IS_ACTION_TRIGGERED` (1). */
  CONSOLE = 28,
}

----
enums\CallbackPriority.ts
export enum CallbackPriority {
  IMPORTANT = -200,
  EARLY = -100,
  DEFAULT = 0,
  LATE = 100,
}

----
enums\Challenge.ts
/** This enum is contiguous. (Every value is satisfied between 0 and 45, inclusive.) */
export enum Challenge {
  NULL = 0,
  PITCH_BLACK = 1,
  HIGH_BROW = 2,
  HEAD_TRAUMA = 3,
  DARKNESS_FALLS = 4,
  TANK = 5,
  SOLAR_SYSTEM = 6,
  SUICIDE_KING = 7,
  CAT_GOT_YOUR_TONGUE = 8,
  DEMO_MAN = 9,
  CURSED = 10,
  GLASS_CANNON = 11,
  WHEN_LIFE_GIVES_YOU_LEMONS = 12,
  BEANS = 13,
  ITS_IN_THE_CARDS = 14,
  SLOW_ROLL = 15,
  COMPUTER_SAVY = 16,
  WAKA_WAKA = 17,
  HOST = 18,
  FAMILY_MAN = 19,
  PURIST = 20,
  XXXXXXXXL = 21,
  SPEED = 22,
  BLUE_BOMBER = 23,
  PAY_TO_PLAY = 24,
  HAVE_A_HEART = 25,
  I_RULE = 26,
  BRAINS = 27,
  PRIDE_DAY = 28,
  ONANS_STREAK = 29,
  GUARDIAN = 30,
  BACKASSWARDS = 31,
  APRILS_FOOL = 32,
  POKEY_MANS = 33,
  ULTRA_HARD = 34,
  PONG = 35,
  SCAT_MAN = 36,
  BLOODY_MARY = 37,
  BAPTISM_BY_FIRE = 38,
  ISAACS_AWAKENING = 39,
  SEEING_DOUBLE = 40,
  PICA_RUN = 41,
  HOT_POTATO = 42,
  CANTRIPPED = 43,
  RED_REDEMPTION = 44,
  DELETE_THIS = 45,
}

----
enums\ChampionColor.ts
export enum ChampionColor {
  /** 33% more life. Drops a red heart. */
  RED = 0,

  /** 33% increased movement speed. Drops a Lil Battery. */
  YELLOW = 1,

  /** Leaves green creep as it walks. Drops a pill. */
  GREEN = 2,

  /** Greed shot (causing dropped coins on hit). Drops 1-3 coins. */
  ORANGE = 3,

  /** Half speed. Spawns 3 blue flies on death. */
  BLUE = 4,

  /** Explodes on death. Drops a bomb. */
  BLACK = 5,

  /** Invincible until all other enemies are killed. Drops an eternal heart. */
  WHITE = 6,

  /** 33% health, half speed. Drops a key. */
  GREY = 7,

  /** Spectral projectiles and can move past environmental obstacles. Drops a locked chest. */
  TRANSPARENT = 8,

  /** Fades in and out of visibility. Drops a red chest. */
  FLICKER = 9,

  /** Random projectiles. No drop. */
  PINK = 10,

  /** Pulls the player (and tears) towards itself. Drops a trinket. */
  PURPLE = 11,

  /**
   * Collapses into a flesh pile upon death and regenerates if not finished off.
   *
   * Drops a double heart.
   */
  DARK_RED = 12,

  /** Releases blood shots in 8 directions when killed. Drops a half red heart. */
  LIGHT_BLUE = 13,

  /**
   * The enemy blends into the background and briefly becomes visible when damaged.
   *
   * Drops a rune.
   */
  CAMO = 14,

  /** Splits into two copies of itself upon death. */
  PULSE_GREEN = 15,

  /** Repels Isaac's tears while in the gray state. Drops a random pickup. */
  PULSE_GREY = 16,

  /** Has 1-2 Eternal Flies circling it. Spawns two attack flies on death. */
  FLY_PROTECTED = 17,

  /** Half size, 33% less HP, 33% faster. 20% chance to drop a pill. */
  TINY = 18,

  /** Double size, 50% more HP, does 2 hearts of damage, 10% slower. 20% chance to drop a pill. */
  GIANT = 19,

  /** Heals all enemies in the room (including itself) for 30 HP per second. Drops a heart. */
  PULSE_RED = 20,

  /**
   * Spawns an Attack Fly on hit. After each hit, there is a delay until the next hit results in
   * another Attack Fly. A single Pulsating enemy can have up to 5 Attack Flies at once.
   *
   * Spawns 4-6 blue flies on death.
   */
  SIZE_PULSE = 21,

  /**
   * 3x HP. All enemies in the room that are not champions will turn yellow while the crowned enemy
   * is alive. The affected enemies will drop batteries like yellow champions upon dying.
   *
   * Drops 2-3 random pickups.
   */
  KING = 22,

  /**
   * Does 2 hearts of damage when touched. Produces a Necronomicon effect upon death.
   *
   * Deals two full hearts of damage.
   */
  DEATH = 23,

  /** Constantly poops. */
  BROWN = 24,

  /** Many champion effects combined, drops one of everything. */
  RAINBOW = 25,
}

----
enums\CollectibleAnimation.ts
/** These are the animations in the "005.100_collectible.anm2" file. */
export enum CollectibleAnimation {
  IDLE = "Idle",
  EMPTY = "Empty",
  SHOP_IDLE = "ShopIdle",
  PLAYER_PICKUP = "PlayerPickup",
  PLAYER_PICKUP_SPARKLE = "PlayerPickupSparkle",
  ALTERNATE = "Alternates",
}

----
enums\CollectiblePedestalType.ts
/** Corresponds to the overlay frame number in "005.100_collectible.anm2". */
export enum CollectiblePedestalType {
  /**
   * Used for e.g. shop collectibles. In the "005.100_collectible.anm2" file, this is represented by
   * the final frame.
   */
  NONE = -1,

  /** The normal grey pedestal. */
  NORMAL = 0,

  /** From `SlotVariant.FORTUNE_TELLING_MACHINE` (3). */
  FORTUNE_TELLING_MACHINE = 1,

  /** From `SlotVariant.BLOOD_DONATION_MACHINE` (2). */
  BLOOD_DONATION_MACHINE = 2,

  /** From `SlotVariant.SLOT_MACHINE` (1). */
  SLOT_MACHINE = 3,

  /** From `PickupVariant.LOCKED_CHEST` (60). */
  LOCKED_CHEST = 4,

  /** From `PickupVariant.RED_CHEST` (360). */
  RED_CHEST = 5,

  /** From `PickupVariant.BOMB_CHEST` (51). */
  BOMB_CHEST = 6,

  /** From `PickupVariant.SPIKED_CHEST` (52). */
  SPIKED_CHEST = 7,

  /** From `PickupVariant.ETERNAL_CHEST` (53). */
  ETERNAL_CHEST = 8,

  /** From `SlotVariant.MOMS_DRESSING_TABLE` (12). */
  MOMS_DRESSING_TABLE = 9,

  /** From `PickupVariant.CHEST` (50). */
  CHEST = 10,

  /** From `PickupVariant.MOMS_CHEST` (390). */
  MOMS_CHEST = 11,

  /** From `PickupVariant.OLD_CHEST` (55). */
  OLD_CHEST = 12,

  /** From `PickupVariant.WOODEN_CHEST` (56). */
  WOODEN_CHEST = 13,

  /** From `PickupVariant.MEGA_CHEST` (57). */
  MEGA_CHEST = 14,
}

----
enums\CollectibleSpriteLayer.ts
/** Corresponds to "resources/gfx/005.100_collectible.anm2". */
export enum CollectibleSpriteLayer {
  /** The pedestal. */
  BODY = 0,

  /** The bouncing collectible. */
  HEAD = 1,

  SPARKLE = 2,

  /** The shadow below the pedestal. */
  SHADOW = 3,

  /** The shadow on top of the pedestal. */
  ITEM_SHADOW = 4,

  ALTAR = 5,
}

----
enums\Controller.ts
/**
 * These enums loop after 31, so 32 = D_PAD_LEFT, 63 = D_PAD_LEFT, and so on.
 *
 * There appears to be no input key for joystick movement.
 */
export enum Controller {
  D_PAD_LEFT = 0,
  D_PAD_RIGHT = 1,
  D_PAD_UP = 2,
  D_PAD_DOWN = 3,

  /** A, X and B on Xbox, Playstation and Nintendo respectively. */
  BUTTON_A = 4,

  /** B, O and A on Xbox, Playstation and Nintendo respectively. */
  BUTTON_B = 5,

  /** X, □ and Y on Xbox, Playstation and Nintendo respectively. */
  BUTTON_X = 6,

  /** Y, Δ and X on Xbox, Playstation and Nintendo respectively. */
  BUTTON_Y = 7,

  /** Left shoulder button. */
  BUMPER_LEFT = 8,

  TRIGGER_LEFT = 9,
  STICK_LEFT = 10,

  /** Right shoulder button. */
  BUMPER_RIGHT = 11,

  TRIGGER_RIGHT = 12,
  STICK_RIGHT = 13,

  /** Select, Share and - on Xbox, Playstation and Nintendo respectively. */
  BUTTON_BACK = 14,

  /** Start, Options and + on Xbox, Playstation and Nintendo respectively. */
  BUTTON_START = 15,
}

----
enums\ControllerIndex.ts
export enum ControllerIndex {
  KEYBOARD = 0,
  CONTROLLER_1 = 1,
  CONTROLLER_2 = 2,
  CONTROLLER_3 = 3,
}

----
enums\CopyableIsaacAPIClassType.ts
// This enum must match:
// - The JSDoc comments for `deepCopy` and `merge`.
// - The `SerializableIsaacAPIClass` type union.
// - The `__kind` fields for the various classes in `isaac-typescript-definitions`.

/** An enum containing the Isaac API classes that can be safely copied / serialized. */
export enum CopyableIsaacAPIClassType {
  BIT_SET_128 = "BitSet128",
  COLOR = "Color",
  K_COLOR = "KColor",
  RNG = "RNG",
  VECTOR = "Vector",
}

----
enums\CurseID.ts
/**
 * Matches the "id" field in the "resources/curses.xml" file. This is used to compute the
 * `LevelCurse` enum.
 *
 * The values of this enum are integers. Do not use this enum to check for the presence of curses;
 * use the `LevelCurse` enum instead, which has bit flag values.
 */
export enum CurseID {
  DARKNESS = 1,
  LABYRINTH = 2,
  LOST = 3,
  UNKNOWN = 4,
  CURSED = 5,
  MAZE = 6,
  BLIND = 7,
  GIANT = 8,
}

----
enums\DebugCommand.ts
/** The values accepted by the `debug` console command. */
export enum DebugCommand {
  /** Draws a marker on the screen at the position of each entity. */
  ENTITY_POSITIONS = 1,

  /**
   * Shows the grid cost of the corresponding grid tile. (The grid cost is used when calculating
   * pathing and collision.)
   */
  GRID_COST = 2,

  /** Taking damage does not decrease the player's health. */
  INFINITE_HP = 3,

  /** +40 damage */
  HIGH_DAMAGE = 4,

  /** Displays text at the bottom of the screen about the current room. */
  SHOW_ROOM_INFO = 5,

  /** Draws red circles on the screen that represent an entity's damage hitbox. */
  SHOW_HITSPHERES = 6,

  /**
   * Displays how much damage is taken by entities. (This is similar to the Spider Mod effect, but
   * it leaves the damage as the raw values and also includes player damage.)
   */
  SHOW_DAMAGE_VALUES = 7,

  /** The player's active item is always fully charged. */
  INFINITE_ITEM_CHARGES = 8,

  /** +50 luck */
  HIGH_LUCK = 9,

  /** All enemies take constant and rapid damage. */
  QUICK_KILL = 10,

  /** Displays the coordinates for each tile on the grid. */
  GRID_INFO = 11,

  /** Displays held collectibles and temporary collectible effects. */
  PLAYER_ITEM_INFO = 12,

  /** Draws red circles on the screen that represent an entity's collision hitbox. */
  SHOW_GRID_COLLISION_POINTS = 13,
}

----
enums\Difficulty.ts
export enum Difficulty {
  NORMAL = 0,
  HARD = 1,
  GREED = 2,
  GREEDIER = 3,
}

----
enums\Dimension.ts
export enum Dimension {
  CURRENT = -1,
  MAIN = 0,

  /** Used by the mirror sequence and the escape sequence. */
  SECONDARY = 1,

  DEATH_CERTIFICATE = 2,
}

----
enums\Direction.ts
export enum Direction {
  NO_DIRECTION = -1,
  LEFT = 0,
  UP = 1,
  RIGHT = 2,
  DOWN = 3,
}

----
enums\DoorSlot.ts
export enum DoorSlot {
  NO_DOOR_SLOT = -1,

  /** In a normal room, the left door. In a 2x2 room, the uppermost door on the left side. */
  LEFT_0 = 0,

  /** In a normal room, the top door. In a 2x2 room, the leftmost door on the top side. */
  UP_0 = 1,

  /** In a normal room, the right door. In a 2x2 room, the uppermost door on the right side. */
  RIGHT_0 = 2,

  /** In a normal room, the bottom door. In a 2x2 room, the leftmost door on the bottom side. */
  DOWN_0 = 3,

  /** In a 2x2 room, the bottommost door on the left side. */
  LEFT_1 = 4,

  /** In a 2x2 room, the rightmost door on the top side. */
  UP_1 = 5,

  /** In a 2x2 room, the bottommost door on the right side. */
  RIGHT_1 = 6,

  /** In a 2x2 room, the rightmost door on the bottom side. */
  DOWN_1 = 7,
}

----
enums\Ending.ts
/** Matches the entries in the "cutscenes.xml" file. */
export enum Ending {
  INTRO = 1,
  CREDITS = 2,
  EPILOGUE = 3,
  WOMB_EDEN = 4,
  WOMB_RUBBER_CEMENT = 5,
  WOMB_NOOSE = 6,
  WOMB_WIRE_COAT_HANGER = 7,
  WOMB_EVERYTHING_IS_TERRIBLE = 8,
  WOMB_IPECAC = 9,
  WOMB_EXPERIMENTAL_TREATMENT = 10,
  WOMB_A_QUARTER = 11,
  WOMB_DR_FETUS = 12,
  WOMB_BLUE_BABY = 13,
  WOMB_IT_LIVES = 14,
  SHEOL = 15,
  CATHEDRAL = 16,
  CHEST = 17,
  DARK_ROOM = 18,
  MEGA_SATAN = 19,
  BLUE_WOMB = 20,
  GREED_MODE = 21,
  VOID = 22,
  GREEDIER = 23,
  MOTHER = 24,
  DOGMA = 25,
  BEAST = 26,
}

----
enums\EntityCollisionClass.ts
export enum EntityCollisionClass {
  NONE = 0,
  PLAYER_ONLY = 1,
  PLAYER_OBJECTS = 2,
  ENEMIES = 3,
  ALL = 4,
}

----
enums\EntityGridCollisionClass.ts
export enum EntityGridCollisionClass {
  NONE = 0,
  WALLS_X = 1,
  WALLS_Y = 2,
  WALLS = 3,
  BULLET = 4,
  GROUND = 5,
  NO_PITS = 6,
  PITS_ONLY = 7,
}

----
enums\EntityType.ts
export enum EntityType {
  NULL = 0,
  PLAYER = 1,
  TEAR = 2,
  FAMILIAR = 3,
  BOMB = 4,
  PICKUP = 5,
  SLOT = 6,
  LASER = 7,
  KNIFE = 8,
  PROJECTILE = 9,
  GAPER = 10,
  GUSHER = 11,
  HORF = 12,
  FLY = 13,
  POOTER = 14,
  CLOTTY = 15,
  MULLIGAN = 16,
  SHOPKEEPER = 17,
  ATTACK_FLY = 18,
  LARRY_JR = 19,
  MONSTRO = 20,
  MAGGOT = 21,
  HIVE = 22,
  CHARGER = 23,
  GLOBIN = 24,
  BOOM_FLY = 25,
  MAW = 26,
  HOST = 27,
  CHUB = 28,
  HOPPER = 29,
  BOIL = 30,
  SPITTY = 31,
  BRAIN = 32,
  FIREPLACE = 33,
  LEAPER = 34,
  MR_MAW = 35,
  GURDY = 36,
  BABY = 38,
  VIS = 39,
  GUTS = 40,
  KNIGHT = 41,
  GRIMACE = 42,
  MONSTRO_2 = 43,
  POKY = 44,
  MOM = 45,
  SLOTH = 46,
  LUST = 47,
  WRATH = 48,
  GLUTTONY = 49,
  GREED = 50,
  ENVY = 51,
  PRIDE = 52,
  DOPLE = 53,
  FLAMING_HOPPER = 54,
  LEECH = 55,
  LUMP = 56,
  MEMBRAIN = 57,
  PARA_BITE = 58,
  FRED = 59,
  EYE = 60,
  SUCKER = 61,
  PIN = 62,
  FAMINE = 63,
  PESTILENCE = 64,
  WAR = 65,
  DEATH = 66,
  DUKE_OF_FLIES = 67,
  PEEP = 68,
  LOKI = 69,
  FISTULA_BIG = 71,
  FISTULA_MEDIUM = 72,
  FISTULA_SMALL = 73,
  BLASTOCYST_BIG = 74,
  BLASTOCYST_MEDIUM = 75,
  BLASTOCYST_SMALL = 76,
  EMBRYO = 77,
  MOMS_HEART = 78,
  GEMINI = 79,
  MOTER = 80,
  FALLEN = 81,
  HEADLESS_HORSEMAN = 82,
  HORSEMAN_HEAD = 83,
  SATAN = 84,
  SPIDER = 85,
  KEEPER = 86,
  GURGLE = 87,
  WALKING_BOIL = 88,
  BUTTLICKER = 89,
  HANGER = 90,
  SWARMER = 91,
  HEART = 92,
  MASK = 93,
  BIG_SPIDER = 94,
  ETERNAL_FLY = 96,
  MASK_OF_INFAMY = 97,
  HEART_OF_INFAMY = 98,
  GURDY_JR = 99,
  WIDOW = 100,
  DADDY_LONG_LEGS = 101,
  ISAAC = 102,

  // ---------------
  // Rebirth Enemies
  // ---------------

  STONE_EYE = 201,
  CONSTANT_STONE_SHOOTER = 202,
  BRIMSTONE_HEAD = 203,
  MOBILE_HOST = 204,
  NEST = 205,
  BABY_LONG_LEGS = 206,
  CRAZY_LONG_LEGS = 207,
  FATTY = 208,
  FAT_SACK = 209,
  BLUBBER = 210,
  HALF_SACK = 211,
  DEATHS_HEAD = 212,
  MOMS_HAND = 213,
  FLY_LVL_2 = 214,
  SPIDER_LVL_2 = 215,
  SWINGER = 216,
  DIP = 217,
  WALL_HUGGER = 218,
  WIZOOB = 219,
  SQUIRT = 220,
  COD_WORM = 221,
  RING_OF_FLIES = 222,
  DINGA = 223,
  OOB = 224,
  BLACK_MAW = 225,
  SKINNY = 226,
  BONY = 227,
  HOMUNCULUS = 228,
  TUMOR = 229,
  CAMILLO_JR = 230,
  NERVE_ENDING = 231,

  // SKINBALL = 232, // This is a non-existent entity.

  // MOM_HEAD = 233, // This is a non-existent entity.

  ONE_TOOTH = 234,
  GAPING_MAW = 235,
  BROKEN_GAPING_MAW = 236,
  GURGLING = 237,
  SPLASHER = 238,
  GRUB = 239,
  WALL_CREEP = 240,
  RAGE_CREEP = 241,
  BLIND_CREEP = 242,
  CONJOINED_SPITTY = 243,
  ROUND_WORM = 244,
  POOP = 245,
  RAGLING = 246,
  FLESH_MOBILE_HOST = 247,
  PSY_HORF = 248,
  FULL_FLY = 249,
  TICKING_SPIDER = 250,
  BEGOTTEN = 251,
  NULLS = 252,
  PSY_TUMOR = 253,
  FLOATING_KNIGHT = 254,
  NIGHT_CRAWLER = 255,

  // ------------------
  // Afterbirth Enemies
  // ------------------

  DART_FLY = 256,
  CONJOINED_FATTY = 257,
  FAT_BAT = 258,
  IMP = 259,

  // --------------
  // Rebirth Bosses
  // --------------

  HAUNT = 260,
  DINGLE = 261,
  MEGA_MAW = 262,
  GATE = 263,
  MEGA_FATTY = 264,
  CAGE = 265,
  MAMA_GURDY = 266,
  DARK_ONE = 267,
  ADVERSARY = 268,
  POLYCEPHALUS = 269,
  MR_FRED = 270,
  URIEL = 271,
  GABRIEL = 272,
  LAMB = 273,
  MEGA_SATAN = 274,
  MEGA_SATAN_2 = 275,

  // -------------------
  // Afterbirth+ Enemies
  // -------------------

  ROUNDY = 276,
  BLACK_BONY = 277,
  BLACK_GLOBIN = 278,
  BLACK_GLOBIN_HEAD = 279,
  BLACK_GLOBIN_BODY = 280,
  SWARM = 281,
  MEGA_CLOTTY = 282,
  BONE_KNIGHT = 283,
  CYCLOPIA = 284,
  RED_GHOST = 285,
  FLESH_DEATHS_HEAD = 286,
  MOMS_DEAD_HAND = 287,
  DUKIE = 288,
  ULCER = 289,
  MEATBALL = 290,
  PITFALL = 291,
  MOVABLE_TNT = 292,
  ULTRA_COIN = 293,
  ULTRA_DOOR = 294,
  CORN_MINE = 295,
  HUSH_FLY = 296,
  HUSH_GAPER = 297,
  HUSH_BOIL = 298,
  GREED_GAPER = 299,
  MUSHROOM = 300,
  POISON_MIND = 301,
  STONEY = 302,
  BLISTER = 303,
  THING = 304,
  MINISTRO = 305,
  PORTAL = 306,

  // --------------------
  // Booster Pack Enemies
  // --------------------

  TAR_BOY = 307,
  FISTULOID = 308,
  GUSH = 309,
  LEPER = 310,
  MR_MINE = 311,

  // -----------------
  // Afterbirth Bosses
  // -----------------

  STAIN = 401,
  BROWNIE = 402,
  FORSAKEN = 403,
  LITTLE_HORN = 404,
  RAG_MAN = 405,
  ULTRA_GREED = 406,
  HUSH = 407,
  HUSH_SKINLESS = 408,
  RAG_MEGA = 409,
  SISTERS_VIS = 410,
  BIG_HORN = 411,
  DELIRIUM = 412,
  MATRIARCH = 413,

  // ------------------
  // Repentance Enemies
  // ------------------

  // BONE_WORM = 801, // This is a non-existent entity.

  BLOOD_PUPPY = 802,
  QUAKE_GRIMACE = 804,
  BISHOP = 805,
  BUBBLES = 806,
  WRAITH = 807,
  WILLO = 808,
  BOMB_GRIMACE = 809,
  SMALL_LEECH = 810,
  DEEP_GAPER = 811,
  SUB_HORF = 812,
  BLURB = 813,
  STRIDER = 814,
  FISSURE = 815,
  POLTY = 816,
  PREY = 817,
  ROCK_SPIDER = 818,
  FLY_BOMB = 819,
  DANNY = 820,
  BLASTER = 821,
  BOUNCER = 822,
  QUAKEY = 823,
  GYRO = 824,
  FIRE_WORM = 825,
  HARDY = 826,
  FACELESS = 827,
  NECRO = 828,
  MOLE = 829,
  BIG_BONY = 830,
  GUTTED_FATTY = 831,
  EXORCIST = 832,
  CANDLER = 833,
  WHIPPER = 834,
  PEEPER_FATTY = 835,
  VIS_VERSA = 836,
  HENRY = 837,
  WILLO_LVL_2 = 838,
  PON = 840,
  REVENANT = 841,
  BOMBGAGGER = 844,
  GAPER_LVL_2 = 850,
  TWITCHY = 851,
  SPIKEBALL = 852,
  SMALL_MAGGOT = 853,
  ADULT_LEECH = 854,
  CHARGER_LVL_2 = 855,
  GASBAG = 856,
  COHORT = 857,
  FLOATING_HOST = 859,
  UNBORN = 860,
  PUSTULE = 861,
  CYST = 862,
  MORNINGSTAR = 863,
  MOCKULUS = 864,
  EVIS = 865,
  DARK_ESAU = 866,
  MOTHERS_SHADOW = 867,
  ARMY_FLY = 868,
  MIGRAINE = 869,
  DRIP = 870,
  SPLURT = 871,
  CLOGGY = 872,
  FLY_TRAP = 873,
  GAS_DWARF = 874,
  POOT_MINE = 875,
  DUMP = 876,
  GRUDGE = 877,
  BUTT_SLICKER = 878,
  BLOATY = 879,
  FLESH_MAIDEN = 880,
  NEEDLE = 881,
  DUST = 882,
  BABY_BEGOTTEN = 883,
  SWARM_SPIDER = 884,
  CULTIST = 885,
  VIS_FATTY = 886,
  DUSTY_DEATHS_HEAD = 887,
  SHADY = 888,
  CLICKETY_CLACK = 889,
  MAZE_ROAMER = 890,
  GOAT = 891,
  POOFER = 892,
  BALL_AND_CHAIN = 893,
  REAP_CREEP = 900,
  LIL_BLUB = 901,
  RAINMAKER = 902,
  VISAGE = 903,
  SIREN = 904,
  HERETIC = 905,
  HORNFEL = 906,
  GREAT_GIDEON = 907,
  BABY_PLUM = 908,
  SCOURGE = 909,
  CHIMERA = 910,
  ROTGUT = 911,
  MOTHER = 912,
  MIN_MIN = 913,
  CLOG = 914,
  SINGE = 915,
  BUMBINO = 916,
  COLOSTOMIA = 917,
  TURDLET = 918,
  RAGLICH = 919,
  HORNY_BOYS = 920,
  CLUTCH = 921,

  // CADAVRA = 922, // This is a non-existent entity.

  DOGMA = 950,
  BEAST = 951,
  GENERIC_PROP = 960,
  FROZEN_ENEMY = 963,
  DUMMY = 964,
  MINECART = 965,
  SIREN_HELPER = 966,
  HORNFEL_DOOR = 967,

  // TRIGGER_OUTPUT = 969, // This is a non-existent entity.

  // ENVIRONMENT = 970, // This is a non-existent entity.

  // ---------------
  // Special Effects
  // ---------------

  EFFECT = 1000,
  TEXT = 9001,
}

----
enums\FadeoutTarget.ts
export enum FadeoutTarget {
  /**
   * With this value, the game will fade to black and then just immediately return to the game at
   * normal opacity.
   */
  NONE = 0,

  /** The screen that has the three rectangles for the three different save files. */
  FILE_SELECT = 1,

  /** The screen that lists "New Run", "Continue", "Challenges", and so on. */
  MAIN_MENU = 2,

  /** The screen that shows "The Binding of Isaac: Repentance". */
  TITLE_SCREEN = 3,

  RESTART_RUN = 4,
}

----
enums\GameStateFlag.ts
/** Used with the `Game.GetStateFlag` and `Game.SetStateFlag` methods. */
export enum GameStateFlag {
  FAMINE_SPAWNED = 0,

  /** @deprecated This only works in Afterbirth+, not Repentance. */
  PESTILENCE_SPAWNED = 1,

  /** @deprecated This only works in Afterbirth+, not Repentance. */
  WAR_SPAWNED = 2,

  /** @deprecated This only works in Afterbirth+, not Repentance. */
  DEATH_SPAWNED = 3,

  BOSS_POOL_SWITCHED = 4,
  DEVIL_ROOM_SPAWNED = 5,
  DEVIL_ROOM_VISITED = 6,
  BOOK_REVELATIONS_USED = 7,
  BOOK_PICKED_UP = 8,
  WRATH_SPAWNED = 9,
  GLUTTONY_SPAWNED = 10,
  LUST_SPAWNED = 11,
  SLOTH_SPAWNED = 12,
  ENVY_SPAWNED = 13,
  PRIDE_SPAWNED = 14,
  GREED_SPAWNED = 15,
  SUPER_GREED_SPAWNED = 16,
  DONATION_SLOT_BROKEN = 17,
  DONATION_SLOT_JAMMED = 18,

  /**
   * Is set when the player uses the beam of light on Womb 2 to go to Cathedral. This does not get
   * unset if Womb 2 is replayed and a trapdoor is taken instead.
   */
  HEAVEN_PATH = 19,

  /** @deprecated This only works in Afterbirth+, not Repentance. */
  REBIRTH_BOSS_SWITCHED = 20,

  /** @deprecated This only works in Afterbirth+, not Repentance. */
  HAUNT_SELECTED = 21,

  /** @deprecated This only works in Afterbirth+, not Repentance. */
  ADVERSARY_SELECTED = 22,

  /** @deprecated This only works in Afterbirth+, not Repentance. */
  MR_FRED_SELECTED = 23,

  /** @deprecated This only works in Afterbirth+, not Repentance. */
  MAMA_GURDY_SELECTED = 24,

  URIEL_SPAWNED = 25,
  GABRIEL_SPAWNED = 26,
  FALLEN_SPAWNED = 27,

  /** @deprecated This only works in Afterbirth+, not Repentance. */
  HEADLESS_HORSEMAN_SPAWNED = 28,

  KRAMPUS_SPAWNED = 29,
  DONATION_SLOT_BLOWN = 30,
  SHOPKEEPER_KILLED = 31,
  ULTRA_PRIDE_SPAWNED = 32,
  BOSS_RUSH_DONE = 33,
  GREED_SLOT_JAMMED = 34,

  /** @deprecated This only works in Afterbirth+, not Repentance. */
  AFTERBIRTH_BOSS_SWITCHED = 35,

  /** @deprecated This only works in Afterbirth+, not Repentance. */
  BROWNIE_SELECTED = 36,

  SUPER_BUM_APPEARED = 37,
  BOSS_RUSH_DOOR_SPAWNED = 38,
  BLUE_WOMB_DOOR_SPAWNED = 39,
  BLUE_WOMB_DONE = 40,
  HEART_BOMB_COIN_PICKED = 41,

  /** @deprecated This only works in Afterbirth+, not Repentance. */
  AFTERBIRTH_PLUS_BOSS_SWITCHED = 42,

  /** Set when reaching 99 coins. Used to check for the Golden Razor achievement. */
  MAX_COINS_OBTAINED = 43,

  /** Set when entering a trapdoor that leads to the alternate path. */
  SECRET_PATH = 44,

  /** Set when Perfection has dropped from a boss. */
  PERFECTION_SPAWNED = 45,

  /** Set when Mom's Heart has been killed in the Mausoleum. */
  MAUSOLEUM_HEART_KILLED = 46,

  /**
   * Set when entering Mausoleum/Gehenna II through the photo door. Causes Dad's Note to spawn
   * instead of the Mom boss room. The "backwards path" refers to the Ascent.
   */
  BACKWARDS_PATH_INIT = 47,

  /** Set when the player takes Dad's Note. The "backwards path" refers to the Ascent. */
  BACKWARDS_PATH = 48,
}

----
enums\GridCollisionClass.ts
export enum GridCollisionClass {
  NONE = 0,
  PIT = 1,
  OBJECT = 2,
  SOLID = 3,
  WALL = 4,
  WALL_EXCEPT_PLAYER = 5,
}

----
enums\GridEntityType.ts
export enum GridEntityType {
  NULL = 0,

  /** Does not correspond to any specific `GridEntity` class. */
  DECORATION = 1,

  /**
   * Grid entities with this type can be converted to the `GridEntityRock` class.
   *
   * Corresponds to `GridEntityXMLType.ROCK` (1000).
   */
  ROCK = 2,

  /**
   * Grid entities with this type can be converted to the `GridEntityRock` class.
   *
   * Corresponds to `GridEntityXMLType.BLOCK` (1900).
   */
  BLOCK = 3,

  /**
   * The rocks with an "X" on them that produce soul hearts and other rewards when destroyed.
   *
   * Grid entities with this type can be converted to the `GridEntityRock` class.
   *
   * Corresponds to `GridEntityXMLType.ROCK_TINTED` (1003).
   */
  ROCK_TINTED = 4,

  /**
   * Grid entities with this type can be converted to the `GridEntityRock` class.
   *
   * Corresponds to `GridEntityXMLType.ROCK_BOMB` (1001).
   */
  ROCK_BOMB = 5,

  /**
   * An urn, mushroom, skull, polyp, or bucket, depending on what the backdrop type. For more
   * information, see the `getRockAltType` helper function.
   *
   * (Contrary to popular belief, the stage does not matter for the purposes of determining what the
   * `RockAltType` is.)
   *
   * Grid entities with this type can be converted to the `GridEntityRock` class.
   *
   * Corresponds to `GridEntityXMLType.ROCK_ALT` (1002).
   */
  ROCK_ALT = 6,

  /**
   * Grid entities with this type can be converted to the `GridEntityPit` class.
   *
   * Corresponds to `GridEntityXMLType.PIT` (3000).
   */
  PIT = 7,

  /**
   * Grid entities with this type can be converted to the `GridEntitySpikes` class.
   *
   * Corresponds to `GridEntityXMLType.SPIKES` (1930).
   */
  SPIKES = 8,

  /**
   * Grid entities with this type can be converted to the `GridEntitySpikes` class.
   *
   * Corresponds to `GridEntityXMLType.SPIKES_ON_OFF` (1931).
   */
  SPIKES_ON_OFF = 9,

  /**
   * Does not correspond to any specific `GridEntity` class.
   *
   * Corresponds to `GridEntityXMLType.SPIDER_WEB` (1940).
   */
  SPIDER_WEB = 10,

  /**
   * A key block.
   *
   * Does not correspond to any specific `GridEntity` class.
   *
   * Corresponds to `GridEntityXMLType.LOCK` (4000).
   */
  LOCK = 11,

  /**
   * Grid entities with this type can be converted to the `GridEntityTNT` class.
   *
   * Corresponds to `GridEntityXMLType.TNT` (1300).
   */
  TNT = 12,

  /**
   * Does not correspond to any specific `GridEntity` class.
   *
   * Corresponds to `GridEntityXMLType.FIREPLACE` (1400) and `GridEntityXMLType.RED_FIREPLACE`
   * (1410).
   */
  FIREPLACE = 13,

  /**
   * Grid entities with this type can be converted to the `GridEntityPoop` class.
   *
   * Corresponds to many different `GridEntityXMLType` values.
   */
  POOP = 14,

  /**
   * Does not correspond to any specific `GridEntity` class.
   *
   * Corresponds to `GridEntityXMLType.WALL` (1999).
   */
  WALL = 15,

  /**
   * Grid entities with this type can be converted to the `GridEntityDoor` class.
   *
   * Does not correspond to any `GridEntityXMLType` value.
   */
  DOOR = 16,

  /**
   * Does not correspond to any specific `GridEntity` class.
   *
   * Corresponds to `GridEntityXMLType.TRAPDOOR` (9000).
   */
  TRAPDOOR = 17,

  /**
   * Does not correspond to any specific `GridEntity` class.
   *
   * Corresponds to `GridEntityXMLType.CRAWL_SPACE` (9100).
   */
  CRAWL_SPACE = 18,

  /**
   * Does not correspond to any specific `GridEntity` class.
   *
   * Corresponds to `GridEntityXMLType.GRAVITY` (10000).
   */
  GRAVITY = 19,

  /**
   * Grid entities with this type can be converted to the `GridEntityPressurePlate` class.
   *
   * Corresponds to `GridEntityXMLType.PRESSURE_PLATE` (4500).
   */
  PRESSURE_PLATE = 20,

  /**
   * Does not correspond to any specific `GridEntity` class.
   *
   * Corresponds to `GridEntityXMLType.STATUE_DEVIL` (5000) and `GridEntityXMLType.STATUE_ANGEL`
   * (5001).
   */
  STATUE = 21,

  /**
   * A super tinted rock that yields double rewards.
   *
   * Grid entities with this type can be converted to the `GridEntityRock` class.
   *
   * Does not correspond to any `GridEntityXMLType` value.
   */
  ROCK_SUPER_SPECIAL = 22,

  /**
   * Does not correspond to any specific `GridEntity` class.
   *
   * Corresponds to `GridEntityXMLType.TELEPORTER` (6100).
   */
  TELEPORTER = 23,

  /**
   * Grid entities with this type can be converted to the `GridEntityRock` class.
   *
   * Corresponds to `GridEntityXMLType.PILLAR` (1901).
   */
  PILLAR = 24,

  /**
   * Grid entities with this type can be converted to the `GridEntityRock` class.
   *
   * Corresponds to `GridEntityXMLType.ROCK_SPIKED` (1010).
   */
  ROCK_SPIKED = 25,

  /**
   * A marked skull that will always drop a Fool card.
   *
   * Grid entities with this type can be converted to the `GridEntityRock` class.
   *
   * Corresponds to `GridEntityXMLType.ROCK_ALT_2` (1008).
   */
  ROCK_ALT_2 = 26,

  /**
   * Grid entities with this type can be converted to the `GridEntityRock` class.
   *
   * Corresponds to `GridEntityXMLType.ROCK_GOLD` (1011).
   */
  ROCK_GOLD = 27,
}

----
enums\GridEntityXMLType.ts
/**
 * The type of a grid entity as represented in a room XML/STB file.
 *
 * This is converted by the game to the GridEntityType enum.
 *
 * The `gridspawn` console command accepts `GridEntityXMLType` instead of `GridEntityType`.
 */
export enum GridEntityXMLType {
  /** Corresponds to `GridEntityType.DECORATION` (1). */
  DECORATION = 0,

  /** Corresponds to `EntityType.EFFECT` (1000). */
  EFFECT = 999,

  /** Corresponds to `GridEntityType.ROCK` (2). */
  ROCK = 1000,

  /** Corresponds to `GridEntityType.ROCK_BOMB` (5). */
  ROCK_BOMB = 1001,

  /**
   * An urn, mushroom, skull, polyp, or bucket, depending on what the backdrop type. For more
   * information, see the `getRockAltType` helper function.
   *
   * (Contrary to popular belief, the stage does not matter for the purposes of determining what the
   * `RockAltType` is.)
   *
   * Corresponds to `GridEntityType.ROCK_ALT` (6).
   */
  ROCK_ALT = 1002,

  /**
   * The rocks with an "X" on them that produce soul hearts and other rewards when destroyed.
   *
   * Corresponds to `GridEntityType.ROCK_TINTED` (4).
   */
  ROCK_TINTED = 1003,

  /**
   * A marked skull that will always drop a Fool card.
   *
   * Corresponds to `GridEntityType.ROCK_ALT_2` (26).
   */
  ROCK_ALT_2 = 1008,

  /**
   * Rocks that will be destroyed when other nearby rocks are. In-game, it will be a
   * `GridEntityType.ROCK` (2) with a `VarData` of 1.
   */
  ROCK_EVENT = 1009,

  /** Corresponds to `GridEntityType.ROCK_SPIKED` (25). */
  ROCK_SPIKED = 1010,

  /** Corresponds to `GridEntityType.ROCK_GOLD` (27). */
  ROCK_GOLD = 1011,

  /** Corresponds to `GridEntityType.TNT` (12). */
  TNT = 1300,

  /** Corresponds to `GridEntityType.FIREPLACE` (13), `FireplaceGridEntityVariant.NORMAL` (0). */
  FIREPLACE = 1400,

  /** Corresponds to `GridEntityType.FIREPLACE` (13), `FireplaceGridEntityVariant.RED` (1). */
  RED_FIREPLACE = 1410,

  /** Corresponds to `GridEntityType.POOP` (14), `PoopGridEntityVariant.RED` (1). */
  POOP_RED = 1490,

  /** Corresponds to `GridEntityType.POOP` (14), `PoopGridEntityVariant.RAINBOW` (4). */
  POOP_RAINBOW = 1494,

  /** Corresponds to `GridEntityType.POOP` (14), `PoopGridEntityVariant.CORNY` (2). */
  POOP_CORNY = 1495,

  /** Corresponds to `GridEntityType.POOP` (14), `PoopGridEntityVariant.GOLDEN` (3). */
  POOP_GOLDEN = 1496,

  /** Corresponds to `GridEntityType.POOP` (14), `PoopGridEntityVariant.BLACK` (5). */
  POOP_BLACK = 1497,

  /** Corresponds to `GridEntityType.POOP` (14), `PoopGridEntityVariant.WHITE` (6). */
  POOP_WHITE = 1498,

  /**
   * Corresponds to `GridEntityType.POOP` (14) and the four "GIGA" variants of
   * `PoopGridEntityVariant`.
   */
  POOP_GIGA = 1499,

  /** Corresponds to `GridEntityType.POOP` (14), `PoopGridEntityVariant.NORMAL` (0). */
  POOP = 1500,

  /** Corresponds to `GridEntityType.POOP` (14), `PoopGridEntityVariant.CHARMING` (11). */
  POOP_CHARMING = 1501,

  /** Corresponds to `GridEntityType.BLOCK` (3). */
  BLOCK = 1900,

  /** Corresponds to `GridEntityType.PILLAR` (24). */
  PILLAR = 1901,

  /** Corresponds to `GridEntityType.SPIKES` (8). */
  SPIKES = 1930,

  /** Corresponds to `GridEntityType.SPIKES_ON_OFF` (9). */
  SPIKES_ON_OFF = 1931,

  /** Corresponds to `GridEntityType.SPIDER_WEB` (10). */
  SPIDER_WEB = 1940,

  /** Corresponds to `GridEntityType.WALL` (15). */
  WALL = 1999,

  /** Corresponds to `GridEntityType.PIT` (7). */
  PIT = 3000,

  /** Corresponds to `EntityType.EFFECT` (1000), `EffectVariant.FISSURE_SPAWNER` (192). */
  FISSURE_SPAWNER = 3001,

  /**
   * Pits that will be filled in when nearby rocks are destroyed. In-game, it will be a
   * `GridEntityType.PIT` (7) with a `VarData` of 1.
   */
  PIT_EVENT = 3009,

  /**
   * A key block.
   *
   * Corresponds to `GridEntityType.LOCK` (11).
   */
  LOCK = 4000,

  /** Corresponds to `GridEntityType.PRESSURE_PLATE` (20). */
  PRESSURE_PLATE = 4500,

  /** Corresponds to `GridEntityType.STATUE` (21), `StatueVariant.DEVIL` (0). */
  STATUE_DEVIL = 5000,

  /** Corresponds to `GridEntityType.STATUE` (21), `StatueVariant.ANGEL` (1). */
  STATUE_ANGEL = 5001,

  /** Corresponds to `GridEntityType.TELEPORTER` (23). */
  TELEPORTER = 6100,

  /** Corresponds to `GridEntityType.TRAPDOOR` (17). */
  TRAPDOOR = 9000,

  /** Corresponds to `GridEntityType.CRAWL_SPACE` (18). */
  CRAWL_SPACE = 9100,

  /** Corresponds to `GridEntityType.GRAVITY` (19). */
  GRAVITY = 10_000,
}

----
enums\GridPath.ts
/**
 * GridPath is not an enum, but rather a variable integer that represents the cost it would take for
 * an entity to pass through a grid entity. This enum lists some standard cost values that the
 * vanilla game uses.
 */
export enum GridPath {
  NONE = 0,

  /**
   * Set by some enemies when they pass through a tile. De-prioritizes the tile for pathfinders.
   * Degrades over time in steps of 100.
   */
  WALKED_TILE = 900,

  /** De-prioritizes the tile for pathfinders. Does not degrade. */
  FIREPLACE = 950,

  /**
   * Set by grid entities. Invalidates the tile for pathfinders. Impedes grounded player movement.
   * Does not degrade.
   */
  ROCK = 1000,

  /** Invalidates the tile for pathfinders. Impedes grounded player movement. Does not degrade. */
  PIT = 3000,

  /**
   * Invalidates the tile for pathfinders. Impedes grounded player movement. Drops to 900 and then
   * degrades over time in steps of 100. (Grimaces reset the value every frame.)
   */
  GRIMACE = 3999,
}

----
enums\GridRoom.ts
/**
 * Most rooms have a grid index corresponding to their position on the level layout grid. Valid grid
 * indexes range from 0 through 168 (because the grid is 13x13). However, some rooms are not part of
 * the level layout grid. For off-grid rooms, they are assigned special negative integers that
 * correspond to what kind of room they are. This enum contains all of the special negative values
 * that exist.
 */
export enum GridRoom {
  /** The Devil or Angel room for the floor. */
  DEVIL = -1,

  /** The I AM ERROR room for the floor. */
  ERROR = -2,

  /** Used by the "goto" console command. */
  DEBUG = -3,

  /** The crawl space for the floor. */
  DUNGEON = -4,

  BOSS_RUSH = -5,
  BLACK_MARKET = -6,

  /** Mega Satan's boss room. */
  MEGA_SATAN = -7,

  /** The room after defeating It Lives that leads to Blue Womb. */
  BLUE_WOMB = -8,

  /** The room after defeating Hush that leads to The Void. */
  VOID = -9,

  /**
   * The room that is connected to the Boss Room that leads to the next Repentance floor.
   *
   * Additionally, this grid index is also used for the room behind the strange door on Depths 2
   * that is connected to the starting room.
   */
  SECRET_EXIT = -10,

  /** The secret crawl space under Great Gideon that is only accessible with a Chaos Card. */
  GIDEON_DUNGEON = -11,

  /** The Genesis room where you get to take new collectibles. (It looks like a clean bedroom.) */
  GENESIS = -12,

  /** The shop that appears if you have Member Card. */
  SECRET_SHOP = -13,

  /** The boss room for the 2nd phase of Rotgut. */
  ROTGUT_DUNGEON_1 = -14,

  /** The boss room for the 3rd phase of Rotgut. */
  ROTGUT_DUNGEON_2 = -15,

  /** The room before a Treasure Room that appears if you have Blue Key. */
  BLUE_ROOM = -16,

  /** The room that you are teleported to when you use a Reverse Emperor card. */
  EXTRA_BOSS = -17,

  /** The shop that you go to when you climb the ladder from The Stairway. */
  ANGEL_SHOP = -18,
}

----
enums\InputHook.ts
export enum InputHook {
  IS_ACTION_PRESSED = 0,
  IS_ACTION_TRIGGERED = 1,
  GET_ACTION_VALUE = 2,
}

----
enums\ItemConfigCardType.ts
/**
 * Corresponds to the "type" attribute in the "pocketitems.xml" file.
 *
 * Matches the `ItemConfig.CARDTYPE_` members of the `ItemConfig` class. In IsaacScript, we
 * reimplement this as an enum instead, since it is cleaner.
 *
 * Note that this enum is not to be confused with the `CardType` enum; the latter denotes the
 * in-game sub-type of the card, which is completely different.
 */
export enum ItemConfigCardType {
  /** No valid card will have this type. */
  NULL = -1,

  /** A normal card with a brown back, like "0 - The Fool". */
  TAROT = 0,

  /**
   * A playing card with a red back, like 2 of Clubs. This includes the Queen of Hearts and the
   * Joker. This does not include Suicide King or the Rules Card.
   */
  SUIT = 1,

  /**
   * A left-facing rune like Hagalaz, a right-facing rune like Ansuz, a Black Rune, a Blank Rune, a
   * a Rune Shard, or a "soul" rune like Soul of Isaac.
   */
  RUNE = 2,

  /**
   * A card that does not fall into any of the other categories, like a Chaos Card (42). This
   * category excludes non-cards such as Dice Shard.
   *
   * Most of the cards in this category have unique card-backs.
   *
   * 4 cards share the Magic the Gathering back:
   * - Chaos Card (42)
   * - Huge Growth (52)
   * - Ancient Recall (53)
   * - Era Walk (54)
   *
   * 3 cards have a red playing card back:
   * - Rules Card (44)
   * - Suicide King (46)
   * - ? Card (48)
   */
  SPECIAL = 3,

  /** A Dice Shard, an Emergency Contact, or a Cracked Key. */
  SPECIAL_OBJECT = 4,

  /** A reverse tarot card with a reddish-brown back, like "0 - The Fool?". */
  TAROT_REVERSE = 5,

  /**
   * This is not a real `CardType`. Due to limitations in the API, getting the real type of modded
   * cards is not possible, so this value is returned instead.
   */
  MODDED = 6,
}

----
enums\ItemConfigChargeType.ts
/**
 * Matches the `ItemConfig.CHARGE_` members of the `ItemConfig` class. In IsaacScript, we
 * reimplement this as an enum instead, since it is cleaner.
 */
export enum ItemConfigChargeType {
  NORMAL = 0,
  TIMED = 1,
  SPECIAL = 2,
}

----
enums\ItemConfigPillEffectClass.ts
/**
 * This corresponds to the number in the "class" tag in the "pocketitems.xml" file. The "+" or "-"
 * part of the tag is contained within the `ItemConfigPillEffectType` enum.
 */
export enum ItemConfigPillEffectClass {
  JOKE = 0,
  MINOR = 1,
  MEDIUM = 2,
  MAJOR = 3,

  /**
   * This is not a real `ItemConfigPillEffectClass`. Due to limitations in the API, getting the real
   * class of modded pill effects is not possible, so this value is returned instead by the
   * `getPillEffectClass` helper function.
   */
  MODDED = 4,
}

----
enums\ItemConfigPillEffectType.ts
/**
 * This corresponds to the suffix of the "class" tag in the "pocketitems.xml" file. "+" is equal to
 * `POSITIVE`, "-" is equal to `NEGATIVE`, and no suffix is equal to `NEUTRAL`.
 */
export enum ItemConfigPillEffectType {
  POSITIVE = 0,
  NEGATIVE = 1,
  NEUTRAL = 2,

  /**
   * This is not a real `ItemConfigPillEffectType`. Due to limitations in the API, getting the real
   * type of modded pill effects is not possible, so this value is returned instead by the
   * `getPillEffectType` helper function.
   */
  MODDED = 3,
}

----
enums\ItemPoolType.ts
export enum ItemPoolType {
  TREASURE = 0,
  SHOP = 1,
  BOSS = 2,
  DEVIL = 3,
  ANGEL = 4,
  SECRET = 5,
  LIBRARY = 6,
  SHELL_GAME = 7,
  GOLDEN_CHEST = 8,
  RED_CHEST = 9,
  BEGGAR = 10,
  DEMON_BEGGAR = 11,
  CURSE = 12,
  KEY_MASTER = 13,
  BATTERY_BUM = 14,
  MOMS_CHEST = 15,
  GREED_TREASURE = 16,
  GREED_BOSS = 17,
  GREED_SHOP = 18,
  GREED_DEVIL = 19,
  GREED_ANGEL = 20,
  GREED_CURSE = 21,
  GREED_SECRET = 22,
  CRANE_GAME = 23,
  ULTRA_SECRET = 24,
  BOMB_BUM = 25,
  PLANETARIUM = 26,
  OLD_CHEST = 27,
  BABY_SHOP = 28,
  WOODEN_CHEST = 29,
  ROTTEN_BEGGAR = 30,
}

----
enums\ItemType.ts
export enum ItemType {
  NULL = 0,
  PASSIVE = 1,
  TRINKET = 2,
  ACTIVE = 3,
  FAMILIAR = 4,
}

----
enums\Keyboard.ts
export enum Keyboard {
  SPACE = 32,
  APOSTROPHE = 39,
  COMMA = 44,
  MINUS = 45,
  PERIOD = 46,
  SLASH = 47,
  ZERO = 48,
  ONE = 49,
  TWO = 50,
  THREE = 51,
  FOUR = 52,
  FIVE = 53,
  SIX = 54,
  SEVEN = 55,
  EIGHT = 56,
  NINE = 57,
  SEMICOLON = 59,
  EQUAL = 61,
  A = 65,
  B = 66,
  C = 67,
  D = 68,
  E = 69,
  F = 70,
  G = 71,
  H = 72,
  I = 73,
  J = 74,
  K = 75,
  L = 76,
  M = 77,
  N = 78,
  O = 79,
  P = 80,
  Q = 81,
  R = 82,
  S = 83,
  T = 84,
  U = 85,
  V = 86,
  W = 87,
  X = 88,
  Y = 89,
  Z = 90,
  LEFT_BRACKET = 91,
  BACKSLASH = 92,
  RIGHT_BRACKET = 93,
  GRAVE_ACCENT = 96,
  WORLD_1 = 161,
  WORLD_2 = 162,
  ESCAPE = 256,
  ENTER = 257,
  TAB = 258,
  BACKSPACE = 259,
  INSERT = 260,
  DELETE = 261,
  RIGHT = 262,
  LEFT = 263,
  DOWN = 264,
  UP = 265,
  PAGE_UP = 266,
  PAGE_DOWN = 267,
  HOME = 268,
  END = 269,
  CAPS_LOCK = 280,
  SCROLL_LOCK = 281,
  NUM_LOCK = 282,
  PRINT_SCREEN = 283,
  PAUSE = 284,
  F1 = 290,
  F2 = 291,
  F3 = 292,
  F4 = 293,
  F5 = 294,
  F6 = 295,
  F7 = 296,
  F8 = 297,
  F9 = 298,
  F10 = 299,
  F11 = 300,
  F12 = 301,
  F13 = 302,
  F14 = 303,
  F15 = 304,
  F16 = 305,
  F17 = 306,
  F18 = 307,
  F19 = 308,
  F20 = 309,
  F21 = 310,
  F22 = 311,
  F23 = 312,
  F24 = 313,
  F25 = 314,
  KP_0 = 320,
  KP_1 = 321,
  KP_2 = 322,
  KP_3 = 323,
  KP_4 = 324,
  KP_5 = 325,
  KP_6 = 326,
  KP_7 = 327,
  KP_8 = 328,
  KP_9 = 329,
  KP_DECIMAL = 330,
  KP_DIVIDE = 331,
  KP_MULTIPLY = 332,
  KP_SUBTRACT = 333,
  KP_ADD = 334,
  KP_ENTER = 335,
  KP_EQUAL = 336,
  LEFT_SHIFT = 340,
  LEFT_CONTROL = 341,
  LEFT_ALT = 342,
  LEFT_SUPER = 343,
  RIGHT_SHIFT = 344,
  RIGHT_CONTROL = 345,
  RIGHT_ALT = 346,
  RIGHT_SUPER = 347,
  MENU = 348,
}

----
enums\LanguageAbbreviation.ts
/** Listed in order of how they cycle through the options menu. */
export enum LanguageAbbreviation {
  ENGLISH = "en",
  JAPANESE = "jp",
  SPANISH = "es",
  GERMAN = "de",
  RUSSIAN = "ru",
  KOREAN = "kr",
  CHINESE_SIMPLE = "zh",
}

----
enums\LaserOffset.ts
export enum LaserOffset {
  TECH_1 = 0,
  TECH_2 = 1,
  TECH_5 = 2,
  SHOOP = 3,
  BRIMSTONE = 4,
  MOMS_EYE = 5,
  TRACTOR_BEAM = 6,
}

----
enums\LevelStage.ts
export enum LevelStage {
  /**
   * This is the same as `LevelStage.BASEMENT_GREED_MODE` (1). Only use this if your code has
   * validated that the game is not in Greed Mode.
   */
  BASEMENT_1 = 1,

  /**
   * This is the same as `LevelStage.CAVES_GREED_MODE` (2). Only use this if your code has validated
   * that the game is not in Greed Mode.
   */
  BASEMENT_2 = 2,

  /**
   * This is the same as `LevelStage.DEPTHS_GREED_MODE` (3). Only use this if your code has
   * validated that the game is not in Greed Mode.
   */
  CAVES_1 = 3,

  /**
   * This is the same as `LevelStage.WOMB_GREED_MODE` (4). Only use this if your code has validated
   * that the game is not in Greed Mode.
   */
  CAVES_2 = 4,

  /**
   * This is the same as `LevelStage.SHEOL_GREED_MODE` (5). Only use this if your code has validated
   * that the game is not in Greed Mode.
   */
  DEPTHS_1 = 5,

  /**
   * This is the same as `LevelStage.SHOP_GREED_MODE` (6). Only use this if your code has validated
   * that the game is not in Greed Mode.
   */
  DEPTHS_2 = 6,

  /**
   * This is the same as `LevelStage.ULTRA_GREED_GREED_MODE` (7). Only use this if your code has
   * validated that the game is not in Greed Mode.
   */
  WOMB_1 = 7,

  WOMB_2 = 8,
  BLUE_WOMB = 9,
  SHEOL_CATHEDRAL = 10,
  DARK_ROOM_CHEST = 11,
  VOID = 12,
  HOME = 13,

  /**
   * This is the same as `LevelStage.BASEMENT_1` (1). Only use this if your code has validated that
   * the player is playing in Greed Mode.
   */
  BASEMENT_GREED_MODE = 1, // eslint-disable-line @typescript-eslint/no-duplicate-enum-values

  /**
   * This is the same as `LevelStage.BASEMENT_2` (2). Only use this if your code has validated that
   * the player is playing in Greed Mode.
   */
  CAVES_GREED_MODE = 2, // eslint-disable-line @typescript-eslint/no-duplicate-enum-values

  /**
   * This is the same as `LevelStage.CAVES_1` (3). Only use this if your code has validated that the
   * player is playing in Greed Mode.
   */
  DEPTHS_GREED_MODE = 3, // eslint-disable-line @typescript-eslint/no-duplicate-enum-values

  /**
   * This is the same as `LevelStage.CAVES_2` (4). Only use this if your code has validated that the
   * player is playing in Greed Mode.
   */
  WOMB_GREED_MODE = 4, // eslint-disable-line @typescript-eslint/no-duplicate-enum-values

  /**
   * This is the same as `LevelStage.DEPTHS_1` (5). Only use this if your code has validated that
   * the player is playing in Greed Mode.
   */
  SHEOL_GREED_MODE = 5, // eslint-disable-line @typescript-eslint/no-duplicate-enum-values

  /**
   * This refers to the floor called "The Shop" which is after Sheol and before the Ultra Greed
   * floor.
   *
   * This is the same as `LevelStage.DEPTHS_2` (6). Only use this if your code has validated that
   * the player is playing in Greed Mode.
   */
  SHOP_GREED_MODE = 6, // eslint-disable-line @typescript-eslint/no-duplicate-enum-values

  /**
   * This refers to the final floor of Greed Mode or Greedier Mode that holds the Ultra Greed or
   * Ultra Greedier boss.
   *
   * This is the same as `LevelStage.WOMB_1` (7). Only use this if your code has validated that the
   * player is playing in Greed Mode.
   */
  ULTRA_GREED_GREED_MODE = 7, // eslint-disable-line @typescript-eslint/no-duplicate-enum-values
}

----
enums\LevelStateFlag.ts
/** Used with the `Level.GetStateFlag` and `Level.SetStateFlag` methods. */
export enum LevelStateFlag {
  BUM_KILLED = 0,
  EVIL_BUM_KILLED = 1,
  RED_HEART_DAMAGED = 2,
  BUM_LEFT = 3,
  EVIL_BUM_LEFT = 4,
  DAMAGED = 5,
  SHOPKEEPER_KILLED_LVL = 6,
  COMPASS_EFFECT = 7,
  MAP_EFFECT = 8,
  BLUE_MAP_EFFECT = 9,
  FULL_MAP_EFFECT = 10,
  GREED_LOST_PENALTY = 11,
  GREED_MONSTRO_SPAWNED = 12,
  ITEM_DUNGEON_FOUND = 13,
  MAMA_MEGA_USED = 14,
  WOODEN_CROSS_REMOVED = 15,
  SHOVEL_QUEST_TRIGGERED = 16,
  SATANIC_BIBLE_USED = 17,
  SOL_EFFECT = 18,
  LEVEL_START_TRIGGERED = 19,
  LUNA_EFFECT = 20,
  VOID_DOOR_DISABLED = 21,
  MINESHAFT_ESCAPE = 22,
  MIRROR_BROKEN = 23,
}

----
enums\LineCheckMode.ts
export enum LineCheckMode {
  /** Stopped by pits and rocks (e.g. like a Gaper's behavior). */
  NORMAL = 0,

  /** Same as MODE_NORMAL, but less resource-intensive. */
  ECONOMIC = 1,

  /** Only blocked by walls and metal blocks. */
  EXPLOSION = 2,

  /** Not blocked by pits. Used by enemies that shoot projectiles at you, such as Hosts. */
  PROJECTILE = 3,
}

----
enums\ModCallback.ts
export enum ModCallback {
  /**
   * When registering this callback with the `Mod.AddCallback` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `EntityType` provided.
   *
   * ```ts
   * function postNPCUpdate(npc: EntityNPC): void {}
   * ```
   */
  POST_NPC_UPDATE = 0,

  /**
   * You cannot filter this callback.
   *
   * ```ts
   * function postUpdate(): void {}
   * ```
   */
  POST_UPDATE = 1,

  /**
   * You cannot filter this callback.
   *
   * ```ts
   * function postRender(): void {}
   * ```
   */
  POST_RENDER = 2,

  /**
   * When registering this callback with the `Mod.AddCallback` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `CollectibleType` provided.
   *
   * ```ts
   * function useItem(
   *   collectibleType: CollectibleType,
   *   rng: RNG,
   *   player: EntityPlayer,
   *   useFlags: BitFlags<UseFlag>,
   *   activeSlot: int,
   *   customVarData: int,
   * ):
   *   | boolean
   *   | { Discharge: boolean; Remove: boolean; ShowAnim: boolean }
   *   | undefined;
   * ```
   */
  POST_USE_ITEM = 3,

  /**
   * When registering this callback with the `Mod.AddCallback` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `PlayerType` provided.
   *
   * ```ts
   * function postPEffectUpdate(player: EntityPlayer): void {}
   * ```
   *
   * @deprecated Consider using the `ModCallbackCustom.POST_PEFFECT_UPDATE_REORDERED` callback from
   *             `isaacscript-common` instead, since it will fire in the correct order and prevent
   *             bugs relating to data structures not being properly initialized.
   */
  POST_PEFFECT_UPDATE = 4,

  /**
   * When registering this callback with the `Mod.AddCallback` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `CardType` provided.
   *
   * ```ts
   * function postUseCard(
   *   cardType: CardType,
   *   player: EntityPlayer,
   *   useFlags: BitFlags<UseFlag>,
   * ): void {}
   * ```
   */
  POST_USE_CARD = 5,

  /**
   * When registering this callback with the `Mod.AddCallback` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `FamiliarVariant` provided.
   *
   * ```ts
   * function postFamiliarUpdate(familiar: EntityFamiliar): void {}
   * ```
   */
  POST_FAMILIAR_UPDATE = 6,

  /**
   * Unlike in Afterbirth+, in Repentance this callback properly populates the following fields:
   *
   * - `Position`
   * - `SpawnerEntity`
   * - `SpawnerType`
   * - `SpawnerVariant`
   * - `Velocity`
   *
   * When registering this callback with the `Mod.AddCallback` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `FamiliarVariant` provided.
   *
   * ```ts
   * function postFamiliarInit(familiar: EntityFamiliar): void {}
   * ```
   */
  POST_FAMILIAR_INIT = 7,

  /**
   * When registering this callback with the `Mod.AddCallback` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `CacheFlag` provided.
   *
   * Note that you can only use single `CacheFlag` values as a third argument. (You cannot use a
   * combination of two or more `CacheFlag`.)
   *
   * ```ts
   * function evaluateCache(player: EntityPlayer, cacheFlag: CacheFlag): void {}
   * ```
   */
  EVALUATE_CACHE = 8,

  /**
   * This will fire at the beginning of a run, upon continuing a saved run, and when a player enters
   * a Genesis room.
   *
   * For most cases of general purpose player initialization, you should use the
   * `POST_PLAYER_INIT_FIRST` custom callback instead (in order to exclude the case of a player
   * continuing a saved run).
   *
   * This callback has a special property where most `EntityPlayer` methods (such as e.g.
   * `EntityPlayer.AddCollectible`) will silently fail if the player is continuing a saved run.
   * (This behavior was introduced in Repentance.) See the docs for more details about which
   * specific methods are affected.
   *
   * The `isChildPlayer` helper function does not work in this callback (because
   * `EntityPlayer.Parent` is not initialized yet at this point). If you want to exclude non-real
   * players, use the `POST_PLAYER_INIT_FIRST` or the `POST_PLAYER_INIT_LATE` custom callbacks
   * instead.
   *
   * When registering this callback with the `Mod.AddCallback` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `PlayerVariant` provided.
   *
   * ```ts
   * function postPlayerInit(player: EntityPlayer): void {}
   * ```
   */
  POST_PLAYER_INIT = 9,

  /**
   * When registering this callback with the `Mod.AddCallback` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `PillEffect` provided.
   *
   * ```ts
   * function postUsePill(
   *   pillEffect: PillEffect,
   *   player: EntityPlayer,
   *   useFlags: BitFlags<UseFlag>,
   * ): void {}
   * ```
   */
  POST_USE_PILL = 10,

  /**
   * When registering this callback with the `Mod.AddCallback` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `EntityType` provided.
   *
   * ```ts
   * function entityTakeDmg(
   *   entity: Entity,
   *   amount: float,
   *   damageFlags: BitFlags<DamageFlag>,
   *   source: EntityRef,
   *   countdownFrames: int,
   * ): boolean | undefined {}
   * ```
   */
  ENTITY_TAKE_DMG = 11,

  /**
   * You cannot filter this callback.
   *
   * ```ts
   * function postCurseEval(curses: BitFlags<LevelCurse>): BitFlags<LevelCurse> | undefined {}
   * ```
   */
  POST_CURSE_EVAL = 12,

  /**
   * When registering this callback with the `Mod.AddCallback` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `InputHook` provided.
   *
   * ```ts
   * function inputAction(
   *   entity: Entity | undefined,
   *   inputHook: InputHook,
   *   buttonAction: ButtonAction,
   * ): boolean | float | undefined {}
   * ```
   */
  INPUT_ACTION = 13,

  /**
   * You cannot filter this callback.
   *
   * ```ts
   * function postGameStarted(isContinued: boolean): void {}
   * ```
   *
   * @deprecated Consider using the `ModCallbackCustom.POST_GAME_STARTED_REORDERED` callback from
   *             `isaacscript-common` instead, since it will fire in the correct order and prevent
   *             bugs relating to data structures not being properly initialized.
   */
  POST_GAME_STARTED = 15,

  /**
   * You cannot filter this callback.
   *
   * ```ts
   * function postGameEnd(isGameOver: boolean): void {}
   * ```
   */
  POST_GAME_END = 16,

  /**
   * You cannot filter this callback.
   *
   * ```ts
   * function preGameExit(shouldSave: boolean): void {}
   * ```
   */
  PRE_GAME_EXIT = 17,

  /**
   * Unlike the `POST_GAME_STARTED` callback, this callback does not fire when resuming a saved run.
   *
   * You cannot filter this callback.
   *
   * ```ts
   * function postNewLevel(): void {}
   * ```
   *
   * @deprecated Consider using the `ModCallbackCustom.POST_NEW_LEVEL_REORDERED` callback from
   *             `isaacscript-common` instead, since it will fire in the correct order and prevent
   *             bugs relating to data structures not being properly initialized.
   */
  POST_NEW_LEVEL = 18,

  /**
   * You cannot filter this callback.
   *
   * ```ts
   * function postNewRoom(): void {}
   * ```
   *
   * @deprecated Consider using the `ModCallbackCustom.POST_NEW_ROOM_REORDERED` callback from
   *             `isaacscript-common` instead, since it will fire in the correct order and prevent
   *             bugs relating to data structures not being properly initialized.
   */
  POST_NEW_ROOM = 19,

  /**
   * You cannot filter this callback.
   *
   * ```ts
   * function getCard(
   *   rng: RNG,
   *   cardType: CardType,
   *   includePlayingCards: boolean,
   *   includeRunes: boolean,
   *   onlyRunes: boolean,
   * ): CardType | undefined {}
   * ```
   */
  GET_CARD = 20,

  /**
   * You cannot filter this callback.
   *
   * ```ts
   * function getShaderParams(shaderName: string): Record<string, unknown> {}
   * ```
   */
  GET_SHADER_PARAMS = 21,

  /**
   * You cannot filter this callback.
   *
   * ```ts
   * function executeCmd(
   *   command: string,
   *   parameters: string,
   *   player: EntityPlayer,
   * ): void {}
   * ```
   */
  EXECUTE_CMD = 22,

  /**
   * When registering this callback with the `Mod.AddCallback` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `CollectibleType` provided.
   *
   * ```ts
   * function preUseItem(
   *   collectibleType: CollectibleType,
   *   rng: RNG,
   *   player: EntityPlayer,
   *   useFlags: BitFlags<UseFlag>,
   *   activeSlot: ActiveSlot,
   *   customVarData: int,
   * ): boolean | undefined {}
   * ```
   */
  PRE_USE_ITEM = 23,

  /**
   * If you want to prevent an entity from spawning, you cannot return an `EntityType` of 0, since
   * that will cause the game to crash.
   *
   * Sometimes, if you return a type other than the original type (e.g. replacing a pickup with an
   * effect), the game will crash. Thus, you should replace a pickup with a new pickup, and so on.
   *
   * You cannot filter this callback.
   *
   * ```ts
   * function preEntitySpawn(
   *   entityType: EntityType,
   *   variant: int,
   *   subType: int,
   *   position: Vector,
   *   velocity: Vector,
   *   spawner: Entity | undefined,
   *   initSeed: Seed,
   * ): [entityType: EntityType, variant: int, subType: int, initSeed: Seed] | undefined {}
   * ```
   */
  PRE_ENTITY_SPAWN = 24,

  /**
   * When registering this callback with the `Mod.AddCallback` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `FamiliarVariant` provided.
   *
   * ```ts
   * function postFamiliarRender(
   *   entityFamiliar: EntityFamiliar,
   *   renderOffset: Vector,
   * ): void {}
   * ```
   */
  POST_FAMILIAR_RENDER = 25,

  /**
   * When registering this callback with the `Mod.AddCallback` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `FamiliarVariant` provided.
   *
   * ```ts
   * function preFamiliarCollision(
   *   familiar: EntityFamiliar,
   *   collider: Entity,
   *   low: boolean,
   * ): boolean | undefined {}
   * ```
   */
  PRE_FAMILIAR_COLLISION = 26,

  /**
   * Unlike in Afterbirth+, in Repentance this callback properly populates the following fields:
   *
   * - `Position`
   * - `SpawnerEntity`
   * - `SpawnerType`
   * - `SpawnerVariant`
   * - `Velocity`
   *
   * When registering this callback with the `Mod.AddCallback` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `EntityType` provided.
   *
   * ```ts
   * function postNPCInit(npc: EntityNPC): void {}
   * ```
   */
  POST_NPC_INIT = 27,

  /**
   * When registering this callback with the `Mod.AddCallback` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `EntityType` provided.
   *
   * ```ts
   * function postNPCRender(npc: EntityNPC, renderOffset: Vector): void {}
   * ```
   */
  POST_NPC_RENDER = 28,

  /**
   * When registering this callback with the `Mod.AddCallback` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `EntityType` provided.
   *
   * ```ts
   * function postNPCDeath(npc: EntityNPC): void {}
   * ```
   */
  POST_NPC_DEATH = 29,

  /**
   * When registering this callback with the `Mod.AddCallback` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `EntityType` provided.
   *
   * ```ts
   * function preNPCCollision(
   *   npc: EntityNPC,
   *   collider: Entity,
   *   low: boolean,
   * ): boolean | undefined {}
   * ```
   */
  PRE_NPC_COLLISION = 30,

  /**
   * When registering this callback with the `Mod.AddCallback` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `PlayerVariant` provided.
   *
   * ```ts
   * function postPlayerUpdate(player: EntityPlayer): void {}
   * ```
   *
   * @deprecated Consider using the `ModCallbackCustom.POST_PLAYER_UPDATE_REORDERED` callback from
   *             `isaacscript-common` instead, since it will fire in the correct order and prevent
   *             bugs relating to data structures not being properly initialized.
   */
  POST_PLAYER_UPDATE = 31,

  /**
   * When registering this callback with the `Mod.AddCallback` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `PlayerVariant` provided.
   *
   * ```ts
   * function postPlayerRender(player: EntityPlayer, renderOffset: Vector): void {}
   * ```
   *
   * @deprecated Consider using the `ModCallbackCustom.POST_PLAYER_RENDER_REORDERED` callback from
   *             `isaacscript-common` instead, since it will fire in the correct order and prevent
   *             bugs relating to data structures not being properly initialized.
   */
  POST_PLAYER_RENDER = 32,

  /**
   * When registering this callback with the `Mod.AddCallback` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `PlayerVariant` provided.
   *
   * ```ts
   * function prePlayerCollision(
   *   player: EntityPlayer,
   *   collider: Entity,
   *   low: boolean,
   * ): boolean | undefined {}
   * ```
   */
  PRE_PLAYER_COLLISION = 33,

  /**
   * Unlike in Afterbirth+, in Repentance this callback properly populates the following fields:
   *
   * - `Position`
   * - `SpawnerEntity`
   * - `SpawnerType`
   * - `SpawnerVariant`
   * - `Velocity`
   *
   * When registering this callback with the `Mod.AddCallback` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `PickupVariant` provided.
   *
   * ```ts
   * function postPickupInit(pickup: EntityPickup): void {}
   * ```
   */
  POST_PICKUP_INIT = 34,

  /**
   * When registering this callback with the `Mod.AddCallback` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `PickupVariant` provided.
   *
   * ```ts
   * function postPickupUpdate(pickup: EntityPickup): void {}
   * ```
   */
  POST_PICKUP_UPDATE = 35,

  /**
   * When registering this callback with the `Mod.AddCallback` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `PickupVariant` provided.
   *
   * ```ts
   * function postPickupRender(pickup: EntityPickup, renderOffset: Vector): void {}
   * ```
   */
  POST_PICKUP_RENDER = 36,

  /**
   * You cannot filter this callback.
   *
   * ```ts
   * function postPickupSelection(
   *   pickup: EntityPickup,
   *   variant: PickupVariant,
   *   subType: int,
   * ): [pickupVariant: PickupVariant, subType: int] | undefined {}
   * ```
   */
  POST_PICKUP_SELECTION = 37,

  /**
   * When registering this callback with the `Mod.AddCallback` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `PickupVariant` provided.
   *
   * ```ts
   * function prePickupCollision(
   *   pickup: EntityPickup,
   *   collider: Entity,
   *   low: boolean,
   * ): boolean | undefined {}
   * ```
   */
  PRE_PICKUP_COLLISION = 38,

  /**
   * Unlike in Afterbirth+, in Repentance this callback properly populates the following fields:
   *
   * - `Position`
   * - `SpawnerEntity`
   * - `SpawnerType`
   * - `SpawnerVariant`
   * - `Velocity`
   *
   * When registering this callback with the `Mod.AddCallback` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `TearVariant` provided.
   *
   * ```ts
   * function postTearInit(tear: EntityTear): void {}
   * ```
   */
  POST_TEAR_INIT = 39,

  /**
   * When registering this callback with the `Mod.AddCallback` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `TearVariant` provided.
   *
   * ```ts
   * function postTearUpdate(tear: EntityTear): void {}
   * ```
   */
  POST_TEAR_UPDATE = 40,

  /**
   * When registering this callback with the `Mod.AddCallback` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `TearVariant` provided.
   *
   * ```ts
   * function postTearRender(tear: EntityTear, renderOffset: Vector): void {}
   * ```
   */
  POST_TEAR_RENDER = 41,

  /**
   * When registering this callback with the `Mod.AddCallback` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `TearVariant` provided.
   *
   * ```ts
   * function preTearCollision(
   *   tear: EntityTear,
   *   collider: Entity,
   *   low: boolean,
   * ): boolean | undefined {}
   * ```
   */
  PRE_TEAR_COLLISION = 42,

  /**
   * Unlike in Afterbirth+, in Repentance this callback properly populates the following fields:
   *
   * - `Position`
   * - `SpawnerEntity`
   * - `SpawnerType`
   * - `SpawnerVariant`
   * - `Velocity`
   *
   * When registering this callback with the `Mod.AddCallback` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `ProjectileVariant` provided.
   *
   * ```ts
   * function postProjectileInit(projectile: EntityProjectile): void {}
   * ```
   */
  POST_PROJECTILE_INIT = 43,

  /**
   * When registering this callback with the `Mod.AddCallback` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `ProjectileVariant` provided.
   *
   * ```ts
   * function postProjectileUpdate(projectile: EntityProjectile): void {}
   * ```
   */
  POST_PROJECTILE_UPDATE = 44,

  /**
   * When registering this callback with the `Mod.AddCallback` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `ProjectileVariant` provided.
   *
   * ```ts
   * function postProjectileRender(
   *   projectile: EntityProjectile,
   *   renderOffset: Vector,
   * ): void {}
   * ```
   */
  POST_PROJECTILE_RENDER = 45,

  /**
   * When registering this callback with the `Mod.AddCallback` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `ProjectileVariant` provided.
   *
   * ```ts
   * function preProjectileCollision(
   *   projectile: EntityProjectile,
   *   collider: Entity,
   *   low: boolean,
   * ): boolean | undefined {}
   * ```
   */
  PRE_PROJECTILE_COLLISION = 46,

  /**
   * Unlike in Afterbirth+, in Repentance this callback properly populates the following fields:
   *
   * - `Position`
   * - `SpawnerEntity`
   * - `SpawnerType`
   * - `SpawnerVariant`
   * - `Velocity`
   *
   * When registering this callback with the `Mod.AddCallback` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `LaserVariant` provided.
   *
   * ```ts
   * function postLaserInit(laser: EntityLaser): void {}
   * ```
   */
  POST_LASER_INIT = 47,

  /**
   * When registering this callback with the `Mod.AddCallback` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `LaserVariant` provided.
   *
   * ```ts
   * function postLaserUpdate(laser: EntityLaser): void {}
   * ```
   */
  POST_LASER_UPDATE = 48,

  /**
   * When registering this callback with the `Mod.AddCallback` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `LaserVariant` provided.
   *
   * ```ts
   * function postLaserRender(laser: EntityLaser, renderOffset: Vector): void {}
   * ```
   */
  POST_LASER_RENDER = 49,

  /**
   * Unlike in Afterbirth+, in Repentance this callback properly populates the following fields:
   *
   * - `Position`
   * - `SpawnerEntity`
   * - `SpawnerType`
   * - `SpawnerVariant`
   * - `Velocity`
   *
   * When registering this callback with the `Mod.AddCallback` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the sub-type provided. (This is bugged and is NOT the `KnifeVariant` like you would
   *   expect!)
   *
   * ```ts
   * function postKnifeInit(knife: EntityKnife): void {}
   * ```
   */
  POST_KNIFE_INIT = 50,

  /**
   * When registering this callback with the `Mod.AddCallback` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the sub-type provided. (This is bugged and is NOT the `KnifeVariant` like you would
   *   expect!)
   *
   * ```ts
   * function postKnifeUpdate(knife: EntityKnife): void {}
   * ```
   */
  POST_KNIFE_UPDATE = 51,

  /**
   * When registering this callback with the `Mod.AddCallback` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the sub-type provided. (This is bugged and is NOT the `KnifeVariant` like you would
   *   expect!)
   *
   * ```ts
   * function postKnifeRender(knife: EntityKnife, renderOffset: Vector): void {}
   * ```
   */
  POST_KNIFE_RENDER = 52,

  /**
   * When registering this callback with the `Mod.AddCallback` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the sub-type provided. (This is bugged and is NOT the `KnifeVariant` like you would
   *   expect!)
   *
   * ```ts
   * function preKnifeCollision(
   *   knife: EntityKnife,
   *   collider: Entity,
   *   low: boolean,
   * ): boolean | undefined {}
   * ```
   */
  PRE_KNIFE_COLLISION = 53,

  /**
   * Unlike in Afterbirth+, in Repentance this callback properly populates the following fields:
   *
   * - `Position`
   * - `SpawnerEntity`
   * - `SpawnerType`
   * - `SpawnerVariant`
   * - `Velocity`
   *
   * When registering this callback with the `Mod.AddCallback` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `EffectVariant` provided.
   *
   * ```ts
   * function postEffectInit(effect: EntityEffect): void {}
   * ```
   */
  POST_EFFECT_INIT = 54,

  /**
   * When registering this callback with the `Mod.AddCallback` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `EffectVariant` provided.
   *
   * ```ts
   * function postEffectUpdate(effect: EntityEffect): void {}
   * ```
   */
  POST_EFFECT_UPDATE = 55,

  /**
   * When registering this callback with the `Mod.AddCallback` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `EffectVariant` provided.
   *
   * ```ts
   * function postEffectRender(effect: EntityEffect, renderOffset: Vector): void {}
   * ```
   */
  POST_EFFECT_RENDER = 56,

  /**
   * Unlike in Afterbirth+, in Repentance this callback properly populates the following fields:
   *
   * - `Position`
   * - `SpawnerEntity`
   * - `SpawnerType`
   * - `SpawnerVariant`
   * - `Velocity`
   *
   * When registering this callback with the `Mod.AddCallback` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `BombVariant` provided.
   *
   * ```ts
   * function postBombInit(bomb: EntityBomb): void {}
   * ```
   */
  POST_BOMB_INIT = 57,

  /**
   * When registering this callback with the `Mod.AddCallback` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `BombVariant` provided.
   *
   * ```ts
   * function postBombUpdate(bomb: EntityBomb): void {}
   * ```
   */
  POST_BOMB_UPDATE = 58,

  /**
   * When registering this callback with the `Mod.AddCallback` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `BombVariant` provided.
   *
   * ```ts
   * function postBombRender(bomb: EntityBomb, renderOffset: Vector): void {}
   * ```
   */
  POST_BOMB_RENDER = 59,

  /**
   * When registering this callback with the `Mod.AddCallback` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `BombVariant` provided.
   *
   * ```ts
   * function preBombCollision(
   *   bomb: EntityBomb,
   *   collider: Entity,
   *   low: boolean,
   * ): boolean | undefined {}
   * ```
   */
  PRE_BOMB_COLLISION = 60,

  /**
   * You cannot filter this callback.
   *
   * ```ts
   * function postFireTear(tear: EntityTear): void {}
   * ```
   */
  POST_FIRE_TEAR = 61,

  /**
   * You cannot filter this callback.
   *
   * ```ts
   * function preGetCollectible(
   *   itemPoolType: ItemPoolType,
   *   decrease: boolean,
   *   seed: Seed,
   * ): CollectibleType | undefined {}
   * ```
   */
  PRE_GET_COLLECTIBLE = 62,

  /**
   * You cannot filter this callback.
   *
   * ```ts
   * function postGetCollectible(
   *   collectibleType: CollectibleType,
   *   itemPoolType: ItemPoolType,
   *   decrease: boolean,
   *   seed: Seed,
   * ): CollectibleType | undefined {}
   * ```
   */
  POST_GET_COLLECTIBLE = 63,

  /**
   * You cannot filter this callback.
   *
   * ```ts
   * function getPillColor(seed: Seed): PillColor | undefined {}
   * ```
   */
  GET_PILL_COLOR = 64,

  /**
   * You cannot filter this callback.
   *
   * ```ts
   * function getPillEffect(
   *   pillEffect: PillEffect,
   *   pillColor: PillColor,
   * ): PillEffect | undefined {}
   * ```
   */
  GET_PILL_EFFECT = 65,

  /**
   * You cannot filter this callback.
   *
   * ```ts
   * function getTrinket(
   *   trinketType: TrinketType,
   *   rng: RNG,
   * ): TrinketType | undefined {}
   * ```
   */
  GET_TRINKET = 66,

  /**
   * When registering this callback with the `Mod.AddCallback` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `EntityType` provided.
   *
   * ```ts
   * function postEntityRemove(entity: Entity): void {}
   * ```
   */
  POST_ENTITY_REMOVE = 67,

  /**
   * When registering this callback with the `Mod.AddCallback` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `EntityType` provided.
   *
   * ```ts
   * function postEntityKill(entity: Entity): void {}
   * ```
   */
  POST_ENTITY_KILL = 68,

  /**
   * When registering this callback with the `Mod.AddCallback` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `EntityType` provided.
   *
   * ```ts
   * function preNPCUpdate(entity: Entity): boolean | undefined {}
   * ```
   */
  PRE_NPC_UPDATE = 69,

  /**
   * In vanilla, this is `PRE_SPAWN_CLEAN_AWARD`, which is a typo.
   *
   * You cannot filter this callback.
   *
   * ```ts
   * function preSpawnClearAward(
   *   rng: RNG,
   *   spawnPosition: Vector,
   * ): boolean | undefined {}
   * ```
   */
  PRE_SPAWN_CLEAR_AWARD = 70,

  /**
   * You can use the `isGridEntityXMLType` helper function to convert the
   * `entityTypeOrGridEntityXMLType` argument to an `EntityType` or `GridEntityXMLType`, if needed.
   *
   * You cannot filter this callback.
   *
   * ```ts
   * function preRoomEntitySpawn(
   *   entityTypeOrGridEntityXMLType: EntityType | GridEntityXMLType,
   *   variant: int,
   *   subType: int,
   *   gridIndex: int,
   *   initSeed: Seed,
   * ): [type: EntityType | GridEntityXMLType, variant: int, subType: int] | undefined {}
   * ```
   */
  PRE_ROOM_ENTITY_SPAWN = 71,

  /**
   * You cannot filter this callback.
   *
   * ```ts
   * function preEntityDevolve(entity: Entity): boolean | undefined {}
   * ```
   */
  PRE_ENTITY_DEVOLVE = 72,

  /**
   * You cannot filter this callback.
   *
   * ```ts
   * function preModUnload(mod: Mod): void {}
   * ```
   */
  PRE_MOD_UNLOAD = 73,
}

----
enums\ModCallbackRepentogon.ts
/**
 * Callbacks for REPENTOGON, an exe-hack which expands the modding API.
 *
 * @see https://repentogon.com/index.html
 */
export enum ModCallbackRepentogon {
  /**
   * Fires when a collectible is being added to a player. Return `CollectibleType` to override the
   * collectible given. Alternatively, you can return an array of parameters to further modify the
   * given collectible.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `CollectibleType` provided.
   *
   * ```ts
   * function preAddCollectible(
   *   collectible: CollectibleType,
   *   charge: int,
   *   firstTime: boolean,
   *   slot: ActiveSlot,
   *   varData: int,
   *   player: EntityPlayer
   * ): CollectibleType | [CollectibleType, int, boolean, ActiveSlot, int] | undefined {}
   * ```
   */
  PRE_ADD_COLLECTIBLE = 1004,

  /**
   * Fires after a collectible is added to a player.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `CollectibleType` provided.
   *
   * ```ts
   * function postAddCollectible(
   *   collectible: CollectibleType,
   *   charge: int,
   *   firstTime: boolean,
   *   slot: ActiveSlot,
   *   varData: int,
   *   player: EntityPlayer
   * ): void {}
   * ```
   */
  POST_ADD_COLLECTIBLE = 1005,

  /**
   * Fires after an entity takes damage.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `EntityType` provided.
   *
   * ```ts
   * function postEntityTakeDmg(
   *   entity: Entity,
   *   damage: number,
   *   damageFlags: BitFlags<DamageFlag>,
   *   source: EntityRef,
   *   damageCountdown: int
   * ): void {}
   * ```
   */
  POST_ENTITY_TAKE_DMG = 1006,

  /**
   * Behaves like `ModCallback.ENTITY_TAKE_DMG` but with additional functionality. You can return an
   * array of parameters to override how the entity takes damage.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `EntityType` provided.
   *
   * ```ts
   * function preEntityTakeDmg(
   *   entity: Entity,
   *   damage: number,
   *   damageFlags: BitFlags<DamageFlag>,
   *   source: EntityRef,
   *   damageCountdown: int
   * ): [int, BitFlags<DamageFlag>, int] | boolean | undefined {}
   * ```
   */
  PRE_ENTITY_TAKE_DMG = 1007,

  /**
   * Fires when a player is about to take damage. This callback fires earlier than
   * `ModCallback.ENTITY_TAKE_DAMAGE`.
   *
   * Return false to cancel the damage, which is useful for giving player invincibility that takes
   * precedence over other damage negation effects, such as Holy Mantle.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `PlayerVariant` provided.
   *
   * ```ts
   * function prePlayerTakeDmg(
   *   player: EntityPlayer,
   *   damage: number,
   *   damageFlags: BitFlags<DamageFlag>,
   *   source: EntityRef,
   *   damageCountdown: int,
   * ): false | undefined {}
   * ```
   */
  PRE_PLAYER_TAKE_DMG = 1008,

  /**
   * Fires after a rock GridEntity is destroyed.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GridEntityType` provided.
   *
   * ```ts
   * function postGridRockDestroy(
   *   rock: GridEntityRock,
   *   gridType: GridEntityType,
   *   immediate: boolean,
   * ): void {}
   * ```
   */
  POST_GRID_ROCK_DESTROY = 1011,

  /**
   * Fires when an entity is about to be hurt from a GridEntity. Return false to ignore damage.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GridEntityType` provided.
   *
   * ```ts
   * function preGridHurtDamage(
   *   gridEntity: GridEntityRock,
   *   tookDamage: Entity,
   *   damageAmount: int,
   *   damageFlags: BitFlags<DamageFlag>
   * ): boolean | undefined {}
   * ```
   */
  PRE_GRID_HURT_DAMAGE = 1012,

  /**
   * Fires after an entity is hurt from a GridEntity.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GridEntityType` provided.
   *
   * ```ts
   * function postGridHurtDamage(
   *   gridEntity: GridEntityRock,
   *   tookDamage: Entity,
   *   damageAmount: int,
   *   damageFlags: BitFlags<DamageFlag>
   * ): void {}
   * ```
   */
  POST_GRID_HURT_DAMAGE = 1013,

  /**
   * Fires when `HUD.Update()` is called. The game will always call the function every frame.
   *
   * ```ts
   * function hudUpdate(): void {}
   * ```
   */
  HUD_UPDATE = 1020,

  /**
   * Fires when `HUD.PostUpdate()` is called. The game will call the function after `HUD.Update()`
   * is called except for a few cases, such as the game being paused.
   *
   * ```ts
   * function hudPostUpdate(): void {}
   * ```
   */
  HUD_POST_UPDATE = 1021,

  /**
   * Fires every frame the HUD is rendered.
   *
   * ```ts
   * function postHUDRender(): void {}
   * ```
   */
  POST_HUD_RENDER = 1022,

  /**
   * Fires every frame the main menu is rendered.
   *
   * ```ts
   * function postMainMenuRender(): void {}
   * ```
   */
  POST_MAIN_MENU_RENDER = 1023,

  /**
   * Fires when a sound effect is about to play. Return false to prevent the sound from playing.
   * Alternatively, return an array of parameters to modify the sound before it plays.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `SoundEffect` provided.
   *
   * ```ts
   * function preSFXPlay(
   *   id: SoundEffect,
   *   volume: number,
   *   frameDelay: int,
   *   pitch: number,
   *   pan: number
   * ): SoundEffect | boolean | [SoundEffect, number, int, number, number] | undefined {}
   * ```
   */
  PRE_SFX_PLAY = 1030,

  /**
   * Fires after a sound effect plays.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `SoundEffect` provided.
   *
   * ```ts
   * function postSFXPlay(
   *   id: SoundEffect,
   *   volume: number,
   *   frameDelay: int,
   *   pitch: number,
   *   pan: number
   * ): SoundEffect | boolean | [SoundEffect, number, int, number, number] | undefined {}
   * ```
   */
  POST_SFX_PLAY = 1031,

  /**
   * Fires when a music track is about to play. This callback is fired for both
   * `MusicManager.Play()` and `MusicManager.CrossFade()`. Use the `isFade` parameter to
   * differentiate the two.
   *
   * Return false to prevent the music from playing. Alternatively, return `Music` to override the
   * track played without changing the volume or fade rate. Return an array of parameters to further
   * modify the music track.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `Music` provided.
   *
   * ```ts
   * function preMusicPlay(
   *   id: Music,
   *   volumeOrFadeRate: number,
   *   isFade: boolean
   * ): Music | [Music, number] | boolean | undefined {}
   * ```
   */
  PRE_MUSIC_PLAY = 1034,

  /**
   * TODO: Add an enum for the layer.
   *
   * Fires when the currently playing music track is about to have its layer toggled. Return an
   * integer to override which layer is played. Return false to prevent the layer from being
   * toggled.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `int` provided.
   *
   * ```ts
   * function preMusicLayerToggle(
   *   layerId: int,
   *   currentState: boolean
   * ): int | boolean | undefined {}
   * ```
   */
  PRE_MUSIC_LAYER_TOGGLE = 1035,

  /**
   * Fires when the player's head is about to render. Return a Vector to override what position the
   * head renders at. Return false to prevent the head from rendering.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `PlayerType` provided.
   *
   * ```ts
   * function preRenderPlayerHead(
   *   player: EntityPlayer,
   *   renderPosition: Vector
   * ): Vector | boolean | undefined {}
   * ```
   */
  PRE_RENDER_PLAYER_HEAD = 1038,

  /**
   * Fires when the player's body is about to render. Return a Vector to override what position the
   * body renders at. Return false to prevent the body from rendering.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `PlayerType` provided.
   *
   * ```ts
   * function preRenderPlayerBody(
   *   player: EntityPlayer,
   *   renderPosition: Vector
   * ): Vector | boolean | undefined {}
   * ```
   */
  PRE_RENDER_PLAYER_BODY = 1039,

  /**
   * Fires when the player is about to throw an entity. Return a Vector to override the velocity of
   * the thrown entity.
   *
   * ```ts
   * function preEntityThrow(
   *   throwingPlayer: EntityPlayer,
   *   heldEntity: Entity,
   *   velocity: Vector
   * ): Vector | undefined {}
   * ```
   */
  PRE_ENTITY_THROW = 1040,

  /**
   * Fires the player throws an entity.
   *
   * ```ts
   * function postEntityThrow(
   *   throwingPlayer: EntityPlayer,
   *   heldEntity: Entity,
   *   velocity: Vector
   * ): void {}
   * ```
   */
  POST_ENTITY_THROW = 1041,

  /**
   * Fires when a player's special tear type is about to be initialized, such as Azazel's brimstone.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `PlayerType` provided.
   *
   * ```ts
   * function postPlayerLevelStatsInit(player: EntityPlayer): void {}
   * ```
   */
  POST_PLAYER_LEVEL_STATS_INIT = 1042,

  /**
   * Fires when the current room is about to be changed.
   *
   * The `newLevel` parameter is true when entering a new level or exiting a run, otherwise it's
   * false.
   *
   * ```ts
   * function preRoomExit(playerWhoExited: EntityPlayer, newLevel: boolean): void {}
   * ```
   */
  PRE_ROOM_EXIT = 1043,

  /**
   * Fires when a level is about to be initialized.
   *
   * ```ts
   * function preLevelInit(): void {}
   * ```
   */
  PRE_LEVEL_INIT = 1060,

  /**
   * Fires right before the game over screen appears. Return false to cancel the death and revive
   * the player with half a heart.
   *
   * **Bug:** Much like the vanilla Revive function, this removes the current run's ability to save
   * and continue later.
   *
   * ```ts
   * function preTriggerPlayerDeath(player: EntityPlayer): boolean | undefined {}
   * ```
   */
  PRE_TRIGGER_PLAYER_DEATH = 1050,

  /**
   * Fires when a shop is about to be restocked. Return false to cancel the restock, blocking shop
   * rerolls from restock machines or restocks from Restock altogether.
   *
   * This callback is fired for both `Room.ShopRestockFull` and `Room.ShopRestockPartial`. The
   * `partial` parameter is true if `Room.ShopRestockPartial` was called, otherwise it's false.
   *
   * ```ts
   * function preRestockShop(partial: boolean): void {}
   * ```
   */
  PRE_RESTOCK_SHOP = 1070,

  /**
   * Fires after a shop has been restocked.
   *
   * This callback is fired for both `Room.ShopRestockFull` and `Room.ShopRestockPartial`. The
   * `partial` parameter is true if `Room.ShopRestockPartial` was called, otherwise it's false.
   *
   * ```ts
   * function postRestockShop(): void {}
   * ```
   */
  POST_RESTOCK_SHOP = 1071,

  /**
   * Fires when the current room is about to change. Return an array containing a room index and
   * dimension to override where the player ends up.
   *
   * ```ts
   * function preChangeRoom(targetRoomIdx: int, dimension: int): [int, int] | undefined {}
   * ```
   */
  PRE_CHANGE_ROOM = 1061,

  /**
   * Fires when a pickup has been purchased from the shop.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `PickupVariant` provided.
   *
   * ```ts
   * function postPickupShopPurchase(
   *   pickup: EntityPickup,
   *   player: EntityPlayer,
   *   moneySpent: int
   * ): void {}
   * ```
   */
  POST_PICKUP_SHOP_PURCHASE = 1062,

  /**
   * Fires when a familiar's follower priority is about to be assigned. Return `FollowerPriority` or
   * an integer to override the familiar's follow priority.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `FamiliarVariant` provided.
   *
   * ```ts
   * function postPickupShopPurchase(
   *   familiar: EntityFamiliar
   * ): FollowerPriority | int | undefined {}
   * ```
   */
  GET_FOLLOWER_PRIORITY = 1063,

  /**
   * Fires when a NPC is about to morph. Return an array of parameters to override what the NPC
   * morphs into. Return false to cancel the morph.
   *
   * ```ts
   * function preNPCMorph(
   *   entityType: EntityType,
   *   variant: int,
   *   subType: int,
   *   championColor: ChampionColor
   * ): [EntityType, int, int, ChampionColor] | boolean | undefined {}
   * ```
   */
  PRE_NPC_MORPH = 1212,

  /**
   * Fires when a pickup is about to morph. Return an array of parameters to override what the
   * pickup morphs to. Otherwise, return false to cancel the morph.
   *
   * ```ts
   * function prePickupMorph(
   *   pickup: EntityPickup,
   *   entityType: int,
   *   variant: int,
   *   subType: int,
   *   keepPrice: boolean,
   *   keepSeed: boolean,
   *   ignoreModifiers: boolean
   * ):
   *      [EntityType, int, int, boolean, boolean, boolean]
   *      | [EntityType, int, int]
   *      | boolean
   *      | undefined
   * {}
   * ```
   */
  PRE_PICKUP_MORPH = 1213,

  /**
   * Fires after a NPC morphs.
   *
   * ```ts
   * function postNPCMorph(
   *   previousType: EntityType,
   *   previousVariant: int,
   *   previousSubType: int
   * ): void {}
   * ```
   */
  POST_NPC_MORPH = 1214,

  /**
   * Fires after a pickup has been morphed.
   *
   * ```ts
   * function postPickupMorph(
   *   pickup: EntityPickup,
   *   previousType: EntityType,
   *   previousVariant: int,
   *   subType: int,
   *   keptPrice: boolean,
   *   keptSeed: int,
   *   ignoredModifiers: boolean
   * ): void {}
   * ```
   */
  POST_PICKUP_MORPH = 1215,

  /**
   * Fires before the completion marks paper is rendered. Return false to prevent the sprite from
   * rendering.
   *
   * ```ts
   * function preCompletionMarksRender(
   *   completionMarksSprite: Sprite,
   *   renderPos: Vector,
   *   renderScale: Vector,
   *   playerType: PlayerType
   * ): boolean | undefined {}
   * ```
   */
  PRE_COMPLETION_MARKS_RENDER = 1216,

  /**
   * Fires after the completion marks paper is rendered.
   *
   * ```ts
   * function preCompletionMarksRender(
   *   completionMarksSprite: Sprite,
   *   renderPos: Vector,
   *   renderScale: Vector,
   *   playerType: PlayerType
   * ): void {}
   * ```
   */
  POST_COMPLETION_MARKS_RENDER = 1217,

  /**
   * Fires before the pause screen renders. Return false to prevent the pause screen from rendering
   * and darkening the screen.
   *
   * ```ts
   * function prePauseScreenRender(pauseBody: Sprite, pauseStats: Sprite): boolean | undefined {}
   * ```
   */
  PRE_PAUSE_SCREEN_RENDER = 1218,

  /**
   * Fires after the pause screen renders.
   *
   * ```ts
   * function prePauseScreenRender(pauseBody: Sprite, pauseStats: Sprite): void {}
   * ```
   */
  POST_PAUSE_SCREEN_RENDER = 1219,

  /**
   * Fires before a card is used. Return true to cancel the card from being used.
   *
   * ```ts
   * function preUseCard(
   *   card: CardType,
   *   player: EntityPlayer,
   *   useFlags: BitFlags<UseFlag>
   * ): boolean | undefined
   * ```
   */
  PRE_USE_CARD = 1064,

  /**
   * Fires before a pill is used. Return true to cancel the card from being used.
   *
   * ```ts
   * function preUsePill(
   *   pill: PillEffect,
   *   color: PillColor,
   *   player: EntityPlayer,
   *   useFlags: BitFlags<UseFlag>
   * ): boolean | undefined {}
   * ```
   */
  PRE_USE_PILL = 1065,

  /**
   * Fires before a shop item has its price assigned. Return an integer to override the price.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the integer provided.
   *
   * ```ts
   * function getShopItemPrice(
   *   variant: PickupVariant,
   *   subType: int,
   *   shopItemID: int
   * ): int {}
   * ```
   */
  GET_SHOP_ITEM_PRICE = 1066,

  /**
   * Fires when the player's health type is being loaded. Return `PlayerHealthType` to override the
   * player's health type.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `PlayerType` provided.
   *
   * ```ts
   * function playerGetHealthType(player: EntityPlayer): PlayerHealthType | undefined {}
   * ```
   */
  PLAYER_GET_HEALTH_TYPE = 1067,

  /**
   * Fires before the room clear is triggered.
   *
   * ```ts
   * function preRoomTriggerClear(playSound: boolean): void {}
   * ```
   */
  PRE_ROOM_TRIGGER_CLEAR = 1068,

  /**
   * Fires before a player triggers the room clear. Return false to cancel the room clear effects.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `PlayerVariant` provided.
   *
   * ```ts
   * function preRenderPlayerBody(player: EntityPlayer): boolean | undefined {}
   * ```
   */
  PRE_PLAYER_TRIGGER_ROOM_CLEAR = 1069,

  /**
   * Fires before a familiar renders. Return a Vector to modify the rendered sprite's offset.
   * Alternatively, return false to cancel rendering the familiar.
   *
   * Canceling this callback will not stop rendering of entity shadows. This is being investigated,
   * but in the meantime call `Entity.SetShadowSize(0)` on the entity in `ModCallback.POST_UPDATE`.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `FamiliarVariant` provided.
   *
   * ```ts
   * function preFamiliarRender(
   *   familiar: EntityFamiliar,
   *   offset: Vector
   * ): Vector | boolean | undefined {}
   * ```
   */
  PRE_FAMILIAR_RENDER = 1080,

  /**
   * Fires before a npc renders. Return a Vector to modify the rendered sprite's offset.
   * Alternatively, return false to cancel rendering the npc.
   *
   * Canceling this callback will not stop rendering of entity shadows. This is being investigated,
   * but in the meantime call `Entity.SetShadowSize(0)` on the entity in `ModCallback.POST_UPDATE`.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `EntityType` provided.
   *
   * ```ts
   * function preNPCRender(npc: EntityNPC, offset: Vector): Vector | boolean | undefined {}
   * ```
   */
  PRE_NPC_RENDER = 1081,

  /**
   * Fires before a player renders. Return a Vector to modify the rendered sprite's offset.
   * Alternatively, return false to cancel rendering the player.
   *
   * Canceling this callback will not stop rendering of entity shadows. This is being investigated,
   * but in the meantime call `Entity.SetShadowSize(0)` on the entity in `ModCallback.POST_UPDATE`.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `PlayerVariant` provided.
   *
   * ```ts
   * function prePlayerRender(player: EntityPlayer, offset: Vector): Vector | boolean | undefined {}
   * ```
   */
  PRE_PLAYER_RENDER = 1082,

  /**
   * Fires before a pickup renders. Return a Vector to modify the rendered sprite's offset.
   * Alternatively, return false to cancel rendering the pickup.
   *
   * Canceling this callback will not stop rendering of entity shadows. This is being investigated,
   * but in the meantime call `Entity.SetShadowSize(0)` on the entity in `ModCallback.POST_UPDATE`.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `PickupVariant` provided.
   *
   * ```ts
   * function prePickupRender(pickup: EntityPickup, offset: Vector): Vector | boolean | undefined {}
   * ```
   */
  PRE_PICKUP_RENDER = 1083,

  /**
   * Fires before a tear renders. Return a Vector to modify the rendered sprite's offset.
   * Alternatively, return false to cancel rendering the tear.
   *
   * Canceling this callback will not stop rendering of entity shadows. This is being investigated,
   * but in the meantime call `Entity.SetShadowSize(0)` on the entity in `ModCallback.POST_UPDATE`.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `TearVariant` provided.
   *
   * ```ts
   * function preTearRender(tear: EntityTear, offset: Vector): Vector | boolean | undefined {}
   * ```
   */
  PRE_TEAR_RENDER = 1084,

  /**
   * Fires before a projectile renders. Return a Vector to modify the rendered sprite's offset.
   * Alternatively, return false to cancel rendering the projectile.
   *
   * Canceling this callback will not stop rendering of entity shadows. This is being investigated,
   * but in the meantime call `Entity.SetShadowSize(0)` on the entity in `ModCallback.POST_UPDATE`.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `ProjectileVariant` provided.
   *
   * ```ts
   * function preProjectileRender(
   *   projectile: ProjectileVariant,
   *   offset: Vector
   * ): Vector | boolean | undefined {}
   * ```
   */
  PRE_PROJECTILE_RENDER = 1085,

  /**
   * Fires before a knife renders. Return a Vector to modify the rendered sprite's offset.
   * Alternatively, return false to cancel rendering the knife.
   *
   * Canceling this callback will not stop rendering of entity shadows. This is being investigated,
   * but in the meantime call `Entity.SetShadowSize(0)` on the entity in `ModCallback.POST_UPDATE`.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `KnifeVariant` provided.
   *
   * ```ts
   * function preKnifeRender(knife: EntityKnife, offset: Vector): Vector | boolean | undefined {}
   * ```
   */
  PRE_KNIFE_RENDER = 1086,

  /**
   * Fires before a effect renders. Return a Vector to modify the rendered sprite's offset.
   * Alternatively, return false to cancel rendering the effect.
   *
   * Canceling this callback will not stop rendering of entity shadows. This is being investigated,
   * but in the meantime call `Entity.SetShadowSize(0)` on the entity in `ModCallback.POST_UPDATE`.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `EffectVariant` provided.
   *
   * ```ts
   * function preEffectRender(effect: EntityEffect, offset: Vector): Vector | boolean | undefined {}
   * ```
   */
  PRE_EFFECT_RENDER = 1087,

  /**
   * Fires before a bomb renders. Return a Vector to modify the rendered sprite's offset.
   * Alternatively, return false to cancel rendering the bomb.
   *
   * Canceling this callback will not stop rendering of entity shadows. This is being investigated,
   * but in the meantime call `Entity.SetShadowSize(0)` on the entity in `ModCallback.POST_UPDATE`.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `BombVariant` provided.
   *
   * ```ts
   * function preBombRender(bomb: EntityBomb, offset: Vector): Vector | boolean | undefined {}
   * ```
   */
  PRE_BOMB_RENDER = 1088,

  /**
   * Fires before a slot renders. Return a Vector to modify the rendered sprite's offset.
   * Alternatively, return false to cancel rendering the slot.
   *
   * Canceling this callback will not stop rendering of entity shadows. This is being investigated,
   * but in the meantime call `Entity.SetShadowSize(0)` on the entity in `ModCallback.POST_UPDATE`.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `SlotVariant` provided.
   *
   * ```ts
   * function preSlotRender(slot: EntitySlot, offset: Vector): Vector | boolean | undefined {}
   * ```
   */
  PRE_SLOT_RENDER = 1089,

  /**
   * Fires after a slot renders.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `SlotVariant` provided.
   *
   * ```ts
   * function postSlotRender(slot: EntitySlot, offset: Vector): void {}
   * ```
   */
  POST_SLOT_RENDER = 1090,

  /**
   * Fires before a GridEntity is spawned outside of room initialization. Return false to cancel
   * spawning the grid. Alternatively, return an array of parameters or a GridEntityDesc to override
   * the GridEntity spawned.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GridEntityType` provided.
   *
   * ```ts
   * function preGridEntitySpawn(
   *   gridEntityType: GridEntityType,
   *   variant: int,
   *   varData: int,
   *   gridIndex: int,
   *   spawnSeed: Seed,
   *   desc: GridEntityDesc
   * ): [GridEntityType, int, int, Seed] | boolean | undefined {}
   * ```
   */
  PRE_GRID_ENTITY_SPAWN = 1100,

  /**
   * Fires after a GridEntity is spawned outside of room initialization.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GridEntityType` provided.
   *
   * ```ts
   * function postGridEntitySpawn(
   *   gridEntityType: GridEntityType,
   *   variant: int,
   *   varData: int,
   *   gridIndex: int,
   *   spawnSeed: Seed,
   *   desc: GridEntityDesc
   * ): void {}
   * ```
   */
  POST_GRID_ENTITY_SPAWN = 1101,

  /**
   * Fires before a collectible belonging to a player has its max charges loaded. Return an integer
   * to override the item's chargebar.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `CollectibleType` provided.
   *
   * ```ts
   * function playerGetActiveMaxCharge(
   *   collectible: Collectible,
   *   player: EntityPlayer,
   *   varData: int
   * ): int | undefined {}
   * ```
   */
  PLAYER_GET_ACTIVE_MAX_CHARGE = 1072,

  /**
   * Fires before a collectible belonging to a player has its minimum usable charges loaded. If the
   * item has the minimum amount of charge, it will show the white outline around the chargebar
   * sprite.
   *
   * Return an integer to override the minimum charges.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `CollectibleType` provided.
   *
   * ```ts
   * function playerGetActiveMinUsableCharge(slot: ActiveSlot): int | undefined {}
   * ```
   */
  PLAYER_GET_ACTIVE_MIN_USABLE_CHARGE = 1073,

  /**
   * Fires every frame. Return an integer to override the player's heart limit.
   *
   * You can set the limit to any arbitrary amount but the game can only render up to 4 lines of
   * hearts in the HUD. However, even if they're not visible, the hearts still work properly.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `PlayerType` provided.
   *
   * ```ts
   * function playerGetHeartLimit(
   *   player: EntityPlayer,
   *   heartLimit: int,
   *   isKeeper: boolean
   * ): int undefined {}
   * ```
   */
  PLAYER_GET_HEART_LIMIT = 1074,

  /**
   * Returns every an item overlay is rendered.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GiantbookType` provided.
   *
   * ```ts
   * function postItemOverlayUpdate(): void {}
   * ```
   */
  POST_ITEM_OVERLAY_UPDATE = 1075,

  /**
   * Fires before an item overlay is shown. Return `GiantBookType` to override the overlay shown.
   * Alternatively, return true to cancel the item overlay.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GiantbookType` provided.
   *
   * ```ts
   * function preItemOverlayShow(
   *   giantbookType: GiantbookType,
   *   delay: int,
   *   player: EntityPlayer
   * ): GiantbookType | boolean | undefined {}
   * ```
   */
  PRE_ITEM_OVERLAY_SHOW = 1076,

  /**
   * TODO: Document me!
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `PlayerType` provided.
   *
   * ```ts
   * function postPlayerNewRoomTempEffects(player: EntityPlayer): void {}
   * ```
   */
  POST_PLAYER_NEW_ROOM_TEMP_EFFECTS = 1077,

  /**
   * TODO: Document me!
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `PlayerType` provided.
   *
   * ```ts
   * function postPlayerNewLevel(player: EntityPlayer): void {}
   * ```
   */
  POST_PLAYER_NEW_LEVEL = 1078,

  /**
   * Fires every frame. Return a `MultiShotParams` object to change the properties of the player's
   * shooting behavior in regards to the MultiShotParams object.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `PlayerType` provided.
   *
   * ```ts
   * function postPlayerGetMultiShotParams(player: EntityPlayer): MultiShotParams | undefined {}
   * ```
   */
  POST_PLAYER_GET_MULTI_SHOT_PARAMS = 1251,

  /**
   * Fires before a spritesheet in a sprite is replaced.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the anm2 file name provided.
   *
   * ```ts
   * function preReplaceSpritesheet(layerId: int, fileName: string): string | undefined {}
   * ```
   */
  PRE_REPLACE_SPRITESHEET = 1116,

  /**
   * Fires after a spritesheet in a sprite is replaced.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the anm2 file name provided.
   *
   * ```ts
   * function postReplaceSpritesheet(layerId: int, fileName: string): void {}
   * ```
   */
  POST_REPLACE_SPRITESHEET = 1117,

  /**
   * Fires at the start of planetarium calculation. Before calculating, the game first checks if the
   * current floor is valid to spawn a planetarium. If the current floor is invalid, all further
   * calculation (and thus, all further callbacks) will be canceled.
   *
   * By default, planetariums cannot spawn past Depths 2, or Womb 2 with Telescope Lens.
   *
   * This callback can be used, for example, to add custom planetarium spawn rules on custom floors,
   * or to add new items like Telescope Lens which can augment the rules.
   *
   * Return false to bypass the stage penalty.
   *
   * ```ts
   * function prePlanetariumStagePenalty(): boolean | undefined {}
   * ```
   */
  PRE_PLANETARIUM_APPLY_STAGE_PENALTY = 1110,

  /**
   * After `ModCallback.PRE_PLANETARIUM_APPLY_STAGE_PENALTY` is fired and the stage is valid for a
   * planetarium to generate, the callback checks if a planetarium has been entered before. If so,
   * the chance is locked at 1%, or 10% with Telescope Lens.
   *
   * Return false to bypass the planetarium enter penalty.
   *
   * This callback can be used, for example, to add custom planetarium spawn rules on custom floors,
   * or to add new items like Telescope Lens which can augment the rules.
   *
   * Return false to bypass the stage penalty.
   *
   * ```ts
   * function prePlanetariumApplyPlanetariumPenalty(): boolean | undefined {}
   * ```
   */
  PRE_PLANETARIUM_APPLY_PLANETARIUM_PENALTY = 1111,

  /**
   * After ensuring planetariums haven't been entered before, the game then checks how many treasure
   * rooms entered is greater than or equal to the current stage number, the chance will be locked
   * at 1%, or 10% with Telescope Lens.
   *
   * If you're looking to add an item like Telescope Lens which modifies the base chance, look at
   * `ModCallback.PRE_PLANETARIUM_APPLY_TELESCOPE_LENS` instead.
   *
   * Return false to bypass the planetarium treasure room penalty entirely, meaning the game will
   * act as if no treasure rooms have been entered. Alternatively, return an integer to modify how
   * many treasure rooms the game will believe has been entered.
   *
   * ```ts
   * function prePlanetariumApplyTreasurePenalty(
   *   treasureRoomsEntered: int
   * ): boolean | int | undefined {}
   * ```
   */
  PRE_PLANETARIUM_APPLY_TREASURE_PENALTY = 1112,

  /**
   * After checking the amount of treasure rooms entered, the game applies flat item chances. This
   * is where Crystal Ball, Magic 8 Ball, and Sausage's chances get added, as well as Telescope
   * Lens' additional 15% chance.
   *
   * If you're looking to add an item like Telescope Lens which modifies the base chance, have a
   * look at `ModCallback.PRE_PLANETARIUM_APPLY_TELESCOPE_LENS` instead.
   *
   * Return a number to modify the chance in this step of the calculation.
   *
   * ```ts
   * function prePlanetariumApplyItems(chance: number): number | undefined {}
   * ```
   */
  PRE_PLANETARIUM_APPLY_ITEMS = 1113,

  /**
   * After all previous planetarium chance calculations callbacks fire, Telescope Lens adds an
   * additional 9% chance to the base chance, bringing the base generation chance at 10%.
   *
   * Return a number to modify the chance in this step of the calculation.
   *
   * ```ts
   * function prePlanetariumApplyTelescopeLens(chance: number): number | undefined {}
   * ```
   */
  PRE_PLANETARIUM_APPLY_TELESCOPE_LENS = 1114,

  /**
   * This will override all previous calculation values, ultimately dictating the planetarium
   * chance. Return a number to modify the chance.
   *
   * ```ts
   * function postPlanetariumCalculate(chance: number): number | undefined {}
   * ```
   */
  POST_PLANETARIUM_CALCULATE = 1115,

  /**
   * Fires after an EntitySlot initializes.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `SlotVariant` provided.
   *
   * ```ts
   * function postSlotUpdate(slot: EntitySlot): void {}
   * ```
   */
  POST_SLOT_INIT = 1121,

  /**
   * Fires after an EntitySlot updates.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `SlotVariant` provided.
   *
   * ```ts
   * function postSlotUpdate(slot: EntitySlot): void {}
   * ```
   */
  POST_SLOT_UPDATE = 1122,

  /**
   * Fires before pickups are spawned from blowing up the slot. Return false to prevent the
   * collectibles from spawning.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `SlotVariant` provided.
   *
   * ```ts
   * function preSlotCreateExplosionDrops(slot: EntitySlot): boolean | undefined {}
   * ```
   */
  PRE_SLOT_CREATE_EXPLOSION_DROPS = 1123,

  /**
   * Fires after pickups are spawned from blowing up the slot.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `SlotVariant` provided.
   *
   * ```ts
   * function postSlotCreateExplosionDrops(slot: EntitySlot): void {}
   * ```
   */
  POST_SLOT_CREATE_EXPLOSION_DROPS = 1124,

  /**
   * Fires before the slot's prize collectible is set. This is used by Shell Game and Hell Game.
   *
   * Return a CollectibleType to override what the slot will pay out with.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `SlotVariant` provided.
   *
   * ```ts
   * function preSlotSetPrizeCollectible(slot: EntitySlot): Collectible | undefined {}
   * ```
   */
  PRE_SLOT_SET_PRIZE_COLLECTIBLE = 1125,

  /**
   * Fires after the slot's prize collectible is set. This is used by Shell Game and Hell Game.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `SlotVariant` provided.
   *
   * ```ts
   * function postSlotSetPrizeCollectible(slot: EntitySlot): void {}
   * ```
   */
  POST_SLOT_SET_PRIZE_COLLECTIBLE = 1126,

  /**
   * Fires when the game starts to tally up vanilla items for devil deal calculation. This is called
   * before the stage penalty.
   *
   * Most items that affect devil deal chances perform their changes here.
   *
   * Return a number to modify the chance in this step of calculation.
   *
   * ```ts
   * function preDevilApplyItems(): number {}
   * ```
   */
  PRE_DEVIL_APPLY_ITEMS = 1130,

  /**
   * Fires after `RepentogonCallback.PRE_DEVIL_APPLY_ITEMS`, where the game calculates the stage
   * penalty.
   *
   * If a deal is spawned anywhere on the previous two floors, the game decays the resulting chance
   * by 50% or 25% depending on the amount of deals taken.
   *
   * Note that even though the game displays a value of ~66% or ~33% for the 50% and 25% chances
   * respectively, this is because devil chance is not clamped to a value between 0 and 1, and
   * "100%" without items generally means a value of ~133%.
   *
   * Return false to bypass the stage penalty.
   *
   * Return a number to modify the chance in this step of calculation.
   *
   * ```ts
   * function preDevilApplyStagePenalty(): boolean {}
   * ```
   */
  PRE_DEVIL_APPLY_STAGE_PENALTY = 1131,

  /**
   * Fires after `RepentogonCallback.PRE_DEVIL_APPLY_STAGE_PENALTY`, where the game calculates items
   * which bypass the stage penalty like Goat Head and Eucharist.
   *
   * Return a number to modify the chance in this step of the calculation.
   *
   * ```ts
   * function preDevilApplySpecialItems(): int {}
   * ```
   */
  PRE_DEVIL_APPLY_SPECIAL_ITEMS = 1132,

  /**
   * Fires after `RepentogonCallback.PRE_DEVIL_APPLY_SPECIAL_ITEMS`. This dictates the final devil
   * deal chance.
   *
   * Return a number to modify the chance.
   *
   * ```ts
   * function postDevilCalculate(): int {}
   * ```
   */
  POST_DEVIL_CALCULATE = 1133,

  /**
   * Fires before a player gets a completion mark. Return false to prevent the mark from being
   * given.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `PlayerType` provided.
   *
   * ```ts
   * function preCompletionMarkGet(
   *   completionType: CompletionType,
   *   playerType: PlayerType
   * ): boolean | undefined {}
   * ```
   */
  PRE_COMPLETION_MARK_GET = 1047,

  /**
   * Fires after a player gets a completion mark.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `PlayerType` provided.
   *
   * ```ts
   * function postCompletionMarkGet(completionType: CompletionType, playerType: PlayerType): void {}
   * ```
   */
  POST_COMPLETION_MARK_GET = 1048,

  /**
   * Fires before a completion event is triggered. Return false to cancel the event, preventing all
   * marks and completion event related stuff to trigger for all players.
   *
   * ```ts
   * function preCompletionEvent(completionType: CompletionType): boolean | undefined {}
   * ```
   */
  PRE_COMPLETION_EVENT = 1049,

  /**
   * Behaves the same as `ModCallback.POST_USE_PILL` with the addition of PillColor being passed as
   * an argument.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `PillEffect` provided.
   *
   * ```ts
   * function postUsePill(
   *   effect: PillEffect,
   *   player: EntityPlayer,
   *   flags: BitFlags<UseFlag>,
   *   color: PillColor
   * ): void {}
   * ```
   */
  POST_USE_PILL = 1001,

  /**
   * Fires after an active item is rendered on the screen.
   *
   * ```ts
   * function postPlayerHUDRenderActiveItem(
   *   player: EntityPlayer,
   *   slot: ActiveSlot,
   *   offset: Vector,
   *   alpha: number
   * ): void {}
   * ```
   */
  POST_PLAYER_HUD_RENDER_ACTIVE_ITEM = 1079,

  /**
   * Fires after the health HUD is rendered.
   *
   * ```ts
   * function postPlayerHUDRenderHearts(
   *   offset: Vector,
   *   heartsSprite: Sprite,
   *   position: Vector
   * ): void {}
   * ```
   */
  POST_PLAYER_HUD_RENDER_HEARTS = 1091,

  /**
   * Fires every frame. Return a number to modify the lighting's alpha. This is generally between 0
   * and 1 but you can technically go higher than this.
   *
   * ```ts
   * function preGetLightingAlpha(originalAlpha: number): number | undefined {}
   * ```
   */
  PRE_GET_LIGHTING_ALPHA = 1150,

  /**
   * TODO: Document me fully! Return a Vector to override the offset. Alternatively, return false to
   * stop the rendering.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GridEntityType` provided.
   *
   * ```ts
   * function preRenderGridLighting(
   *   gridEntity: GridEntity,
   *   offset: Vector
   * ): Vector | boolean | undefined {}
   * ```
   */
  PRE_RENDER_GRID_LIGHTING = 1151,

  /**
   * TODO: Document me fully! Return a Vector to override the offset. Alternatively, return false to
   * stop the rendering.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `EntityType` provided.
   *
   * ```ts
   * function preRenderEntityLighting(
   *   entity: Entity,
   *   offset: Vector
   * ): Vector | boolean | undefined {}
   * ```
   */
  PRE_RENDER_ENTITY_LIGHTING = 1152,

  /**
   * TODO: Document me fully!
   *
   * ```ts
   * function prePlayerApplyInnateCollectibleNum(
   *   modCount: int,
   *   player: EntityPlayer,
   *   collectible: CollectibleType,
   *   onlyCountTrueItems: boolean
   * ): int | undefined {}
   * ```
   */
  PRE_PLAYER_APPLY_INNATE_COLLECTIBLE_NUM = 1092,

  /**
   * Fires before the jingle track plays. Return `Music` to change the track. Alternatively, return
   * false to prevent the track from playing.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `Music` provided.
   *
   * ```ts
   * function preMusicPlayJingle(id: Music): boolean | Music | undefined {}
   * ```
   */
  PRE_MUSIC_PLAY_JINGLE = 1094,

  /**
   * Fires after a collectible has been removed.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `CollectibleType` provided.
   *
   * ```ts
   * function postTriggerCollectibleRemoved(
   *   player: EntityPlayer,
   *   collectible: CollectibleType
   * ): void {}
   * ```
   */
  POST_TRIGGER_COLLECTIBLE_REMOVED = 1095,

  /**
   * Fires after a trinket has been added to a player.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `TrinketType` provided.
   *
   * ```ts
   * function postTriggerTrinketAdded(
   *   player: EntityPlayer,
   *   trinketType: TrinketType,
   *   firstTimePickingUp: boolean
   * ): void {}
   * ```
   */
  POST_TRIGGER_TRINKET_ADDED = 1096,

  /**
   * Fires after a trinket has been removed from a player.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `TrinketType` provided.
   *
   * ```ts
   * function postTriggerTrinketRemoved(
   *   player: EntityPlayer,
   *   trinketType: TrinketType,
   * ): void {}
   * ```
   */
  POST_TRIGGER_TRINKET_REMOVED = 1097,

  /**
   * TODO: Document me!
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `WeaponType` provided.
   *
   * ```ts
   * function postTriggerWeaponFired(
   *   fireDirection: Vector,
   *   fireAmount: int,
   *   owner: Entity
   * ): void {}
   * ```
   */
  POST_TRIGGER_WEAPON_FIRED = 1098,

  /**
   * Fires after the level's layout has been generated. You can access the LevelGenerator class from
   * here.
   *
   * ```ts
   * function postLevelLayoutGenerated(levelGenerator: LevelGenerator): void {}
   * ```
   */
  POST_LEVEL_LAYOUT_GENERATED = 1099,

  /**
   * Fires every frame the nightmare scene is rendering.
   *
   * ```ts
   * function postNightmareSceneRender(): void {}
   * ```
   */
  POST_NIGHTMARE_SCENE_RENDER = 1102,

  /**
   * Fires when the nightmare scene is shown.
   *
   * ```ts
   * function postNightmareSceneShow(): void {}
   * ```
   */
  POST_NIGHTMARE_SCENE_SHOW = 1103,

  /**
   * Fires when the game selects which stage to load, usually when the player enters a trapdoor.
   * Return an array containing the LevelStage and StageType respectively to override which level
   * the player ends up on.
   *
   * ```ts
   * function preLevelSelect(
   *   level: LevelStage,
   *   stageType: StageType
   * ): [LevelStage?, StageType?] | undefined {}
   * ```
   */
  MC_PRE_LEVEL_SELECT = 1104,

  /**
   * TODO: Document me!
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `WeaponType` provided.
   *
   * ```ts
   * function postWeaponFire(
   *   weapon: Weapon,
   *   fireDirection: Vector,
   *   isShooting: boolean,
   *   isInterpolated: boolean
   * ): void {}
   * ```
   */
  POST_WEAPON_FIRE = 1105,

  /**
   * Fires before a player uses a bomb. Return false to stop the player from using a bomb.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `PlayerVariant` provided.
   *
   * ```ts
   * function prePlayerUseBomb(player: EntityPlayer): boolean | undefined {}
   * ```
   */
  PRE_PLAYER_USE_BOMB = 1220,

  /**
   * Fires after a player uses a bomb.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `PlayerVariant` provided.
   *
   * ```ts
   * function postPlayerUseBomb(player: EntityPlayer, bomb: EntityBomb): void {}
   * ```
   */
  POST_PLAYER_USE_BOMB = 1221,

  /**
   * Fires before a NPC picks its target, such as when `EntityNPC.GetPlayerTarget()` is called.
   * Return an Entity to override what the NPC targets instead.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `EntityType` provided.
   *
   * ```ts
   * function preNPCPickTarget(
   *   npc: EntityNPC,
   *   currentTarget: Entity | undefined
   * ): Entity | undefined {}
   * ```
   */
  PRE_NPC_PICK_TARGET = 1222,

  /**
   * Acts like `ModCallback.PRE_PLAYER_COLLISION` except it supports returning a dictionary.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `PlayerVariant` provided.
   *
   * ```ts
   * function prePlayerCollision(
   *   player: EntityPlayer,
   *   collider: Entity,
   *   low: boolean
   * ): boolean | { Collide: boolean, SkipCollisionEffects: boolean } | undefined {}
   * ```
   */
  PRE_PLAYER_COLLISION = 1230,

  /**
   * Fires after the on-collision code of the entity was ran, assuming it wasn't skipped in its
   * pre-collision callback.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `PlayerVariant` provided.
   *
   * ```ts
   * function postPlayerCollision(player: EntityPlayer, collider: Entity, low: boolean): void {}
   * ```
   */
  POST_PLAYER_COLLISION = 1231,

  /**
   * Acts like `ModCallback.PRE_TEAR_COLLISION` except it supports returning a dictionary.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `TearVariant` provided.
   *
   * ```ts
   * function preTearCollision(
   *   tear: EntityTear,
   *   collider: Entity,
   *   low: boolean
   * ): boolean | { Collide: boolean, SkipCollisionEffects: boolean } | undefined {}
   * ```
   */
  PRE_TEAR_COLLISION = 1232,

  /**
   * Fires after the on-collision code of the entity was ran, assuming it wasn't skipped in its
   * pre-collision callback.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `TearVariant` provided.
   *
   * ```ts
   * function postTearCollision(tear: EntityTear, collider: Entity, low: boolean): void {}
   * ```
   */
  POST_TEAR_COLLISION = 1233,

  /**
   * Acts like `ModCallback.PRE_FAMILIAR_COLLISION` except it supports returning a dictionary.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `FamiliarVariant` provided.
   *
   * ```ts
   * function preFamiliarCollision(
   *   familiar: EntityFamiliar,
   *   collider: Entity,
   *   low: boolean
   * ): boolean | { Collide: boolean, SkipCollisionEffects: boolean } | undefined {}
   * ```
   */
  PRE_FAMILIAR_COLLISION = 1234,

  /**
   * Fires after the on-collision code of the entity was ran, assuming it wasn't skipped in its
   * pre-collision callback.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `FamiliarVariant` provided.
   *
   * ```ts
   * function postFamiliarCollision(familiar: EntityFamiliar, collider: Entity, low: boolean): void {}
   * ```
   */
  POST_FAMILIAR_COLLISION = 1235,

  /**
   * Acts like `ModCallback.PRE_BOMB_COLLISION` except it supports returning a dictionary.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `BombVariant` provided.
   *
   * ```ts
   * function preBombCollision(
   *   bomb: EntityBomb,
   *   collider: Entity,
   *   low: boolean
   * ): boolean | { Collide: boolean, SkipCollisionEffects: boolean } | undefined {}
   * ```
   */
  PRE_BOMB_COLLISION = 1236,

  /**
   * Fires after the on-collision code of the entity was ran, assuming it wasn't skipped in its
   * pre-collision callback.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `BombVariant` provided.
   *
   * ```ts
   * function postBombCollision(bomb: EntityBomb, collider: Entity, low: boolean): void {}
   * ```
   */
  POST_BOMB_COLLISION = 1237,

  /**
   * Acts like `ModCallback.PRE_PICKUP_COLLISION` except it supports returning a dictionary.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `PickupVariant` provided.
   *
   * ```ts
   * function prePickupCollision(
   *   pickup: EntityPickup,
   *   collider: Entity,
   *   low: boolean
   * ): boolean | { Collide: boolean, SkipCollisionEffects: boolean } | undefined {}
   * ```
   */
  PRE_PICKUP_COLLISION = 1238,

  /**
   * Fires after the on-collision code of the entity was ran, assuming it wasn't skipped in its
   * pre-collision callback.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `PickupVariant` provided.
   *
   * ```ts
   * function postPickupCollision(pickup: EntityPickup, collider: Entity, low: boolean): void {}
   * ```
   */
  POST_PICKUP_COLLISION = 1239,

  /**
   * Fires when the player collides with a slot.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `SlotVariant` provided.
   *
   * ```ts
   * function preSlotCollision(
   *   slot: EntitySlot,
   *   collider: Entity,
   *   low: boolean
   * ): boolean | { Collide: boolean, SkipCollisionEffects: boolean } | undefined {}
   * ```
   */
  PRE_SLOT_COLLISION = 1240,

  /**
   * Fires after the on-collision code of the entity was ran, assuming it wasn't skipped in its
   * pre-collision callback.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `SlotVariant` provided.
   *
   * ```ts
   * function postSlotCollision(slot: EntitySlot, collider: Entity, low: boolean): void {}
   * ```
   */
  POST_SLOT_COLLISION = 1241,

  /**
   * Acts like `ModCallback.PRE_KNIFE_COLLISION` except it supports returning a dictionary.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `KnifeVariant` provided.
   *
   * ```ts
   * function preKnifeCollision(
   *   knife: EntityKnife,
   *   collider: Entity,
   *   low: boolean
   * ): boolean | { Collide: boolean, SkipCollisionEffects: boolean } | undefined {}
   * ```
   */
  PRE_KNIFE_COLLISION = 1242,

  /**
   * Fires after the on-collision code of the entity was ran, assuming it wasn't skipped in its
   * pre-collision callback.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `KnifeVariant` provided.
   *
   * ```ts
   * function postKnifeCollision(knife: EntityKnife, collider: Entity, low: boolean): void {}
   * ```
   */
  POST_KNIFE_COLLISION = 1243,

  /**
   * Acts like `ModCallback.PRE_PROJECTILE_COLLISION` except it supports returning a dictionary.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `ProjectileVariant` provided.
   *
   * ```ts
   * function preProjectileCollision(
   *   projectile: EntityProjectile,
   *   collider: Entity,
   *   low: boolean
   * ): boolean | { Collide: boolean, SkipCollisionEffects: boolean } | undefined {}
   * ```
   */
  PRE_PROJECTILE_COLLISION = 1244,

  /**
   * Fires after the on-collision code of the entity was ran, assuming it wasn't skipped in its
   * pre-collision callback.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `ProjectileVariant` provided.
   *
   * ```ts
   * function postProjectileCollision(
   *   projectile: EntityProjectile,
   *   collider: Entity,
   *   low: boolean
   * ): void {}
   * ```
   */
  POST_PROJECTILE_COLLISION = 1245,

  /**
   * Acts like `ModCallback.PRE_NPC_COLLISION` except it supports returning a dictionary.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `EntityType` provided.
   *
   * ```ts
   * function preNPCCollision(
   *   npc: EntityNPC,
   *   collider: Entity,
   *   low: boolean
   * ): boolean | { Collide: boolean, SkipCollisionEffects: boolean } | undefined {}
   * ```
   */
  PRE_NPC_COLLISION = 1246,

  /**
   * Fires after the on-collision code of the entity was ran, assuming it wasn't skipped in its
   * pre-collision callback.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `EntityType` provided.
   *
   * ```ts
   * function postNPCCollision(npc: EntityNPC, collider: Entity, low: boolean): void {}
   * ```
   */
  POST_NPC_COLLISION = 1247,

  /**
   * Acts like `ModCallback.PRE_LASER_COLLISION` except it supports returning a dictionary.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `LaserVariant` provided.
   *
   * ```ts
   * function preLaserCollision(
   *   laser: EntityLaser,
   *   collider: Entity,
   *   low: boolean
   * ): boolean | { Collide: boolean, SkipCollisionEffects: boolean } | undefined {}
   * ```
   */
  PRE_LASER_COLLISION = 1248,

  /**
   * Fires after the on-collision code of the entity was ran, assuming it wasn't skipped in its
   * pre-collision callback.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `LaserVariant` provided.
   *
   * ```ts
   * function postLaserCollision(laser: EntityLaser, collider: Entity, low: boolean): void {}
   * ```
   */
  POST_LASER_COLLISION = 1249,

  /**
   * Fires every time the console input changes whenever a function with the
   * `AutocompleteType.CUSTOM` enum is being entered into the console.
   *
   * You can return an array which can hold up to two strings, with the first string being the
   * parameter for the command's autocomplete and the second being a description. The description
   * can be used in autocomplete as well, however pressing the tab key will properly autocomplete
   * the ID, not the description (Think the `giveitem` command as an example; `c1` would be The Sad
   * Onion's "parameter" and "The Sad Onion" would be the description, and both work. Pressing the
   * tab key would turn the command into `give c1`).
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the string provided.
   *
   * ```ts
   * function consoleAutocomplete(command: string, params: string): [string, string?] {}
   * ```
   */
  CONSOLE_AUTOCOMPLETE = 1120,

  /**
   * TODO: Document me!
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `PlayerType` provided.
   *
   * ```ts
   * function playerInitPreLevelInitStates(player: EntityPlayer): void {}
   * ```
   */
  PLAYER_INIT_PRE_LEVEL_INIT_STATS = 1127,

  /**
   * Fires before a new room is loaded.
   *
   * ```ts
   * function preNewRoom(room: Room, descriptor: RoomDescriptor): void {}
   * ```
   */
  PRE_NEW_ROOM = 1200,

  /**
   * Fires before the game forcefully ends upon defeating Mega Satan. Return true to prevent the
   * ending, guaranteeing a portal to the Void while retaining the completion marks.
   *
   * ```ts
   * function preMegaSatanEnding(): boolean | undefined {}
   * ```
   */
  PRE_MEGA_SATAN_ENDING = 1201,

  /**
   * Fires after all Lua scripts have been loaded.
   *
   * ```ts
   * function postModsLoaded(): void {}
   * ```
   */
  POST_MODS_LOADED = 1210,

  /**
   * Fires after an item overlay is shown.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GiantBook` provided.
   *
   * ```ts
   * function postItemOverlayShow(giantBook: GiantBook, delay: int, player: EntityPlayer): void {}
   * ```
   */
  POST_ITEM_OVERLAY_SHOW = 1134,

  /**
   * Fires before a room is placed onto the level. Return a room config to replace the room that
   * will be place. It must have the same shape and the new available door slots must be compatible
   * with the original room doors.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GiantBook` provided.
   *
   * ```ts
   * function preLevelPlaceRoom(
   *   slot: LevelGeneratorRoom,
   *   roomConfig: RoomConfig,
   *   seed: Seed
   * ): void {}
   * ```
   */
  PRE_LEVEL_PLACE_ROOM = 1137,

  /**
   * Fires before a npc is split, such as when the Meat Cleaver item is used. Return true to prevent
   * the split. Alternatively, false to allow the split even if the npc is normally blacklisted by
   * the game.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `EntityType` provided.
   *
   * ```ts
   * function preNPCSplit(npc: EntityNPC, isBlacklisted: boolean): boolean | undefined {}
   * ```
   */
  PRE_NPC_SPLIT = 1191,

  /**
   * Fires during room initialization when grid entities from the layout are being spawned.
   *
   * Return false to cancel spawning the grid entity. Alternatively, return an array containing the
   * GridEntityType, variant, var data, and spawn seed to override it.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GridEntityType` provided.
   *
   * ```ts
   * function preRoomGridEntitySpawn(
   *   gridEntityType: GridEntityType,
   *   variant: int,
   *   varData: int,
   *   gridIndex: int,
   *   spawnSeed: Seed
   * ): boolean | [GridEntityType, int, int, int, Seed] | undefined
   * ```
   */
  PRE_ROOM_GRID_ENTITY_SPAWN = 1192,

  /**
   * Fires after a familiar fires a projectile.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `FamiliarVariant` provided.
   *
   * ```ts
   * function postFamiliarFireProjectile(tear: EntityTear): void {}
   * ```
   */
  POST_FAMILIAR_FIRE_PROJECTILE = 1252,

  /**
   * Fires after a player fires a Dr. Fetus bomb.
   *
   * ```ts
   * function postFireBomb(bomb: EntityBomb): void {}
   * ```
   */
  POST_FIRE_BOMB = 1253,

  /**
   * Fires after a player fires The Forgotten's bone club.
   *
   * This is only called when the club is initially spawned, not when swung or charged and shot.
   *
   * ```ts
   * function postFireBoneClub(club: EntityKnife): void {}
   * ```
   */
  POST_FIRE_BONE_CLUB = 1254,

  /**
   * Fires after a player fires a brimstone laser. This is also fired for delayed brimstone.
   *
   * ```ts
   * function postFireBrimstone(brimstone: EntityLaser): void {}
   * ```
   */
  POST_FIRE_BRIMSTONE = 1255,

  /**
   * Fires after a player fires a brimstone ball.
   *
   * ```ts
   * function postFireBrimstoneBall(ball: EntityEffect): void {}
   * ```
   */
  POST_FIRE_BRIMSTONE_BALL = 1256,

  /**
   * Fires after a player fires a knife from Mom's Knife.
   *
   * This is only fired when the knife is initially spawned, not when charged and shot.
   *
   * ```ts
   * function postFireKnife(knife: EntityKnife): void {}
   * ```
   */
  POST_FIRE_KNIFE = 1257,

  /**
   * Fires after a player swings the Spirit Sword.
   *
   * ```ts
   * function postFireSword(sword: EntityKnife): void {}
   * ```
   */
  POST_FIRE_SWORD = 1258,

  /**
   * Fires after a player fires a Tech laser.
   *
   * ```ts
   * function postFireTechLaser(laser: EntityLaser): void {}
   * ```
   */
  POST_FIRE_TECH_LASER = 1259,

  /**
   * Fires after a player fires a Tech X laser.
   *
   * ```ts
   * function postFireTechXLaser(laser: EntityLaser): void {}
   * ```
   */
  POST_FIRE_TECH_X_LASER = 1260,

  /**
   * Fires after a familiar fires a brimstone laser.
   *
   * ```ts
   * function postFamiliarFireBrimstone(brimstone: EntityLaser): void {}
   * ```
   */
  POST_FAMILIAR_FIRE_BRIMSTONE = 1261,

  /**
   * Fires after a familiar fires a tech laser.
   *
   * ```ts
   * function postFamiliarFireTechLaser(laser: EntityLaser): void {}
   * ```
   */
  POST_FAMILIAR_FIRE_TECH_LASER = 1262,

  /**
   * TODO: Document me fully! Return true to allow the entity to respawn.
   *
   * ```ts
   * function getIsPersistentRoomEntity(
   *   entityType: EntityType,
   *   variant: int
   * ): boolean | undefined {}
   * ```
   */
  GET_IS_PERSISTENT_ROOM_ENTITY = 1263,

  /**
   * Fires before the trinket is rendered. Return an array containing the position and scale
   * respectively to override how the trinket hud is rendered. Alternatively, return true to prevent
   * it from rendering.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `TrinketSlot` provided.
   *
   * ```ts
   * function prePlayerHudTrinketRender(
   *   slot: TrinketSlot,
   *   position: Vector,
   *   scale: number,
   *   player: EntityPlayer
   * ): [Vector, number] | boolean | undefined {}
   * ```
   */
  PRE_PLAYER_HUD_TRINKET_RENDER = 1264,

  /**
   * Fires before the decoration grid entity updates. Return false to cancel the update.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GridEntityType` provided.
   *
   * ```ts
   * function preGridEntityDecorationUpdate(
   *   decoration: GridEntityDecoration
   * ): boolean | undefined {}
   * ```
   */
  PRE_GRID_ENTITY_DECORATION_UPDATE = 1400,

  /**
   * Fires after the decoration grid entity updates.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GridEntityType` provided.
   *
   * ```ts
   * function postGridEntityDecorationUpdate(decoration: GridEntityDecoration): void {}
   * ```
   */
  POST_GRID_ENTITY_DECORATION_UPDATE = 1401,

  /**
   * Fires before the door grid entity updates. Return false to cancel the update.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GridEntityType` provided.
   *
   * ```ts
   * function preGridEntityDoorUpdate(door: GridEntityDoor): boolean | undefined {}
   * ```
   */
  PRE_GRID_ENTITY_DOOR_UPDATE = 1402,

  /**
   * Fires after the door grid entity updates.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GridEntityType` provided.
   *
   * ```ts
   * function postGridEntityDoorUpdate(door: GridEntityDoor): void {}
   * ```
   */
  POST_GRID_ENTITY_DOOR_UPDATE = 1403,

  /**
   * Fires before the fire grid entity updates. Return false to cancel the update.
   *
   * Fire grid entities are largely unused, and in most cases you'll want to target the EntityNPC
   * fireplaces.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GridEntityType` provided.
   *
   * ```ts
   * function preGridEntityFireUpdate(fire: GridEntityFire): boolean | undefined {}
   * ```
   */
  PRE_GRID_ENTITY_FIRE_UPDATE = 1404,

  /**
   * Fires after the fire grid entity updates.
   *
   * Fire grid entities are largely unused, and in most cases you'll want to target the EntityNPC
   * fireplaces.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GridEntityType` provided.
   *
   * ```ts
   * function postGridEntityFireUpdate(fire: GridEntityFire): void {}
   * ```
   */
  POST_GRID_ENTITY_FIRE_UPDATE = 1405,

  /**
   * Fires before the gravity grid entity updates. Return false to cancel the update.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GridEntityType` provided.
   *
   * ```ts
   * function preGridEntityGravityUpdate(gravity: GridEntityGravity): boolean | undefined {}
   * ```
   */
  PRE_GRID_ENTITY_GRAVITY_UPDATE = 1406,

  /**
   * Fires after the gravity grid entity updates.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GridEntityType` provided.
   *
   * ```ts
   * function postGridEntityGravityUpdate(gravity: GridEntityGravity): void {}
   * ```
   */
  POST_GRID_ENTITY_GRAVITY_UPDATE = 1407,

  /**
   * Fires before the lock grid entity updates. Return false to cancel the update.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GridEntityType` provided.
   *
   * ```ts
   * function preGridEntityLockUpdate(lock: GridEntityLock): boolean | undefined {}
   * ```
   */
  PRE_GRID_ENTITY_LOCK_UPDATE = 1408,

  /**
   * Fires after the lock grid entity updates.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GridEntityType` provided.
   *
   * ```ts
   * function postGridEntityLockUpdate(lock: GridEntityLock): void {}
   * ```
   */
  POST_GRID_ENTITY_LOCK_UPDATE = 1409,

  /**
   * Fires before the pit grid entity updates. Return false to cancel the update.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GridEntityType` provided.
   *
   * ```ts
   * function preGridEntityPitUpdate(pit: GridEntityPit): boolean | undefined {}
   * ```
   */
  PRE_GRID_ENTITY_PIT_UPDATE = 1410,

  /**
   * Fires after the pit grid entity updates.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GridEntityType` provided.
   *
   * ```ts
   * function postGridEntityPitUpdate(pit: GridEntityPit): void {}
   * ```
   */
  POST_GRID_ENTITY_PIT_UPDATE = 1411,

  /**
   * Fires before the poop grid entity updates. Return false to cancel the update.
   *
   * This callback does not include the EntityNPC poops used by Tainted Blue Baby.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GridEntityType` provided.
   *
   * ```ts
   * function preGridEntityPoopUpdate(poop: GridEntityPoop): boolean | undefined {}
   * ```
   */
  PRE_GRID_ENTITY_POOP_UPDATE = 1412,

  /**
   * Fires after the poop grid entity updates.
   *
   * This callback does not include the EntityNPC poops used by Tainted Blue Baby.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GridEntityType` provided.
   *
   * ```ts
   * function postGridEntityPoopUpdate(poop: GridEntityPoop): void {}
   * ```
   */
  POST_GRID_ENTITY_POOP_UPDATE = 1413,

  /**
   * Fires before the pressure plate grid entity updates. Return false to cancel the update.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GridEntityType` provided.
   *
   * ```ts
   * function preGridEntityPressurePlateUpdate(
   *   pressurePlate: GridEntityPressurePlate
   * ): boolean | undefined {}
   * ```
   */
  PRE_GRID_ENTITY_PRESSURE_PLATE_UPDATE = 1414,

  /**
   * Fires after the pressure plate grid entity updates.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GridEntityType` provided.
   *
   * ```ts
   * function postGridEntityPressurePlateUpdate(pressurePlate: GridEntityPressurePlate): void {}
   * ```
   */
  POST_GRID_ENTITY_PRESSURE_PLATE_UPDATE = 1415,

  /**
   * Fires before the rock grid entity updates. Return false to cancel the update.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GridEntityType` provided.
   *
   * ```ts
   * function preGridEntityRockUpdate(rock: GridEntityRock): boolean | undefined {}
   * ```
   */
  PRE_GRID_ENTITY_ROCK_UPDATE = 1416,

  /**
   * Fires after the rock grid entity updates. Return false to cancel the update.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GridEntityType` provided.
   *
   * ```ts
   * function postGridEntityRockUpdate(rock: GridEntityRock): void {}
   * ```
   */
  POST_GRID_ENTITY_ROCK_UPDATE = 1417,

  /**
   * Fires before the spikes grid entity updates. Return false to cancel the update.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GridEntityType` provided.
   *
   * ```ts
   * function preGridEntitySpikesUpdate(spikes: GridEntitySpikes): boolean | undefined {}
   * ```
   */
  PRE_GRID_ENTITY_SPIKES_UPDATE = 1418,

  /**
   * Fires after the spikes grid entity updates.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GridEntityType` provided.
   *
   * ```ts
   * function postGridEntitySpikesUpdate(spikes: GridEntitySpikes): void {}
   * ```
   */
  POST_GRID_ENTITY_SPIKES_UPDATE = 1419,

  /**
   * Fires before the staircase grid entity updates. Return false to cancel the update.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GridEntityType` provided.
   *
   * ```ts
   * function preGridEntityStaircaseUpdate(stairCase: GridEntityStaircase): boolean | undefined {}
   * ```
   */
  PRE_GRID_ENTITY_STAIRCASE_UPDATE = 1420,

  /**
   * Fires after the staircase grid entity updates.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GridEntityType` provided.
   *
   * ```ts
   * function postGridEntityStaircaseUpdate(stairCase: GridEntityStaircase): void {}
   * ```
   */
  POST_GRID_ENTITY_STAIRCASE_UPDATE = 1421,

  /**
   * Fires before the statue grid entity updates. Return false to cancel the update.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GridEntityType` provided.
   *
   * ```ts
   * function preGridEntityStatueUpdate(statue: GridEntityStatue): boolean | undefined {}
   * ```
   */
  PRE_GRID_ENTITY_STATUE_UPDATE = 1422,

  /**
   * Fires after the statue grid entity updates.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GridEntityType` provided.
   *
   * ```ts
   * function postGridEntityStatueUpdate(statue: GridEntityStatue): void {}
   * ```
   */
  POST_GRID_ENTITY_STATUE_UPDATE = 1423,

  /**
   * Fires before the teleporter grid entity updates. Return false to cancel the update.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GridEntityType` provided.
   *
   * ```ts
   * function postGridEntityTeleporterUpdate(
   *   teleporter: GridEntityTeleporter
   * ): boolean | undefined {}
   * ```
   */
  PRE_GRID_ENTITY_TELEPORTER_UPDATE = 1424,

  /**
   * Fires after the teleporter grid entity updates.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GridEntityType` provided.
   *
   * ```ts
   * function postGridEntityTeleporterUpdate(
   *   teleporter: GridEntityTeleporter
   * ): void {}
   * ```
   */
  POST_GRID_ENTITY_TELEPORTER_UPDATE = 1425,

  /**
   * Fires before the trapdoor grid entity updates. Return false to cancel the update.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GridEntityType` provided.
   *
   * ```ts
   * function preGridEntityTrapdoorUpdate(trapdoor: GridEntityTrapdoor): boolean | undefined {}
   * ```
   */
  PRE_GRID_ENTITY_TRAPDOOR_UPDATE = 1426,

  /**
   * Fires after the trapdoor grid entity updates.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GridEntityType` provided.
   *
   * ```ts
   * function postGridEntityTrapdoorUpdate(trapdoor: GridEntityTrapdoor): void {}
   * ```
   */
  POST_GRID_ENTITY_TRAPDOOR_UPDATE = 1427,

  /**
   * Fires before the web grid entity updates. Return false to cancel the update.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GridEntityType` provided.
   *
   * ```ts
   * function preGridEntityWebUpdate(web: GridEntityWeb): boolean | undefined {}
   * ```
   */
  PRE_GRID_ENTITY_WEB_UPDATE = 1428,

  /**
   * Fires after the web grid entity updates.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GridEntityType` provided.
   *
   * ```ts
   * function postGridEntityWebUpdate(web: GridEntityWeb): void {}
   * ```
   */
  POST_GRID_ENTITY_WEB_UPDATE = 1429,

  /**
   * Fires before the spikes grid entity renders. Return a Vector to modify the render offset.
   * Alternatively, return false to cancel the rendering.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GridEntityType` provided.
   *
   * ```ts
   * function preGridEntitySpikesRender(
   *   grid: GridEntitySpikes,
   *   offset: Vector
   * ): Vector | boolean | undefined {}
   * ```
   */
  PRE_GRID_ENTITY_SPIKES_RENDER = 1432,

  /**
   * Fires after the spikes grid entity renders.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GridEntityType` provided.
   *
   * ```ts
   * function postGridEntitySpikesRender(grid: GridEntitySpikes): void {}
   * ```
   */
  POST_GRID_ENTITY_SPIKES_RENDER = 1433,

  /**
   * Fires before the web grid entity renders. Return a Vector to modify the render offset.
   * Alternatively, return false to cancel the rendering.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GridEntityType` provided.
   *
   * ```ts
   * function preGridEntityWebRender(
   *   grid: GridEntityWeb,
   *   offset: Vector
   * ): Vector | boolean | undefined {}
   * ```
   */
  PRE_GRID_ENTITY_WEB_RENDER = 1434,

  /**
   * Fires after the web grid entity renders.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GridEntityType` provided.
   *
   * ```ts
   * function postGridEntityWebRender(grid: GridEntityWeb): void {}
   * ```
   */
  POST_GRID_ENTITY_WEB_RENDER = 1435,

  /**
   * Fires after the TNT grid entity renders. Return a Vector to modify the render offset.
   * Alternatively, return false to cancel the rendering.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GridEntityType` provided.
   *
   * ```ts
   * function preGridEntityTNTRender(
   *   grid: GridEntityTNT,
   *   offset: Vector
   * ): Vector | boolean | undefined {}
   * ```
   */
  PRE_GRID_ENTITY_TNT_RENDER = 1436,

  /**
   * Fires after the TNT grid entity renders.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GridEntityType` provided.
   *
   * ```ts
   * function postGridEntityTNTRender(grid: GridEntityTNT): void {}
   * ```
   */
  POST_GRID_ENTITY_TNT_RENDER = 1437,

  /**
   * Fires before the trapdoor grid entity renders. Return a Vector to modify the render offset.
   * Alternatively, return false to cancel the rendering.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GridEntityType` provided.
   *
   * ```ts
   * function preGridEntityTrapdoorRender(
   *   grid: GridEntityTrapdoor,
   *   offset: Vector
   * ): Vector | boolean | undefined {}
   * ```
   */
  PRE_GRID_ENTITY_TRAPDOOR_RENDER = 1438,

  /**
   * Fires after the trapdoor grid entity renders.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GridEntityType` provided.
   *
   * ```ts
   * function postGridEntityTrapdoorRender(grid: GridEntityTrapdoor): void {}
   * ```
   */
  POST_GRID_ENTITY_TRAPDOOR_RENDER = 1439,

  /**
   * Fires before the staircase grid entity renders. Return a Vector to modify the render offset.
   * Alternatively, return false to cancel the rendering.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GridEntityType` provided.
   *
   * ```ts
   * function preGridEntityStaircaseRender(
   *   grid: GridEntityStaircase,
   *   offset: Vector
   * ): Vector | boolean | undefined {}
   * ```
   */
  PRE_GRID_ENTITY_STAIRCASE_RENDER = 1440,

  /**
   * Fires after the staircase grid entity renders.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GridEntityType` provided.
   *
   * ```ts
   * function postGridEntityStaircaseRender(grid: GridEntityStaircase): void {}
   * ```
   */
  POST_GRID_ENTITY_STAIRCASE_RENDER = 1441,

  /**
   * Fires before the decoration grid entity renders. Return a Vector to modify the render offset.
   * Alternatively, return false to cancel the rendering.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GridEntityType` provided.
   *
   * ```ts
   * function preGridEntityDecorationRender(
   *   grid: GridEntityDecoration,
   *   offset: Vector
   * ): Vector | boolean | undefined {}
   * ```
   */
  PRE_GRID_ENTITY_DECORATION_RENDER = 1444,

  /**
   * Fires after the decoration grid entity renders.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GridEntityType` provided.
   *
   * ```ts
   * function postGridEntityDecorationRender(grid: GridEntityDecoration): void {}
   * ```
   */
  POST_GRID_ENTITY_DECORATION_RENDER = 1445,

  /**
   * Fires before the door grid entity renders. Return a Vector to modify the render offset.
   * Alternatively, return false to cancel the rendering.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GridEntityType` provided.
   *
   * ```ts
   * function preGridEntityDoorRender(
   *   grid: GridEntityDoor,
   *   offset: Vector
   * ): Vector | boolean | undefined {}
   * ```
   */
  PRE_GRID_ENTITY_DOOR_RENDER = 1446,

  /**
   * Fires after the door grid entity renders.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GridEntityType` provided.
   *
   * ```ts
   * function postGridEntityDoorRender(grid: GridEntityDoor): void {}
   * ```
   */
  POST_GRID_ENTITY_DOOR_RENDER = 1447,

  /**
   * Fires before the staircase grid entity renders. Return a Vector to modify the render offset.
   * Alternatively, return false to cancel the rendering.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GridEntityType` provided.
   *
   * ```ts
   * function preGridEntityFireRender(
   *   grid: GridEntityFire,
   *   offset: Vector
   * ): Vector | boolean | undefined {}
   * ```
   */
  PRE_GRID_ENTITY_FIRE_RENDER = 1448,

  /**
   * Fires after the staircase grid entity renders.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GridEntityType` provided.
   *
   * ```ts
   * function postGridEntityFireRender(grid: GridEntityFire): void {}
   * ```
   */
  POST_GRID_ENTITY_FIRE_RENDER = 1449,

  /**
   * Fires before the lock grid entity renders. Return a Vector to modify the render offset.
   * Alternatively, return false to cancel the rendering.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GridEntityType` provided.
   *
   * ```ts
   * function preGridEntityLockRender(
   *   grid: GridEntityLock,
   *   offset: Vector
   * ): Vector | boolean | undefined {}
   * ```
   */
  PRE_GRID_ENTITY_LOCK_RENDER = 1450,

  /**
   * Fires after the lock grid entity renders.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GridEntityType` provided.
   *
   * ```ts
   * function postGridEntityLockRender(grid: GridEntityLock): void {}
   * ```
   */
  POST_GRID_ENTITY_LOCK_RENDER = 1451,

  /**
   * Fires before the teleporter grid entity renders. Return a Vector to modify the render offset.
   * Alternatively, return false to cancel the rendering.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GridEntityType` provided.
   *
   * ```ts
   * function preGridEntityTeleporterRender(
   *   grid: GridEntityTeleporter,
   *   offset: Vector
   * ): Vector | boolean | undefined {}
   * ```
   */
  PRE_GRID_ENTITY_TELEPORTER_RENDER = 1452,

  /**
   * Fires after the teleporter grid entity renders.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GridEntityType` provided.
   *
   * ```ts
   * function postGridEntityTeleporterRender(grid: GridEntityTeleporter): void {}
   * ```
   */
  POST_GRID_ENTITY_TELEPORTER_RENDER = 1453,

  /**
   * Fires before the pit grid entity renders. Return a Vector to modify the render offset.
   * Alternatively, return false to cancel the rendering.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GridEntityType` provided.
   *
   * ```ts
   * function preGridEntityPitRender(
   *   grid: GridEntityPit,
   *   offset: Vector
   * ): Vector | boolean | undefined {}
   * ```
   */
  PRE_GRID_ENTITY_PIT_RENDER = 1454,

  /**
   * Fires after the pit grid entity renders.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GridEntityType` provided.
   *
   * ```ts
   * function postGridEntityPitRender(grid: GridEntityPit): void {}
   * ```
   */
  POST_GRID_ENTITY_PIT_RENDER = 1455,

  /**
   * Fires before the poop grid entity renders. Return a Vector to modify the render offset.
   * Alternatively, return false to cancel the rendering.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GridEntityType` provided.
   *
   * ```ts
   * function preGridEntityPoopRender(
   *   grid: GridEntityPoop,
   *   offset: Vector
   * ): Vector | boolean | undefined {}
   * ```
   */
  PRE_GRID_ENTITY_POOP_RENDER = 1456,

  /**
   * Fires after the poop grid entity renders.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GridEntityType` provided.
   *
   * ```ts
   * function postGridEntityPoopRender(grid: GridEntityPoop): void {}
   * ```
   */
  POST_GRID_ENTITY_POOP_RENDER = 1457,

  /**
   * Fires before the rock grid entity renders. Return a Vector to modify the render offset.
   * Alternatively, return false to cancel the rendering.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GridEntityType` provided.
   *
   * ```ts
   * function preGridEntityRockRender(
   *   grid: GridEntityRock,
   *   offset: Vector
   * ): Vector | boolean | undefined {}
   * ```
   */
  PRE_GRID_ENTITY_ROCK_RENDER = 1458,

  /**
   * Fires after the rock grid entity renders.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GridEntityType` provided.
   *
   * ```ts
   * function postGridEntityRockRender(grid: GridEntityRock): void {}
   * ```
   */
  POST_GRID_ENTITY_ROCK_RENDER = 1459,

  /**
   * Fires before the pressure plate grid entity renders. Return a Vector to modify the render
   * offset. Alternatively, return false to cancel the rendering.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GridEntityType` provided.
   *
   * ```ts
   * function preGridEntityPressurePlateRender(
   *   grid: GridEntityPressurePlate,
   *   offset: Vector
   * ): Vector | boolean | undefined {}
   * ```
   */
  PRE_GRID_ENTITY_PRESSURE_PLATE_RENDER = 1460,

  /**
   * Fires after the pressure plate grid entity renders.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GridEntityType` provided.
   *
   * ```ts
   * function postGridEntityPressurePlateRender(grid: GridEntityPressurePlate): void {}
   * ```
   */
  POST_GRID_ENTITY_PRESSURE_PLATE_RENDER = 1461,

  /**
   * Fires before the wall grid entity renders. Return a Vector to modify the render offset.
   * Alternatively, return false to cancel the rendering.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GridEntityType` provided.
   *
   * ```ts
   * function preGridEntityWallRender(
   *   grid: GridEntityWall,
   *   offset: Vector
   * ): Vector | boolean | undefined {}
   * ```
   */
  PRE_GRID_ENTITY_WALL_RENDER = 1462,

  /**
   * Fires after the wall grid entity renders.
   *
   * When registering the callback with the `addCallbackRepentogon` method:
   * - You can provide an optional third argument that will make the callback only fire if it
   *   matches the `GridEntityType` provided.
   *
   * ```ts
   * function preGridEntityWallRender(grid: GridEntityWall): void {}
   * ```
   */
  POST_GRID_ENTITY_WALL_RENDER = 1463,

  /**
   * Fires after a save slot is loaded by the game.
   *
   * - The `saveSlot` parameter is the slot you should care about.
   * - The `isSlotSelected` parameter indicates if the slot is being loaded has been actually
   *   selected from the save menu screen.
   * - The `rawSlot` parameter is the actual save slot the game uses, not the one the API uses since
   *   it can be 0!
   *
   * ```ts
   * function postSaveSlotLoad(saveSlot: int, isSlotSelected: boolean, rawSlot: int): void {}
   * ```
   */
  POST_SAVE_SLOT_LOAD = 1470,
}

----
enums\Mouse.ts
export enum Mouse {
  BUTTON_LEFT = 0,
  BUTTON_RIGHT = 1,
  BUTTON_MIDDLE = 2,
  BUTTON_4 = 3,
  BUTTON_5 = 4,
  BUTTON_6 = 5,
  BUTTON_7 = 6,
  BUTTON_8 = 7,
}

----
enums\Music.ts
export enum Music {
  NULL = 0,
  BASEMENT = 1,
  CAVES = 2,
  DEPTHS = 3,
  CELLAR = 4,
  CATACOMBS = 5,
  NECROPOLIS = 6,
  WOMB = 7,
  GAME_OVER = 8,
  BOSS = 9,
  CATHEDRAL = 10,
  SHEOL = 11,
  DARK_ROOM = 12,
  CHEST = 13,
  BURNING_BASEMENT = 14,
  FLOODED_CAVES = 15,
  DANK_DEPTHS = 16,
  SCARRED_WOMB = 17,
  BLUE_WOMB = 18,
  UTERO = 19,
  MOM_BOSS = 20,
  MOMS_HEART_BOSS = 21,
  ISAAC_BOSS = 22,
  SATAN_BOSS = 23,
  DARK_ROOM_BOSS = 24,
  BLUE_BABY_BOSS = 25,
  BOSS_2 = 26,
  HUSH_BOSS = 27,
  ULTRA_GREED_BOSS = 28,
  LIBRARY_ROOM = 30,
  SECRET_ROOM = 31,
  SECRET_ROOM_2 = 32,
  DEVIL_ROOM = 33,
  ANGEL_ROOM = 34,
  SHOP_ROOM = 35,
  ARCADE_ROOM = 36,
  BOSS_OVER = 37,
  CHALLENGE_FIGHT = 38,
  BOSS_RUSH = 39,
  JINGLE_BOSS_RUSH_OUTRO = 40,
  BOSS_3 = 41,
  JINGLE_BOSS_OVER_3 = 42,
  MOTHER_BOSS = 43,
  DOGMA_BOSS = 44,
  BEAST_BOSS = 45,
  JINGLE_MOTHER_OVER = 47,
  JINGLE_DOGMA_OVER = 48,
  JINGLE_BEAST_OVER = 49,
  PLANETARIUM = 50,
  SECRET_ROOM_ALT_ALT = 51,
  BOSS_OVER_TWISTED = 52,
  CREDITS = 60,
  TITLE = 61,
  TITLE_AFTERBIRTH = 62,
  TITLE_REPENTANCE = 63,
  JINGLE_GAME_START_ALT = 64,
  JINGLE_NIGHTMARE_ALT = 65,
  MOTHERS_SHADOW_INTRO = 66,
  DOGMA_INTRO = 67,
  STRANGE_DOOR_JINGLE = 68,
  DARK_CLOSET = 69,
  CREDITS_ALT = 70,
  CREDITS_ALT_FINAL = 71,
  JINGLE_BOSS = 81,
  JINGLE_BOSS_OVER_1 = 83,
  JINGLE_HOLY_ROOM_FIND = 84,
  JINGLE_SECRET_ROOM_FIND = 85,
  JINGLE_TREASURE_ROOM_ENTRY_0 = 87,
  JINGLE_TREASURE_ROOM_ENTRY_1 = 88,
  JINGLE_TREASURE_ROOM_ENTRY_2 = 89,
  JINGLE_TREASURE_ROOM_ENTRY_3 = 90,
  JINGLE_CHALLENGE_ENTRY = 91,
  JINGLE_CHALLENGE_OUTRO = 92,
  JINGLE_GAME_OVER = 93,
  JINGLE_DEVIL_ROOM_FIND = 94,
  JINGLE_GAME_START = 95,
  JINGLE_NIGHTMARE = 96,
  JINGLE_BOSS_OVER_2 = 97,
  JINGLE_HUSH_OVER = 98,
  INTRO_VOICEOVER = 100,
  EPILOGUE_VOICEOVER = 101,
  VOID = 102,
  VOID_BOSS = 103,
  DOWNPOUR = 104,
  MINES = 105,
  MAUSOLEUM = 106,
  CORPSE = 107,
  DROSS = 108,
  ASHPIT = 109,
  GEHENNA = 110,
  MORTIS = 111,
  ISAACS_HOUSE = 112,
  FINAL_VOICEOVER = 113,
  DOWNPOUR_REVERSE = 114,
  DROSS_REVERSE = 115,
  MINESHAFT_AMBIENT = 116,
  MINESHAFT_ESCAPE = 117,
  REVERSE_GENESIS = 118,
}

----
enums\NPCID.ts
/** EntityIDs which reference an NPC. */
export enum NPCID {
  FROWNING_GAPER = "10.0.0",
  GAPER = "10.1.0",
  FLAMING_GAPER = "10.2.0",
  ROTTEN_GAPER = "10.3.0",
  ROTTEN_GAPER_2 = "10.3.1",
  ROTTEN_GAPER_3 = "10.3.2",
  ROTTEN_GAPER_4 = "10.3.3",
  ROTTEN_GAPER_5 = "10.3.4",
  ROTTEN_GAPER_6 = "10.3.5",
  GUSHER = "11.0.0",
  PACER = "11.1.0",
  HORF = "12.0.0",
  FLY = "13.0.0",
  POOTER = "14.0.0",
  SUPER_POOTER = "14.1.0",
  TAINTED_POOTER = "14.2.0",
  CLOTTY = "15.0.0",
  CLOT = "15.1.0",
  I_BLOB = "15.2.0",
  GRILLED_CLOTTY = "15.3.0",
  MULLIGAN = "16.0.0",
  MULLIGOON = "16.1.0",
  MULLIBOOM = "16.2.0",
  SHOPKEEPER = "17.0.0",
  SECRET_ROOM_KEEPER = "17.1.0",
  ERROR_ROOM_KEEPER = "17.2.0",
  SPECIAL_SHOPKEEPER = "17.3.0",
  SPECIAL_SECRET_ROOM_KEEPER = "17.4.0",
  ATTACK_FLY = "18.0.0",
  LARRY_JR = "19.0.0",
  LARRY_JR_GREEN = "19.0.1",
  LARRY_JR_BLUE = "19.0.2",
  THE_HOLLOW = "19.1.0",
  THE_HOLLOW_GREEN = "19.1.1",
  THE_HOLLOW_BLACK = "19.1.2",
  THE_HOLLOW_YELLOW = "19.1.3",
  TUFF_TWIN = "19.2.0",
  THE_SHELL = "19.3.0",
  MONSTRO = "20.0.0",
  MONSTRO_RED = "20.0.1",
  MONSTRO_GREY = "20.0.2",
  MAGGOT = "21.0.0",
  HIVE = "22.0.0",
  DROWNED_HIVE = "22.1.0",
  HOLY_MULLIGAN = "22.2.0",
  TAINTED_MULLIGAN = "22.3.0",
  CHARGER = "23.0.0",
  MY_SHADOW = "23.0.1",
  DROWNED_CHARGER = "23.1.0",
  DANK_CHARGER = "23.2.0",
  CARRION_PRINCESS = "23.3.0",
  GLOBIN = "24.0.0",
  GAZING_GLOBIN = "24.1.0",
  DANK_GLOBIN = "24.2.0",
  CURSED_GLOBIN = "24.3.0",
  BOOM_FLY = "25.0.0",
  RED_BOOM_FLY = "25.1.0",
  DROWNED_BOOM_FLY = "25.2.0",
  DRAGON_FLY = "25.3.0",
  DRAGON_FLY_X = "25.3.1",
  BONE_FLY = "25.4.0",
  SICK_BOOM_FLY = "25.5.0",
  TAINTED_BOOM_FLY = "25.6.0",
  MAW = "26.0.0",
  RED_MAW = "26.1.0",
  PSYCHIC_MAW = "26.2.0",
  HOST = "27.0.0",
  RED_HOST = "27.1.0",
  HARD_HOST = "27.3.0",
  CHUB = "28.0.0",
  CHUB_BLUE = "28.0.1",
  CHUB_ORANGE = "28.0.2",
  CHAD = "28.1.0",
  THE_CARRION_QUEEN = "28.2.0",
  THE_CARRION_QUEEN_PINK = "28.2.1",
  HOPPER = "29.0.0",
  TRITE = "29.1.0",
  EGGY = "29.2.0",
  TAINTED_HOPPER = "29.3.0",
  BOIL = "30.0.0",
  BOIL_BLUE = "30.0.1",
  GUT = "30.1.0",
  SACK = "30.2.0",
  SPITTY = "31.0.0",
  TAINTED_SPITTY = "31.1.0",
  BRAIN = "32.0.0",
  FIRE_PLACE = "33.0.0",
  RED_FIRE_PLACE = "33.1.0",
  BLUE_FIRE_PLACE = "33.2.0",
  PURPLE_FIRE_PLACE = "33.3.0",
  WHITE_FIRE_PLACE = "33.4.0",
  MOVEABLE_FIREPLACE = "33.10.0",
  COAL = "33.11.0",
  COAL_2 = "33.11.1",
  COAL_3 = "33.11.2",
  COAL_4 = "33.11.3",
  MOVEABLE_BLUE_FIREPLACE = "33.12.0",
  MOVEABLE_PURPLE_FIREPLACE = "33.13.0",
  LEAPER = "34.0.0",
  STICKY_LEAPER = "34.1.0",
  MR_MAW = "35.0.0",
  MR_MAW_HEAD = "35.1.0",
  MR_RED_MAW = "35.2.0",
  MR_RED_MAW_HEAD = "35.3.0",
  MR_MAW_NECK = "35.10.0",
  GURDY = "36.0.0",
  GURDY_GREEN = "36.0.1",
  BABY = "38.0.0",
  ANGELIC_BABY = "38.1.0",
  ANGELIC_BABY_SMALL = "38.1.1",
  ULTRA_PRIDE_BABY = "38.2.0",
  WRINKLY_BABY = "38.3.0",
  VIS = "39.0.0",
  DOUBLE_VIS = "39.1.0",
  CHUBBER = "39.2.0",
  SCARRED_DOUBLE_VIS = "39.3.0",
  CHUBBER_PROJECTILE = "39.22.0",
  GUTS = "40.0.0",
  SCARRED_GUTS = "40.1.0",
  SLOG = "40.2.0",
  KNIGHT = "41.0.0",
  SELFLESS_KNIGHT = "41.1.0",
  LOOSE_KNIGHT = "41.2.0",
  BRAINLESS_KNIGHT = "41.3.0",
  BLACK_KNIGHT = "41.4.0",
  STONE_GRIMACE = "42.0.0",
  VOMIT_GRIMACE = "42.1.0",
  TRIPLE_GRIMACE = "42.2.0",
  MONSTRO_II = "43.0.0",
  MONSTRO_II_RED = "43.0.1",
  GISH = "43.1.0",
  POKY = "44.0.0",
  SLIDE = "44.1.0",
  MOM = "45.0.0",
  MOM_BLUE = "45.0.1",
  MOM_RED = "45.0.2",
  MOM_STOMP = "45.10.0",
  MOM_STOMP_BLUE = "45.10.1",
  MOM_STOMP_RED = "45.10.2",
  SLOTH = "46.0.0",
  SUPER_SLOTH = "46.1.0",
  ULTRA_PRIDE = "46.2.0",
  LUST = "47.0.0",
  SUPER_LUST = "47.1.0",
  WRATH = "48.0.0",
  SUPER_WRATH = "48.1.0",
  GLUTTONY = "49.0.0",
  SUPER_GLUTTONY = "49.1.0",
  GREED = "50.0.0",
  SUPER_GREED = "50.1.0",
  ENVY = "51.0.0",
  SUPER_ENVY = "51.1.0",
  ENVY_BIG = "51.10.0",
  SUPER_ENVY_BIG = "51.11.0",
  ENVY_MEDIUM = "51.20.0",
  SUPER_ENVY_MEDIUM = "51.21.0",
  ENVY_SMALL = "51.30.0",
  SUPER_ENVY_SMALL = "51.31.0",
  PRIDE = "52.0.0",
  SUPER_PRIDE = "52.1.0",
  DOPLE = "53.0.0",
  EVIL_TWIN = "53.1.0",
  FLAMING_HOPPER = "54.0.0",
  LEECH = "55.0.0",
  KAMIKAZE_LEECH = "55.1.0",
  HOLY_LEECH = "55.2.0",
  LUMP = "56.0.0",
  MEMBRAIN = "57.0.0",
  MAMA_GUTS = "57.1.0",
  DEAD_MEAT = "57.2.0",
  PARA_BITE = "58.0.0",
  SCARRED_PARA_BITE = "58.1.0",
  FRED = "59.0.0",
  EYE = "60.0.0",
  BLOODSHOT_EYE = "60.1.0",
  HOLY_EYE = "60.2.0",
  SUCKER = "61.0.0",
  SPIT = "61.1.0",
  SOUL_SUCKER = "61.2.0",
  INK = "61.3.0",
  MAMA_FLY = "61.4.0",
  BULB = "61.5.0",
  BLOODFLY = "61.6.0",
  TAINTED_SUCKER = "61.7.0",
  PIN = "62.0.0",
  PIN_GREY = "62.0.1",
  SCOLEX = "62.1.0",
  THE_FRAIL = "62.2.0",
  THE_FRAIL_BLACK = "62.2.1",
  WORMWOOD = "62.3.0",
  FAMINE = "63.0.0",
  FAMINE_BLUE = "63.0.1",
  PESTILENCE = "64.0.0",
  PESTILENCE_GREY = "64.0.1",
  WAR = "65.0.0",
  WAR_GREY = "65.0.1",
  CONQUEST = "65.1.0",
  WAR_WITHOUT_HORSE = "65.10.0",
  WAR_WITHOUT_HORSE_GREY = "65.10.1",
  DEATH = "66.0.0",
  DEATH_BLACK = "66.0.1",
  DEATH_SCYTHE = "66.10.0",
  DEATH_SCYTHE_BLACK = "66.10.1",
  DEATH_HORSE = "66.20.0",
  DEATH_HORSE_BLACK = "66.20.1",
  DEATH_WITHOUT_HORSE = "66.30.0",
  DEATH_WITHOUT_HORSE_BLACK = "66.30.1",
  THE_DUKE_OF_FLIES = "67.0.0",
  THE_DUKE_OF_FLIES_GREEN = "67.0.1",
  THE_DUKE_OF_FLIES_ORANGE = "67.0.2",
  THE_HUSK = "67.1.0",
  THE_HUSK_BLACK = "67.1.1",
  THE_HUSK_RED = "67.1.2",
  PEEP = "68.0.0",
  PEEP_YELLOW = "68.0.1",
  PEEP_CYAN = "68.0.2",
  THE_BLOAT = "68.1.0",
  THE_BLOAT_GREEN = "68.1.1",
  PEEP_EYE = "68.10.0",
  PEEP_EYE_YELLOW = "68.10.1",
  PEEP_EYE_CYAN = "68.10.2",
  BLOAT_EYE = "68.11.0",
  BLOAT_EYE_GREEN = "68.11.1",
  LOKI = "69.0.0",
  LOKII = "69.1.0",
  FISTULA = "71.0.0",
  FISTULA_GREY = "71.0.1",
  TERATOMA = "71.1.0",
  FISTULA_MEDIUM = "72.0.0",
  FISTULA_MEDIUM_GREY = "72.0.1",
  TERATOMA_MEDIUM = "72.1.0",
  FISTULA_SMALL = "73.0.0",
  FISTULA_SMALL_GREY = "73.0.1",
  TERATOMA_SMALL = "73.1.0",
  BLASTOCYST = "74.0.0",
  BLASTOCYST_MEDIUM = "75.0.0",
  BLASTOCYST_SMALL = "76.0.0",
  EMBRYO = "77.0.0",
  MOMS_HEART = "78.0.0",
  IT_LIVES = "78.1.0",
  MOMS_GUTS = "78.10.0",
  GEMINI = "79.0.0",
  GEMINI_GREEN = "79.0.1",
  GEMINI_BLUE = "79.0.2",
  STEVEN = "79.1.0",
  THE_BLIGHTED_OVUM = "79.2.0",
  GEMINI_BABY = "79.10.0",
  GEMINI_BABY_GREEN = "79.10.1",
  GEMINI_BABY_BLUE = "79.10.2",
  STEVEN_BABY = "79.11.0",
  THE_BLIGHTED_OVUM_BABY = "79.12.0",
  UMBILICAL_CORD = "79.20.0",
  UMBILICAL_CORD_GREEN = "79.20.1",
  UMBILICAL_CORD_BLUE = "79.20.2",
  MOTER = "80.0.0",
  THE_FALLEN = "81.0.0",
  KRAMPUS = "81.1.0",
  HEADLESS_HORSEMAN = "82.0.0",
  HEADLESS_HORSEMAN_HEAD = "83.0.0",
  SATAN = "84.0.0",
  SATAN_STOMP = "84.10.0",
  SPIDER = "85.0.0",
  KEEPER = "86.0.0",
  GURGLE = "87.0.0",
  CRACKLE = "87.1.0",
  WALKING_BOIL = "88.0.0",
  WALKING_GUT = "88.1.0",
  WALKING_SACK = "88.2.0",
  BUTTLICKER = "89.0.0",
  HANGER = "90.0.0",
  SWARMER = "91.0.0",
  HEART = "92.0.0",
  HALF_HEART = "92.1.0",
  HALF_HEART_2 = "92.1.1",
  MASK = "93.0.0",
  MASK_II = "93.1.0",
  BIG_SPIDER = "94.0.0",
  ETERNAL_FLY = "96.0.0",
  MASK_OF_INFAMY = "97.0.0",
  MASK_OF_INFAMY_BLACK = "97.0.1",
  HEART_OF_INFAMY = "98.0.0",
  HEART_OF_INFAMY_BLACK = "98.0.1",
  GURDY_JR = "99.0.0",
  GURDY_JR_BLUE = "99.0.1",
  GURDY_JR_YELLOW = "99.0.2",
  WIDOW = "100.0.0",
  WIDOW_BLACK = "100.0.1",
  WIDOW_PINK = "100.0.2",
  THE_WRETCHED = "100.1.0",
  DADDY_LONG_LEGS = "101.0.0",
  TRIACHNID = "101.1.0",
  ISAAC = "102.0.0",
  BLUE_BABY = "102.1.0",
  BLUE_BABY_HUSH = "102.2.0",
  STONE_EYE = "201.0.0",
  CONSTANT_STONE_SHOOTER_LEFT = "202.0.0",
  CONSTANT_STONE_SHOOTER_UP = "202.0.1",
  CONSTANT_STONE_SHOOTER_RIGHT = "202.0.2",
  CONSTANT_STONE_SHOOTER_DOWN = "202.0.3",
  CROSS_STONE_SHOOTER = "202.10.0",
  CROSS_STONE_SHOOTER_2 = "202.10.1",
  CROSS_STONE_SHOOTER_ALWAYS_ON = "202.11.0",
  CROSS_STONE_SHOOTER_ALWAYS_ON_2 = "202.11.1",
  BRIMSTONE_HEAD = "203.0.0",
  MOBILE_HOST = "204.0.0",
  NEST = "205.0.0",
  BABY_LONG_LEGS = "206.0.0",
  SMALL_BABY_LONG_LEGS = "206.1.0",
  CRAZY_LONG_LEGS = "207.0.0",
  SMALL_CRAZY_LONG_LEGS = "207.1.0",
  FATTY = "208.0.0",
  PALE_FATTY = "208.1.0",
  FLAMING_FATTY = "208.2.0",
  FAT_SACK = "209.0.0",
  BLUBBER = "210.0.0",
  HALF_SACK = "211.0.0",
  DEATHS_HEAD = "212.0.0",
  DANK_DEATHS_HEAD = "212.1.0",
  CURSED_DEATHS_HEAD = "212.2.0",
  BRIMSTONE_DEATHS_HEAD = "212.3.0",
  REDSKULL = "212.4.0",
  MOMS_HAND = "213.0.0",
  LEVEL_2_FLY = "214.0.0",
  LEVEL_2_SPIDER = "215.0.0",
  SWINGER = "216.0.0",
  SWINGER_HEAD = "216.1.0",
  SWINGER_NECK = "216.10.0",
  DIP = "217.0.0",
  CORN = "217.1.0",
  BROWNIE_CORN = "217.2.0",
  BIG_CORN = "217.3.0",
  WALL_HUGGER = "218.0.0",
  WIZOOB = "219.0.0",
  SQUIRT = "220.0.0",
  DANK_SQUIRT = "220.1.0",
  COD_WORM = "221.0.0",
  RING_FLY = "222.0.0",
  DINGA = "223.0.0",
  OOB = "224.0.0",
  BLACK_MAW = "225.0.0",
  SKINNY = "226.0.0",
  ROTTY = "226.1.0",
  CRISPY = "226.2.0",
  BONY = "227.0.0",
  HOLY_BONY = "227.1.0",
  HOMUNCULUS = "228.0.0",
  HOMUNCULUS_CORD = "228.10.0",
  TUMOR = "229.0.0",
  PLANETOID = "229.1.0",
  CAMILLO_JR = "230.0.0",
  NERVE_ENDING = "231.0.0",
  NERVE_ENDING_2 = "231.1.0",
  ONE_TOOTH = "234.0.0",
  GAPING_MAW = "235.0.0",
  BROKEN_GAPING_MAW = "236.0.0",
  GURGLING = "237.0.0",
  GURGLING_BOSS = "237.1.0",
  GURGLING_BOSS_YELLOW = "237.1.1",
  GURGLING_BOSS_BLACK = "237.1.2",
  TURDLING = "237.2.0",
  SPLASHER = "238.0.0",
  GRUB = "239.0.0",
  CORPSE_EATER = "239.100.0",
  CARRION_RIDER = "239.101.0",
  WALL_CREEP = "240.0.0",
  SOY_CREEP = "240.1.0",
  RAG_CREEP = "240.2.0",
  TAINTED_SOY_CREEP = "240.3.0",
  RAGE_CREEP = "241.0.0",
  SPLIT_RAGE_CREEP = "241.1.0",
  BLIND_CREEP = "242.0.0",
  CONJOINED_SPITTY = "243.0.0",
  ROUND_WORM = "244.0.0",
  TUBE_WORM = "244.1.0",
  TAINTED_ROUND_WORM = "244.2.0",
  TAINTED_ROUND_WORM_BUTT = "244.2.1",
  TAINTED_TUBE_WORM = "244.3.0",
  POOP = "245.0.0",
  RAGLING = "246.0.0",
  RAG_MANS_RAGLING = "246.1.0",
  RAG_MANS_RAGLING_RED = "246.1.1",
  RAG_MANS_RAGLING_BLACK = "246.1.2",
  FLESH_MOBILE_HOST = "247.0.0",
  PSYCHIC_HORF = "248.0.0",
  FULL_FLY = "249.0.0",
  TICKING_SPIDER = "250.0.0",
  BEGOTTEN = "251.0.0",
  BEGOTTEN_CHAIN = "251.10.0",
  NULLS = "252.0.0",
  PSY_TUMOR = "253.0.0",
  FLOATING_KNIGHT = "254.0.0",
  NIGHT_CRAWLER = "255.0.0",
  DART_FLY = "256.0.0",
  CONJOINED_FATTY = "257.0.0",
  BLUE_CONJOINED_FATTY = "257.1.0",
  FAT_BAT = "258.0.0",
  IMP = "259.0.0",
  HAUNT = "260.0.0",
  HAUNT_BLACK = "260.0.1",
  HAUNT_PINK = "260.0.2",
  LIL_HAUNT = "260.10.0",
  DINGLE = "261.0.0",
  DINGLE_RED = "261.0.1",
  DINGLE_BLACK = "261.0.2",
  DANGLE = "261.1.0",
  MEGA_MAW = "262.0.0",
  MEGA_MAW_RED = "262.0.1",
  MEGA_MAW_BLACK = "262.0.2",
  THE_GATE = "263.0.0",
  THE_GATE_RED = "263.0.1",
  THE_GATE_BLACK = "263.0.2",
  MEGA_FATTY = "264.0.0",
  MEGA_FATTY_RED = "264.0.1",
  MEGA_FATTY_BROWN = "264.0.2",
  THE_CAGE = "265.0.0",
  THE_CAGE_GREEN = "265.0.1",
  THE_CAGE_PINK = "265.0.2",
  MAMA_GURDY = "266.0.0",
  MAMA_GURDY_LEFT_HAND = "266.1.0",
  MAMA_GURDY_RIGHT_HAND = "266.2.0",
  DARK_ONE = "267.0.0",
  THE_ADVERSARY = "268.0.0",
  POLYCEPHALUS = "269.0.0",
  POLYCEPHALUS_RED = "269.0.1",
  POLYCEPHALUS_PINK = "269.0.2",
  THE_PILE = "269.1.0",
  MR_FRED = "270.0.0",
  URIEL = "271.0.0",
  FALLEN_URIEL = "271.1.0",
  GABRIEL = "272.0.0",
  FALLEN_GABRIEL = "272.1.0",
  THE_LAMB = "273.0.0",
  LAMB_BODY = "273.10.0",
  MEGA_SATAN = "274.0.0",
  MEGA_SATANS_RIGHT_HAND = "274.1.0",
  MEGA_SATANS_LEFT_HAND = "274.2.0",
  MEGA_SATAN_2 = "275.0.0",
  MEGA_SATAN_2_RIGHT_HAND = "275.1.0",
  MEGA_SATAN_2_LEFT_HAND = "275.2.0",
  ROUNDY = "276.0.0",
  BLACK_BONY = "277.0.0",
  BLACK_GLOBIN = "278.0.0",
  BLACK_GLOBINS_HEAD = "279.0.0",
  BLACK_GLOBINS_BODY = "280.0.0",
  SWARM = "281.0.0",
  MEGA_CLOTTY = "282.0.0",
  BONE_KNIGHT = "283.0.0",
  CYCLOPIA = "284.0.0",
  RED_GHOST = "285.0.0",
  FLESH_DEATHS_HEAD = "286.0.0",
  MOMS_DEAD_HAND = "287.0.0",
  DUKIE = "288.0.0",
  ULCER = "289.0.0",
  MEATBALL = "290.0.0",
  PITFALL = "291.0.0",
  SUCTION_PITFALL = "291.1.0",
  TELEPORT_PITFALL = "291.2.0",
  MOVABLE_TNT = "292.0.0",
  MOVABLE_TNT_MINE_CRAFTER = "292.1.0",
  ULTRA_GREED_COIN_SPINNER = "293.0.0",
  ULTRA_GREED_COIN_KEY = "293.1.0",
  ULTRA_GREED_COIN_BOMB = "293.2.0",
  ULTRA_GREED_COIN_HEART = "293.3.0",
  ULTRA_GREED_DOOR = "294.0.0",
  CORN_MINE = "295.0.0",
  CORN_MINE_BLACK = "295.0.1",
  HUSH_FLY = "296.0.0",
  BLUE_GAPER = "297.0.0",
  BLUE_BOIL = "298.0.0",
  GREED_GAPER = "299.0.0",
  MUSHROOM = "300.0.0",
  POISON_MIND = "301.0.0",
  STONEY = "302.0.0",
  CROSS_STONEY = "302.10.0",
  BLISTER = "303.0.0",
  THE_THING = "304.0.0",
  MINISTRO = "305.0.0",
  PORTAL = "306.0.0",
  LIL_PORTAL = "306.1.0",
  TAR_BOY = "307.0.0",
  TAR_BOY_MOUTH = "307.0.1",
  FISTULOID = "308.0.0",
  GUSH = "309.0.0",
  LEPER = "310.0.0",
  LEPER_STAGE_2 = "310.0.1",
  LEPER_STAGE_3 = "310.0.2",
  LEPER_STAGE_4 = "310.0.3",
  LEPER_FLESH = "310.1.0",
  MR_MINE = "311.0.0",
  MR_MINE_NECK = "311.10.0",
  THE_STAIN = "401.0.0",
  THE_STAIN_GREY = "401.0.1",
  BROWNIE = "402.0.0",
  BROWNIE_BLACK = "402.0.1",
  THE_FORSAKEN = "403.0.0",
  THE_FORSAKEN_BLACK = "403.0.1",
  LITTLE_HORN = "404.0.0",
  LITTLE_HORN_ORANGE = "404.0.1",
  LITTLE_HORN_BLACK = "404.0.2",
  DARK_BALL = "404.1.0",
  DARK_BALL_ORANGE = "404.1.1",
  DARK_BALL_BLACK = "404.1.2",
  RAG_MAN = "405.0.0",
  RAG_MAN_RED = "405.0.1",
  RAG_MAN_BLACK = "405.0.2",
  RAG_MANS_HEAD = "405.1.0",
  RAG_MANS_HEAD_RED = "405.1.1",
  RAG_MANS_HEAD_BLACK = "405.1.2",
  ULTRA_GREED = "406.0.0",
  ULTRA_GREEDIER = "406.1.0",
  HUSH = "407.0.0",
  HUSH_SKINLESS = "408.0.0",
  RAG_MEGA = "409.0.0",
  PURPLE_BALL = "409.1.0",
  RAG_MEGA_REBIRTH_PILLAR = "409.2.0",
  SISTERS_VIS = "410.0.0",
  BIG_HORN = "411.0.0",
  SMALL_HOLE = "411.1.0",
  BIG_HOLE = "411.2.0",
  DELIRIUM = "412.0.0",
  THE_MATRIARCH = "413.0.0",
  BLOOD_PUPPY_SMALL = "802.0.0",
  BLOOD_PUPPY_LARGE = "802.1.0",
  BLIND_BAT = "803.0.0",
  QUAKE_GRIMACE_LEFT = "804.0.0",
  QUAKE_GRIMACE_UP = "804.0.1",
  QUAKE_GRIMACE_RIGHT = "804.0.2",
  QUAKE_GRIMACE_DOWN = "804.0.3",
  BISHOP = "805.0.0",
  BUBBLES = "806.0.0",
  WRAITH = "807.0.0",
  WILLO = "808.0.0",
  BOMB_GRIMACE = "809.0.0",
  SMALL_LEECH = "810.0.0",
  DEEP_GAPER = "811.0.0",
  DEEP_GAPER_2 = "811.0.1",
  DEEP_GAPER_3 = "811.0.2",
  DEEP_GAPER_4 = "811.0.3",
  DEEP_GAPER_5 = "811.0.4",
  DEEP_GAPER_6 = "811.0.5",
  DEEP_GAPER_7 = "811.0.6",
  SUB_HORF = "812.0.0",
  TAINTED_SUB_HORF = "812.1.0",
  BLURB = "813.0.0",
  STRIDER = "814.0.0",
  FISSURE = "815.0.0",
  POLTY = "816.0.0",
  KINETI = "816.1.0",
  PREY = "817.0.0",
  MULLIGHOUL = "817.1.0",
  ROCK_SPIDER = "818.0.0",
  ROCK_SPIDER_2 = "818.0.1",
  ROCK_SPIDER_3 = "818.0.2",
  ROCK_SPIDER_4 = "818.0.3",
  TINTED_ROCK_SPIDER = "818.1.0",
  TINTED_ROCK_SPIDER_2 = "818.1.1",
  TINTED_ROCK_SPIDER_3 = "818.1.2",
  TINTED_ROCK_SPIDER_4 = "818.1.3",
  COAL_SPIDER = "818.2.0",
  COAL_SPIDER_2 = "818.2.1",
  COAL_SPIDER_3 = "818.2.2",
  COAL_SPIDER_4 = "818.2.3",
  FLY_BOMB = "819.0.0",
  ETERNAL_FLY_BOMB = "819.1.0",
  DANNY = "820.0.0",
  COAL_BOY = "820.1.0",
  BLASTER = "821.0.0",
  BOUNCER = "822.0.0",
  QUAKEY = "823.0.0",
  GYRO = "824.0.0",
  GRILLED_GYRO = "824.1.0",
  FIRE_WORM = "825.0.0",
  HARDY = "826.0.0",
  FACELESS = "827.0.0",
  TAINTED_FACELESS = "827.1.0",
  NECRO = "828.0.0",
  MOLE = "829.0.0",
  TAINTED_MOLE = "829.1.0",
  BIG_BONY = "830.0.0",
  BIG_BONE = "830.10.0",
  GUTTED_FATTY = "831.0.0",
  GUTTED_FATTY_EYE = "831.10.0",
  FESTERING_GUTS = "831.20.0",
  EXORCIST = "832.0.0",
  FANATIC = "832.1.0",
  CANDLER = "833.0.0",
  WHIPPER = "834.0.0",
  SNAPPER = "834.1.0",
  FLAGELLANT = "834.2.0",
  PEEPING_FATTY = "835.0.0",
  PEEPING_FATTY_EYE = "835.10.0",
  VIS_VERSA = "836.0.0",
  HENRY = "837.0.0",
  LEVEL_2_WILLO = "838.0.0",
  STRIFER = "839.0.0",
  PON = "840.0.0",
  REVENANT = "841.0.0",
  QUAD_REVENANT = "841.1.0",
  NIGHTWATCH = "842.0.0",
  CANARY = "843.0.0",
  FOREIGNER = "843.1.0",
  BOMBGAGGER = "844.0.0",
  LEVEL_2_GAPER = "850.0.0",
  LEVEL_2_HORF = "850.1.0",
  LEVEL_2_GUSHER = "850.2.0",
  TWITCHY = "851.0.0",
  SPIKEBALL = "852.0.0",
  SMALL_MAGGOT = "853.0.0",
  ADULT_LEECH = "854.0.0",
  LEVEL_2_CHARGER = "855.0.0",
  ELLEECH = "855.1.0",
  GASBAG = "856.0.0",
  COHORT = "857.0.0",
  VESSEL = "858.0.0",
  FLOAST = "859.0.0",
  UNBORN = "860.0.0",
  PUSTULE = "861.0.0",
  CYST = "862.0.0",
  MORNINGSTAR = "863.0.0",
  MORNINGSTAR_2 = "863.0.1",
  MORNINGSTAR_3 = "863.0.2",
  MOCKULUS = "864.0.0",
  EVIS = "865.0.0",
  EVIS_GUTS = "865.10.0",
  DARK_ESAU = "866.0.0",
  DARKER_ESAU = "866.0.1",
  DARK_ESAUS_PIT = "866.1.0",
  MOTHERS_SHADOW = "867.0.0",
  ARMY_FLY = "868.0.0",
  MIGRAINE = "869.0.0",
  DRIP = "870.0.0",
  SPLURT = "871.0.0",
  CLOGGY = "872.0.0",
  FLY_TRAP = "873.0.0",
  GAS_DWARF = "874.0.0",
  POOT_MINE = "875.0.0",
  DUMP = "876.0.0",
  DUMP_HEAD = "876.1.0",
  GRUDGE = "877.0.0",
  BUTT_SLICKER = "878.0.0",
  BLOATY = "879.0.0",
  FLESH_MAIDEN = "880.0.0",
  NEEDLE = "881.0.0",
  PASTY = "881.1.0",
  DUST = "882.0.0",
  BABY_BEGOTTEN = "883.0.0",
  SWARM_SPIDER = "884.0.0",
  CULTIST = "885.0.0",
  BLOOD_CULTIST = "885.1.0",
  BONE_TRAP = "885.10.0",
  VIS_FATTY = "886.0.0",
  FETAL_DEMON = "886.1.0",
  DUSTY_DEATHS_HEAD = "887.0.0",
  SHADY = "888.0.0",
  CLICKETY_CLACK = "889.0.0",
  MAZE_ROAMER = "890.0.0",
  MAZE_ROAMER_2 = "890.0.1",
  GOAT = "891.0.0",
  BLACK_GOAT = "891.1.0",
  POOFER = "892.0.0",
  BALL_AND_CHAIN = "893.0.0",
  REAP_CREEP = "900.0.0",
  LIL_BLUB = "901.0.0",
  RAINMAKER = "902.0.0",
  THE_VISAGE = "903.0.0",
  VISAGE_MASK = "903.1.0",
  VISAGE_CHAIN = "903.10.0",
  VISAGE_PLASMA = "903.20.0",
  SIREN = "904.0.0",
  SIRENS_SKULL = "904.1.0",
  SIREN_HELPER_PROJECTILE = "904.10.0",
  THE_HERETIC = "905.0.0",
  HORNFEL = "906.0.0",
  HORNFEL_DECOY = "906.1.0",
  GREAT_GIDEON = "907.0.0",
  GREAT_GIDEON_DEFEATED = "907.0.1",
  BABY_PLUM = "908.0.0",
  THE_SCOURGE = "909.0.0",
  THE_SCOURGE_CHAIN = "909.10.0",
  CHIMERA = "910.0.0",
  CHIMERA_BODY = "910.1.0",
  CHIMERA_HEAD = "910.2.0",
  ROTGUT = "911.0.0",
  ROTGUT_MAGGOT = "911.1.0",
  ROTGUT_HEART = "911.2.0",
  MOTHER_PHASE_1 = "912.0.0",
  MOTHER_PHASE_2 = "912.0.1",
  MOTHER_LEFT_ARM = "912.0.2",
  MOTHER_RIGHT_ARM = "912.0.3",
  MOTHER_DISAPPEAR = "912.0.4",
  MOTHER_2 = "912.10.0",
  DEAD_ISAAC = "912.20.0",
  MOTHER_WORM = "912.30.0",
  MOTHER_BALL = "912.100.0",
  MOTHER_BALL_MEDIUM = "912.100.1",
  MOTHER_BALL_SMALL = "912.100.2",
  MIN_MIN = "913.0.0",
  CLOG = "914.0.0",
  SINGE = "915.0.0",
  SINGES_BALL = "915.1.0",
  BUMBINO = "916.0.0",
  COLOSTOMIA = "917.0.0",
  TURDLET = "918.0.0",
  RAGLICH = "919.0.0",
  RAGLICH_ARM = "919.1.0",
  HORNY_BOYS = "920.0.0",
  CLUTCH = "921.0.0",
  CLUTCH_ORBITAL = "921.1.0",
  DOGMA = "950.0.0",
  DOGMAS_TV = "950.1.0",
  DOGMA_ANGEL = "950.2.0",
  DOGMA_ANGEL_BABY = "950.10.0",
  THE_BEAST = "951.0.0",
  STALACTITE = "951.1.0",
  BEAST_ROCK_PROJECTILE = "951.2.0",
  BEAST_SOUL = "951.3.0",
  ULTRA_FAMINE = "951.10.0",
  ULTRA_FAMINE_FLY = "951.11.0",
  ULTRA_PESTILENCE = "951.20.0",
  ULTRA_PESTILENCE_FLY = "951.21.0",
  ULTRA_PESTILENCE_MAGGOT = "951.22.0",
  ULTRA_PESTILENCE_FLY_BALL = "951.23.0",
  ULTRA_WAR = "951.30.0",
  ULTRA_WAR_BOMB = "951.31.0",
  ULTRA_DEATH = "951.40.0",
  ULTRA_DEATH_SCYTHE = "951.41.0",
  ULTRA_DEATH_HEAD = "951.42.0",
  BACKGROUND_BEAST = "951.100.0",
  BACKGROUND_FAMINE = "951.101.0",
  BACKGROUND_PESTILENCE = "951.102.0",
  BACKGROUND_WAR = "951.103.0",
  BACKGROUND_DEATH = "951.104.0",
  GENERIC_PROP = "960.0.0",
  MOMS_DRESSER = "960.1.0",
  MOMS_VANITY = "960.2.0",
  COUCH = "960.3.0",
  TV = "960.4.0",
  FROZEN_ENEMY = "963.0.0",
  DUMMY = "964.0.0",
  MINECART = "965.0.0",
  SIREN_HELPER = "966.0.0",
  HORNFEL_DOOR = "967.0.0",
}

----
enums\NPCState.ts
export enum NPCState {
  INIT = 0,
  APPEAR = 1,
  APPEAR_CUSTOM = 2,
  IDLE = 3,
  MOVE = 4,
  SUICIDE = 5,
  JUMP = 6,
  STOMP = 7,
  ATTACK = 8,
  ATTACK_2 = 9,
  ATTACK_3 = 10,
  ATTACK_4 = 11,
  ATTACK_5 = 12,
  SUMMON = 13,
  SUMMON_2 = 14,
  SUMMON_3 = 15,
  SPECIAL = 16,
  UNIQUE_DEATH = 17,
  DEATH = 18,
}

----
enums\NullItemID.ts
export enum NullItemID {
  NULL = -1,
  EXPLOSIVE_DIARRHEA = 0,
  PUBERTY = 1,
  I_FOUND_PILLS = 2,
  LORD_OF_THE_FLIES = 3,
  STATUE = 4,
  GUPPY = 5,
  WIZARD = 6,
  MAGDALENE = 7,
  CAIN = 8,
  JUDAS = 9,
  EVE = 10,
  AZAZEL = 11,
  EDEN = 12,
  SAMSON = 13,
  BLINDFOLD = 14,
  BLANK_FACE = 15,
  CHRISTMAS = 16,
  PURITY_GLOW = 17,
  EMPTY_VESSEL = 18,
  MAW_MARK = 19,
  MUSHROOM = 20,
  ANGEL = 21,
  BOB = 22,
  DRUGS = 23,
  MOM = 24,
  BABY = 25,
  EVIL_ANGEL = 26,
  POOP = 27,
  RELAX = 28,
  OVERDOSE = 29,
  BOOMERANG = 30,
  MEGA_BLAST = 31,
  LAZARUS = 32,
  LAZARUS_2 = 33,
  LILITH = 34,
  IWATA = 35,
  APOLLYON = 36,
  BOOKWORM = 37,
  ADULTHOOD = 38,
  SPIDER_BABY = 39,
  BATWING_WINGS = 40,
  HUGE_GROWTH = 41,
  ERA_WALK = 42,
  SACRIFICIAL_ALTAR = 43,
  FORGOTTEN = 44,
  BRIMSTONE_2 = 45,
  HOLY_CARD = 46,
  KEEPER = 47,
  CAMO_BOOST = 48,
  LAZARUS_BOOST = 49,
  SPIN_TO_WIN = 50,
  BETHANY = 51,
  JACOB = 52,
  ESAU = 53,
  BLOOD_OATH = 54,
  INTRUDER = 55,
  SOL = 56,
  IT_HURTS = 57,
  MARS = 58,
  TOOTH_AND_NAIL = 59,
  REVERSE_MAGICIAN = 60,
  REVERSE_HIGH_PRIESTESS = 61,
  REVERSE_EMPRESS = 62,
  REVERSE_CHARIOT = 63,
  REVERSE_STRENGTH = 64,
  REVERSE_HANGED_MAN = 65,
  REVERSE_SUN = 66,
  REVERSE_DEVIL = 67,
  REVERSE_CHARIOT_ALT = 68,
  REVERSE_TEMPERANCE = 69,
  REVERSE_STARS = 70,
  WAVY_CAP_1 = 71,
  WAVY_CAP_2 = 72,
  WAVY_CAP_3 = 73,
  LUNA = 74,
  JUPITER_BODY = 75,
  JUPITER_BODY_ANGEL = 76,
  JUPITER_BODY_PONY = 77,
  JUPITER_BODY_WHITE_PONY = 78,
  ISAAC_B = 79,
  MAGDALENE_B = 80,
  CAIN_B = 81,
  JUDAS_B = 82,
  BLUE_BABY_B = 83,
  EVE_B = 84,
  SAMSON_B = 85,
  AZAZEL_B = 86,
  LAZARUS_B = 87,
  EDEN_B = 88,
  LOST_B = 89,
  LILITH_B = 90,
  KEEPER_B = 91,
  APOLLYON_B = 92,
  FORGOTTEN_B = 93,
  BETHANY_B = 94,
  JACOB_B = 95,
  AZAZELS_RAGE_1 = 96,
  AZAZELS_RAGE_2 = 97,
  AZAZELS_RAGE_3 = 98,
  AZAZELS_RAGE_4 = 99,
  ESAU_JR = 100,
  SPIRIT_SHACKLES_SOUL = 101,
  SPIRIT_SHACKLES_DISABLED = 102,
  BERSERK_SAMSON = 103,
  LAZARUS_2_B = 104,
  SOUL_B = 105,
  FORGOTTEN_BOMB = 106,
  EXTRA_BIG_FAN = 107,
  JACOB_2_B = 108,
  JACOBS_CURSE = 109,
  BLOODY_BABYLON = 110,
  DARK_ARTS = 111,
  LOST_CURSE = 112,
  LAZARUS_SOUL_REVIVE = 113,
  SOUL_MAGDALENE = 114,
  SOUL_BLUE_BABY = 115,
  MIRROR_DEATH = 116,
  HEMOPTYSIS = 117,
  I_FOUND_HORSE_PILLS = 118,
  HORSE_PUBERTY = 119,
  SOUL_FORGOTTEN = 120,
  SOUL_JACOB = 121,
  BETHANY_B_BIRTHRIGHT = 122,
  JUDAS_BIRTHRIGHT = 123,
  JUDAS_BIRTHRIGHT_TIMED = 124,
  DOUBLE_GUPPYS_EYE = 125,
  DOUBLE_GLASS_EYE = 126,
  HEMOPTYSIS_BOOST = 127,
  SOUL_JUDAS = 128,
  JUDAS_BIRTHRIGHT_STAGE = 129,
  JUDAS_BIRTHRIGHT_PERMANENT = 130,
  ESAU_JR_FAMILIAR = 131,
}

----
enums\PickupPrice.ts
export enum PickupPrice {
  /** `Pickup.Price` will be equal to 0 for non-purchasable pickups. */
  NULL = 0,

  ONE_HEART = -1,
  TWO_HEARTS = -2,
  THREE_SOUL_HEARTS = -3,
  ONE_HEART_AND_TWO_SOUL_HEARTS = -4,
  SPIKES = -5,

  /**
   * The price when you have the Your Soul trinket. (The collectible will be free and the trinket
   * will be consumed.)
   */
  YOUR_SOUL = -6,

  ONE_SOUL_HEART = -7,
  TWO_SOUL_HEARTS = -8,
  ONE_HEART_AND_ONE_SOUL_HEART = -9,
  FREE = -1000,
}

----
enums\PillEffect.ts
/**
 * This enum is contiguous. (Every value is satisfied between 0 and 49, inclusive.)
 *
 * Note that the vanilla enum includes `NULL` (-1). Since it should be impossible to ever retrieve
 * this value from the API, it is removed from the IsaacScript enum.
 */
export enum PillEffect {
  // NULL = -1 // Intentionally removed.
  BAD_GAS = 0,
  BAD_TRIP = 1,
  BALLS_OF_STEEL = 2,
  BOMBS_ARE_KEYS = 3,
  EXPLOSIVE_DIARRHEA = 4,
  FULL_HEALTH = 5,
  HEALTH_DOWN = 6,
  HEALTH_UP = 7,
  I_FOUND_PILLS = 8,
  PUBERTY = 9,
  PRETTY_FLY = 10,
  RANGE_DOWN = 11,
  RANGE_UP = 12,
  SPEED_DOWN = 13,
  SPEED_UP = 14,
  TEARS_DOWN = 15,
  TEARS_UP = 16,
  LUCK_DOWN = 17,
  LUCK_UP = 18,
  TELEPILLS = 19,
  FORTY_EIGHT_HOUR_ENERGY = 20,
  HEMATEMESIS = 21,
  PARALYSIS = 22,
  I_CAN_SEE_FOREVER = 23,
  PHEROMONES = 24,
  AMNESIA = 25,
  LEMON_PARTY = 26,
  R_U_A_WIZARD = 27,
  PERCS = 28,
  ADDICTED = 29,
  RELAX = 30,
  QUESTION_MARKS = 31,
  ONE_MAKES_YOU_LARGER = 32,
  ONE_MAKES_YOU_SMALL = 33,
  INFESTED_EXCLAMATION = 34,
  INFESTED_QUESTION = 35,
  POWER = 36,
  RETRO_VISION = 37,
  FRIENDS_TILL_THE_END = 38,
  X_LAX = 39,
  SOMETHINGS_WRONG = 40,
  IM_DROWSY = 41,
  IM_EXCITED = 42,
  GULP = 43,
  HORF = 44,
  FEELS_LIKE_IM_WALKING_ON_SUNSHINE = 45,
  VURP = 46,
  SHOT_SPEED_DOWN = 47,
  SHOT_SPEED_UP = 48,
  EXPERIMENTAL = 49,
}

----
enums\PlayerForm.ts
/** The possible transformations that the player can have. */
export enum PlayerForm {
  GUPPY = 0,
  BEELZEBUB = 1,
  FUN_GUY = 2,
  SERAPHIM = 3,
  BOB = 4,
  SPUN = 5,
  YES_MOTHER = 6,
  CONJOINED = 7,
  LEVIATHAN = 8,
  OH_CRAP = 9,
  BOOKWORM = 10,
  ADULT = 11,
  SPIDER_BABY = 12,
  STOMPY = 13,
}

----
enums\PlayerItemAnimation.ts
/**
 * These are a subset of animations from the "001.000_player.anm2" file.
 *
 * These are listed in order of their appearance from top to bottom.
 */
export enum PlayerItemAnimation {
  PICKUP = "Pickup",
  LIFT_ITEM = "LiftItem",
  HIDE_ITEM = "HideItem",
  USE_ITEM = "UseItem",
  PICKUP_WALK_DOWN = "PickupWalkDown",
  PICKUP_WALK_LEFT = "PickupWalkLeft",
  PICKUP_WALK_UP = "PickupWalkUp",
  PICKUP_WALK_RIGHT = "PickupWalkRight",
}

----
enums\PlayerSpriteLayer.ts
/** Corresponds to "resources/gfx/001.000_player.anm2". */
export enum PlayerSpriteLayer {
  GLOW = 0,
  BODY = 1,
  BODY_0 = 2,
  BODY_1 = 3,
  HEAD = 4,
  HEAD_0 = 5,
  HEAD_1 = 6,
  HEAD_2 = 7,
  HEAD_3 = 8,
  HEAD_4 = 9,
  HEAD_5 = 10,
  TOP_0 = 11,
  EXTRA = 12,
  GHOST = 13,
  BACK = 14,
}

----
enums\PocketItemSlot.ts
export enum PocketItemSlot {
  SLOT_1 = 0,
  SLOT_2 = 1,
  SLOT_3 = 2,
  SLOT_4 = 3,
}

----
enums\PoopSpellType.ts
export enum PoopSpellType {
  NONE = 0,
  POOP = 1,
  CORNY = 2,
  BURNING = 3,
  STONE = 4,
  STINKY = 5,
  BLACK = 6,
  HOLY = 7,
  LIQUID = 8,
  FART = 9,
  BOMB = 10,
  DIARRHEA = 11,
}

----
enums\ProjectilesMode.ts
export enum ProjectilesMode {
  ONE_PROJECTILE = 0,

  /** Uses params.Spread. */
  TWO_PROJECTILES = 1,

  /** Uses params.Spread. */
  THREE_PROJECTILES = 2,

  /** Uses params.Spread. */
  THREE_PROJECTILES_SPREAD = 3,

  /** Uses params.Spread. */
  FOUR_PROJECTILES = 4,

  /** Uses params.Spread. */
  FIVE_PROJECTILES = 5,

  /** Uses velocity.X as speed. */
  FOUR_PROJECTILES_PLUS_PATTERN = 6,

  /** Uses velocity.X as speed. */
  FOUR_PROJECTILES_X_PATTERN = 7,

  /** Uses velocity.X as speed. */
  EIGHT_PROJECTILES_STAR_PATTERN = 8,

  /**
   * - Uses `velocity.X` as speed.
   * - Uses `velocity.Y` as N.
   * - To fire in an arc, use params.FireDirectionLimit and params.DotProductLimit.
   */
  N_PROJECTILES_IN_CIRCLE = 9,
}

----
enums\RenderMode.ts
export enum RenderMode {
  /** Currently not rendering room entities. */
  NULL = 0,

  /** Rendering room entities normally (in a dry room). */
  NORMAL = 1,

  SKIP = 2,

  /** Rendering room entities above the water in a flooded room. */
  WATER_ABOVE = 3,

  /** Rendering room entities below the water in a flooded room. */
  WATER_REFRACT = 4,

  /** Rendering the reflection of room entities in a flooded room. */
  WATER_REFLECT = 5,
}

----
enums\RoomDescriptorDisplayType.ts
/**
 * Matches the `RoomDescriptor.DISPLAY_*` members of the `RoomDescriptor` class. In IsaacScript, we
 * reimplement this as an enum instead, since it is cleaner.
 */
export enum RoomDescriptorDisplayType {
  NONE = 0,
  BOX = 1,
  LOCK = 2,
  ICON = 4,
  ALL = 5,
}

----
enums\RoomDifficulty.ts
/**
 * Each room has an arbitrarily set difficulty of 0, 1, 2, 5, or 10. The floor generation algorithm
 * attempts to generates floors with a combined difficulty of a certain value.
 */
export enum RoomDifficulty {
  /**
   * Rooms set to difficulty 0 will never be generated by the floor generation algorithm and are
   * effectively removed from the game.
   */
  ALWAYS_EXCLUDED = 0,

  VERY_EASY = 1,
  EASY = 2,
  MEDIUM = 5,
  HARD = 10,
}

----
enums\RoomShape.ts
export enum RoomShape {
  /**
   * A "normal" room.
   *
   * The "SHAPE_" prefix is necessary because enums cannot start with a number.
   */
  SHAPE_1x1 = 1, // eslint-disable-line @typescript-eslint/naming-convention,isaacscript/enum-member-number-separation

  /** Narrow 1x1 horizontal. */
  IH = 2,

  /** Narrow 1x1 vertical. */
  IV = 3,

  /**
   * 2x1 vertical.
   *
   * The "SHAPE_" prefix is necessary because enums cannot start with a number.
   */
  SHAPE_1x2 = 4, // eslint-disable-line @typescript-eslint/naming-convention,isaacscript/enum-member-number-separation

  /** Narrow 2x1 vertical. */
  IIV = 5,

  /**
   * 2x1 horizontal.
   *
   * The "SHAPE_" prefix is necessary because enums cannot start with a number.
   */
  SHAPE_2x1 = 6, // eslint-disable-line @typescript-eslint/naming-convention,isaacscript/enum-member-number-separation

  /** Narrow 2x1 horizontal. */
  IIH = 7,

  /**
   * The biggest room type.
   *
   * The "SHAPE_" prefix is necessary because enums cannot start with a number.
   */
  SHAPE_2x2 = 8, // eslint-disable-line @typescript-eslint/naming-convention,isaacscript/enum-member-number-separation

  /** Looks like a "⅃" with a gap in the top-left-hand corner. */
  LTL = 9,

  /** Looks like an "L" with a gap in the top-right-hand corner. */
  LTR = 10,

  /** Looks like a "⅂" with a gap in the bottom-left-hand corner. */
  LBL = 11,

  /** Looks like a "Г" with a gap in the bottom-right-hand corner. */
  LBR = 12,
}

----
enums\RoomTransitionAnim.ts
export enum RoomTransitionAnim {
  /**
   * Mostly from using doors.
   *
   * Will play the correct walk animation regardless of the direction you use, as long as the
   * direction is in the same axis as the room you are traveling to.
   *
   * For example, if the room is on the left, it will play the correct animation whether you use
   * `Direction.LEFT` or `Direction.RIGHT`. If you use the wrong direction, it will just fade to the
   * next room (not fade to black, just fade). If you use `Direction.NO_DIRECTION`, it will perform
   * a fade to black.
   */
  WALK = 0,

  /**
   * The fade-in / fade-out used for Mom's Hand. If the direction is `Direction.NO_DIRECTION`, the
   * fade will be shorter.
   */
  FADE = 1,

  /**
   * The fade + pixelation effect used for secret item dungeon. (Direction does not affect the
   * pixelation length.)
   */
  PIXELATION = 2,

  /**
   * Will play the teleport animation and sound, then the walk animation using the specified
   * direction. If `Direction.NO_DIRECTION` is used, it will perform a fade to white.
   */
  TELEPORT = 3,

  /**
   * For Curse of the Maze.
   *
   * This is like `RoomTransitionAnim.WALK`, but better, since it will always play the walk
   * animation that you provide. Like `RoomTransitionAnim.WALK`, if you use
   * `Direction.NO_DIRECTION`, it will perform a fade to black.
   */
  MAZE = 4,

  /** Works like `RoomTransitionAnim.MAZE` with respect to the direction used. */
  ANKH = 5,

  /** Works like `RoomTransitionAnim.MAZE` with respect to the direction used. */
  DEAD_CAT = 6,

  /**
   * Plays `SoundEffect.ONE_UP` upon entering the room.
   *
   * Works like `RoomTransitionAnim.MAZE` with respect to the direction used.
   */
  ONE_UP = 7,

  /** Works like `RoomTransitionAnim.MAZE` with respect to the direction used. */
  COLLAR = 8,

  /** Works like `RoomTransitionAnim.MAZE` with respect to the direction used. */
  JUDAS_SHADOW = 9,

  /** Works like `RoomTransitionAnim.MAZE` with respect to the direction used. */
  LAZARUS = 10,

  /**
   * For the Ventricle Razor teleport.
   *
   * Makes the player invisible during the transition. If used to change into the same room, the
   * player's visibility won't be restored. If the direction is `Direction.NO_DIRECTION`, the fade
   * will be shorter.
   */
  WOMB_TELEPORT = 11,

  /**
   * For the Glowing Hourglass teleport.
   *
   * Using this animation will ignore the room index and the direction provided.
   */
  GLOWING_HOURGLASS = 12,

  /** Works like `RoomTransitionAnim.MAZE` with respect to the direction used. */
  D7 = 13,

  /** Works like `RoomTransitionAnim.MAZE` with respect to the direction used. */
  MISSING_POSTER = 14,

  /** No transition; goes directly to the boss intro cutscene (for the Backasswards challenge). */
  BOSS_FORCED = 15,

  /**
   * For a Card Reading teleport.
   *
   * Works like `RoomTransitionAnim.WOMB_TELEPORT`.
   */
  PORTAL_TELEPORT = 16,

  /**
   * For the Forgotten's Birthright effect.
   *
   * Works like `RoomTransitionAnim.FADE`.
   */
  FORGOTTEN_TELEPORT = 17,

  /**
   * Plays the mirror exit sound and a fade to white animation.
   *
   * If the direction is `Direction.NO_DIRECTION`, the fade will be shorter.
   */
  FADE_MIRROR = 18,

  /** Works like `RoomTransitionAnim.FADE`. */
  MINECART = 19,

  /**
   * The player lies down, the screen fades to black, and the player lies down and gets up.
   *
   * Ignores the direction, but using `Direction.NO_DIRECTION` will make the fade shorter.
   *
   * The game is paused during the lying down and getting up animation.
   */
  DEATH_CERTIFICATE = 20,
}

----
enums\RoomType.ts
/** This enum is contiguous. (Every value is satisfied between 1 and 29, inclusive.) */
export enum RoomType {
  // The value of "NULL" is removed, since there are no vanilla rooms with this value and it should
  // be impossible to retrieve this value from the API.

  DEFAULT = 1,
  SHOP = 2,
  ERROR = 3,
  TREASURE = 4,
  BOSS = 5,
  MINI_BOSS = 6,
  SECRET = 7,
  SUPER_SECRET = 8,
  ARCADE = 9,
  CURSE = 10,

  /** This includes both normal Challenge Rooms and Boss Challenge Rooms. */
  CHALLENGE = 11,

  LIBRARY = 12,
  SACRIFICE = 13,
  DEVIL = 14,
  ANGEL = 15,

  /** This is the room type of a crawl space. */
  DUNGEON = 16,

  BOSS_RUSH = 17,
  CLEAN_BEDROOM = 18,
  DIRTY_BEDROOM = 19,
  VAULT = 20,
  DICE = 21,
  BLACK_MARKET = 22,
  GREED_EXIT = 23,
  PLANETARIUM = 24,

  /** The Mausoleum teleporter entrance. Currently unused. */
  TELEPORTER = 25,

  /** The Mausoleum teleporter exit. Currently unused. */
  TELEPORTER_EXIT = 26,

  /**
   * The room with a trapdoor to the Repentance floors. This also includes the "strange room" on
   * Depths 2.
   */
  SECRET_EXIT = 27,

  /** The Blue Womb rooms spawned by the Blue Key. */
  BLUE = 28,

  ULTRA_SECRET = 29,
}

----
enums\SeedEffect.ts
export enum SeedEffect {
  NORMAL = 0,
  MOVEMENT_PITCH = 1,
  HEALTH_PITCH = 2,
  CAMO_ISAAC = 3,
  CAMO_ENEMIES = 4,
  CAMO_PICKUPS = 5,
  CAMO_EVERYTHING = 6,
  FART_SOUNDS = 7,
  OLD_TV = 8,
  DYSLEXIA = 9,
  NO_HUD = 10,
  PICKUPS_SLIDE = 11,
  CONTROLS_REVERSED = 12,
  ALL_CHAMPIONS = 13,
  INVISIBLE_ISAAC = 14,
  INVISIBLE_ENEMIES = 15,
  INFINITE_BASEMENT = 16,
  ALWAYS_CHARMED = 17,
  ALWAYS_CONFUSED = 18,
  ALWAYS_AFRAID = 19,
  ALWAYS_ALTERNATING_FEAR = 20,
  ALWAYS_CHARMED_AND_AFRAID = 21,
  EXTRA_BLOOD = 23,
  POOP_TRAIL = 24,
  PACIFIST = 25,
  DAMAGE_WHEN_STOPPED = 26,
  DAMAGE_ON_INTERVAL = 27,
  DAMAGE_ON_TIME_LIMIT = 28,
  PILLS_NEVER_IDENTIFY = 29,
  MYSTERY_TAROT_CARDS = 30,
  ENEMIES_RESPAWN = 32,
  ITEMS_COST_MONEY = 33,
  BIG_HEAD = 35,
  SMALL_HEAD = 36,
  BLACK_ISAAC = 37,
  GLOWING_TEARS = 38,
  SLOW_MUSIC = 41,
  ULTRA_SLOW_MUSIC = 42,
  FAST_MUSIC = 43,
  ULTRA_FAST_MUSIC = 44,
  NO_FACE = 46,
  ISAAC_TAKES_HIGH_DAMAGE = 47,
  ISAAC_TAKES_MASSIVE_DAMAGE = 48,
  ICE_PHYSICS = 52,
  KAPPA = 53,
  CHRISTMAS = 54,
  KIDS_MODE = 55,
  PERMANENT_CURSE_DARKNESS = 56,
  PERMANENT_CURSE_LABYRINTH = 57,
  PERMANENT_CURSE_LOST = 58,
  PERMANENT_CURSE_UNKNOWN = 59,
  PERMANENT_CURSE_MAZE = 60,
  PERMANENT_CURSE_BLIND = 61,
  PERMANENT_CURSE_CURSED = 62,
  PREVENT_CURSE_DARKNESS = 63,
  PREVENT_CURSE_LABYRINTH = 64,
  PREVENT_CURSE_LOST = 65,
  PREVENT_CURSE_UNKNOWN = 66,
  PREVENT_CURSE_MAZE = 67,
  PREVENT_CURSE_BLIND = 68,
  PREVENT_ALL_CURSES = 70,
  NO_BOSS_ROOM_EXITS = 71,
  PICKUPS_TIMEOUT = 72,
  INVINCIBLE = 73,
  SHOOT_IN_MOVEMENT_DIRECTION = 74,
  SHOOT_OPPOSITE_MOVEMENT_DIRECTION = 75,
  AXIS_ALIGNED_CONTROLS = 76,
  SUPER_HOT = 77,
  RETRO_VISION = 78,
  G_FUEL = 79,
}

----
enums\SkinColor.ts
export enum SkinColor {
  PINK = -1,
  WHITE = 0,
  BLACK = 1,
  BLUE = 2,
  RED = 3,
  GREEN = 4,
  GREY = 5,
  SHADOW = 6,
}

----
enums\SortingLayer.ts
export enum SortingLayer {
  BACKGROUND = 0,
  DOOR = 1,
  NORMAL = 2,
}

----
enums\SoundEffect.ts
export enum SoundEffect {
  NULL = 0,
  ONE_UP = 1,
  BIRD_FLAP = 2,
  BLOBBY_WIGGLE = 3,
  INSECT_SWARM_LOOP = 4,

  /** For Brimstone. */
  BLOOD_LASER = 5,

  /** For Brimstone. */
  BLOOD_LASER_SMALL = 6,

  /** For Brimstone. */
  BLOOD_LASER_LARGE = 7,

  BOOK_PAGE_TURN_12 = 8,
  BOSS_BUG_HISS = 9,
  BLOOD_LASER_LARGER = 10,
  BOSS_GURGLE_ROAR = 11,
  BOSS_LITE_GURGLE = 12,
  BOSS_LITE_HISS = 13,
  BOSS_LITE_ROAR = 14,
  BOSS_LITE_SLOPPY_ROAR = 15,
  BOSS_SPIT_BLOB_BARF = 16,
  PAPER_IN = 17,
  PAPER_OUT = 18,
  CHEST_DROP = 21,
  CHEST_OPEN = 22,
  CHOIR_UNLOCK = 23,

  /** Used by various slot machines. */
  COIN_SLOT = 24,

  CUTE_GRUNT = 25,
  DEATH_BURST_BONE = 27,
  DEATH_BURST_LARGE = 28,
  DEATH_REVERSE = 29,
  DEATH_BURST_SMALL = 30,
  DEATH_CARD = 33,
  DEVIL_CARD = 34,

  /** When entering an uncleared room. */
  DOOR_HEAVY_CLOSE = 35,

  /** When clearing a room. */
  DOOR_HEAVY_OPEN = 36,

  FART = 37,
  FETUS_JUMP = 38,

  /** Placing a bomb. */
  FETUS_LAND = 40,

  FIRE_DEATH_HISS = 43,
  FLOATY_BABY_ROAR = 44,
  COIN_INSERT = 45,
  METAL_DOOR_CLOSE = 46,
  METAL_DOOR_OPEN = 47,

  /** Used by Monstro. */
  FOREST_BOSS_STOMPS = 48,

  SCYTHE_BREAK = 49,
  STONE_WALKER = 50,
  GAS_CAN_POUR = 51,
  HELL_BOSS_GROUND_POUND = 52,

  /** Used by Holy Water. */
  GLASS_BREAK = 53,

  /** When picking up a soul heart. */
  HOLY = 54,

  ISAAC_HURT_GRUNT = 55,
  CHILD_HAPPY_ROAR_SHORT = 56,
  CHILD_ANGRY_ROAR = 57,
  KEY_PICKUP_GAUNTLET = 58,
  KEY_DROP = 59,
  BABY_HURT = 60,
  MAGGOT_BURST_OUT = 64,
  MAGGOT_ENTER_GROUND = 66,

  /** Heart pickup drop. */
  MEAT_FEET_SLOW = 68,

  MEAT_IMPACTS = 69,
  MEAT_IMPACTS_OLD = 70,
  MEAT_JUMPS = 72,

  /** Used by Backstabber. */
  MEATY_DEATHS = 77,

  POT_BREAK_2 = 78,
  MUSHROOM_POOF_2 = 79,
  BLACK_POOF = 80,
  STATIC = 81,

  /** Used by Clicker. */
  MOM_VOX_DEATH = 82,

  MOM_VOX_EVIL_LAUGH = 84,
  MOM_VOX_FILTERED_DEATH_1 = 85,
  MOM_VOX_FILTERED_EVIL_LAUGH = 86,
  MOM_VOX_FILTERED_HURT = 87,
  MOM_VOX_FILTERED_ISAAC = 90,
  MOM_VOX_GRUNT = 93,
  MOM_VOX_HURT = 97,
  MOM_VOX_ISAAC = 101,
  MONSTER_GRUNT_0 = 104,
  MONSTER_GRUNT_1 = 106,
  MONSTER_GRUNT_2 = 108,
  MONSTER_GRUNT_4 = 112,
  MONSTER_GRUNT_5 = 114,
  MONSTER_ROAR_0 = 115,
  MONSTER_ROAR_1 = 116,
  MONSTER_ROAR_2 = 117,
  MONSTER_ROAR_3 = 118,
  MONSTER_YELL_A = 119,
  MONSTER_YELL_B = 122,

  /** When picking up a new collectible. */
  POWER_UP_1 = 128,

  /** When picking up a new collectible. */
  POWER_UP_2 = 129,

  /** When picking up a new collectible. */
  POWER_UP_3 = 130,

  POWER_UP_SPEWER = 132,
  RED_LIGHTNING_ZAP = 133,
  RED_LIGHTNING_ZAP_WEAK = 134,
  RED_LIGHTNING_ZAP_STRONG = 135,
  RED_LIGHTNING_ZAP_BURST = 136,
  ROCK_CRUMBLE = 137,
  POT_BREAK = 138,
  MUSHROOM_POOF = 139,
  ROCKET_BLAST_DEATH = 141,
  SMB_LARGE_CHEWS_4 = 142,
  SCARED_WHIMPER = 143,

  /** Used by the Horf enemy. */
  SHAKEY_KID_ROAR = 146,

  SINK_DRAIN_GURGLE = 149,
  TEAR_IMPACTS = 150,
  TEARS_FIRE = 153,
  UNLOCK_DOOR = 156,
  VAMP_GULP = 157,
  WHEEZY_COUGH = 158,
  SPIDER_COUGH = 159,
  PORTAL_OPEN = 160,
  PORTAL_LOOP = 161,
  PORTAL_SPAWN = 162,
  TAR_LOOP = 163,
  ZOMBIE_WALKER_KID = 165,
  ANIMAL_SQUISH = 166,
  ANGRY_GURGLE = 167,
  BAND_AID_PICK_UP = 169,
  BATTERY_CHARGE = 170,

  /** Used when an active gains a single charge. */
  BEEP = 171,

  LIGHT_BOLT = 172,
  LIGHT_BOLT_CHARGE = 173,
  BLOOD_BANK_TOUCHED = 174,
  PINKING_SHEARS = 175,
  BLOOD_SHOOT = 178,
  BOIL_HATCH = 181,

  /** When a bomb explodes. */
  BOSS_1_EXPLOSIONS = 182,

  EXPLOSION_WEAK = 183,
  EXPLOSION_STRONG = 184,
  BOSS_2_BUBBLES = 185,
  EXPLOSION_DEBRIS = 186,
  BOSS_2_INTRO_ERROR_BUZZ = 187,

  /** When entering a boss room. */
  CASTLE_PORTCULLIS = 190,

  CHARACTER_SELECT_LEFT = 194,
  CHARACTER_SELECT_RIGHT = 195,

  /** Used by I Found Pills. */
  DERP = 197,

  DIME_DROP = 198,
  DIME_PICKUP = 199,
  LUCKY_PICKUP = 200,

  /** When collecting a bomb pickup. */
  FETUS_FEET = 201,

  GOLDEN_KEY = 204,
  GOO_ATTACH = 205,
  GOO_DEATH = 207,
  HAND_LASERS = 211,
  HEART_IN = 212,
  HEART_OUT = 213,
  HELL_PORTAL_1 = 214,
  HELL_PORTAL_2 = 215,
  ISAAC_DIES = 217,
  ITEM_RECHARGE = 218,
  KISS_LIPS = 219,
  LEECH = 221,
  MAGGOT_CHARGE = 224,
  MEAT_HEAD_SHOOT = 226,
  METAL_BLOCK_BREAK = 229,
  NICKEL_DROP = 231,
  NICKEL_PICKUP = 232,
  PENNY_DROP = 233,
  PENNY_PICKUP = 234,

  /** Used by Peep when he spawns an eye and by The Peeper. */
  PLOP = 237,

  SATAN_APPEAR = 238,
  SATAN_BLAST = 239,
  SATAN_CHARGE_UP = 240,
  SATAN_GROW = 241,
  SATAN_HURT = 242,
  SATAN_RISE_UP = 243,
  SATAN_SPIT = 245,
  SATAN_STOMP = 246,
  SCAMPER = 249,

  /** Also used by Forgotten's bone swing. */
  SHELL_GAME = 252,

  SLOT_SPAWN = 255,
  SPLATTER = 258,

  /** When a fireplace is extinguished. */
  STEAM_HALF_SEC = 261,

  STONE_SHOOT = 262,
  WEIRD_WORM_SPIT = 263,
  SUMMON_SOUND = 265,

  /** When picking up an eternal heart. */
  SUPER_HOLY = 266,

  /** Used by the `EntityPlayer.AnimateSad` method. */
  THUMBS_DOWN = 267,

  /** Used by the `EntityPlayer.AnimateHappy` method. */
  THUMBS_UP = 268,

  FIRE_BURN = 269,

  /** Used by rainbow poop. */
  HAPPY_RAINBOW = 270,

  LASER_RING = 271,
  LASER_RING_WEAK = 272,
  LASER_RING_STRONG = 273,
  CASH_REGISTER = 274,
  ANGEL_WING = 275,
  ANGEL_BEAM = 276,
  HOLY_MANTLE = 277,
  MEGA_BLAST_START = 278,
  MEGA_BLAST_LOOP = 279,
  MEGA_BLAST_END = 280,
  BLOOD_LASER_LOOP = 281,
  MENU_SCROLL = 282,
  MENU_NOTE_APPEAR = 283,
  MENU_NOTE_HIDE = 284,
  MENU_CHARACTER_SELECT = 285,

  /** When an enemy spawns, usually connected to the "Appear" animation. */
  SUMMON_POOF = 286,

  BOO_MAD = 300,
  FART_GURG = 301,
  FAT_GRUNT = 302,
  FAT_WIGGLE = 303,
  FIRE_RUSH = 304,
  GHOST_ROAR = 305,
  GHOST_SHOOT = 306,
  GROWL = 307,
  GURG_BARF = 308,
  INHALE = 309,
  LOW_INHALE = 310,
  MEGA_PUKE = 311,
  MOUTH_FULL = 312,
  MULTI_SCREAM = 313,
  SKIN_PULL = 314,
  WHISTLE = 315,
  DEVIL_ROOM_DEAL = 316,
  SPIDER_SPIT_ROAR = 317,
  WORM_SPIT = 318,
  LITTLE_SPIT = 319,
  SATAN_ROOM_APPEAR = 320,
  HEARTBEAT = 321,
  HEARTBEAT_FASTER = 322,
  HEARTBEAT_FASTEST = 323,
  FORTY_EIGHT_HOUR_ENERGY = 324,
  ALGIZ = 325,
  AMNESIA = 326,
  ANZUS = 327,
  BAD_GAS = 328,
  BAD_TRIP = 329,
  BALLS_OF_STEEL = 330,
  BERKANO = 331,
  BOMBS_ARE_KEY = 332,
  CARD_AGAINST_HUMANITY = 333,
  CHAOS_CARD = 334,
  CREDIT_CARD = 335,
  DAGAZ = 336,
  DEATH = 337,
  EHWAZ = 338,
  EXPLOSIVE_DIARRHEA = 339,
  FULL_HP = 340,
  HAGALAZ = 341,
  HP_DOWN = 342,
  HP_UP = 343,
  HEMATEMESIS = 344,
  I_FOUND_PILLS = 345,
  JERA = 346,
  JOKER = 347,
  JUDGEMENT = 348,
  JUSTICE = 349,
  LEMON_PARTY = 350,
  LUCK_DOWN = 351,
  LUCK_UP = 352,
  PARALYSIS = 353,
  PERTHRO = 354,
  PHEROMONES = 355,
  PRETTY_FLY = 356,
  PUBERTY = 357,
  R_U_A_WIZARD = 358,
  RANGE_DOWN = 359,
  RANGE_UP = 360,
  RULES_CARD = 361,
  I_CAN_SEE_FOREVER = 362,
  SPEED_DOWN = 363,
  SPEED_UP = 364,
  STRENGTH = 365,
  SUICIDE_KING = 366,
  TEARS_DOWN = 367,
  TEARS_UP = 368,
  TELEPILLS = 369,
  TEMPERANCE = 370,
  CHARIOT = 371,
  DEVIL = 372,
  EMPEROR = 373,
  EMPRESS = 374,
  FOOL = 375,
  HANGED_MAN = 376,
  HERMIT = 377,
  HIEROPHANT = 378,
  HIGH_PRIESTESS = 379,
  LOVERS = 380,
  MAGICIAN = 381,
  MOON = 382,
  STARS = 383,
  SUN = 384,
  TOWER = 385,
  WORLD = 386,
  TWO_OF_CLUBS = 387,
  TWO_OF_DIAMONDS = 388,
  TWO_OF_HEARTS = 389,
  TWO_OF_SPADES = 390,
  WHEEL_OF_FORTUNE = 391,
  RAGMAN_1 = 392,
  RAGMAN_2 = 393,
  RAGMAN_3 = 394,
  RAGMAN_4 = 395,
  FLUSH = 396,
  WATER_DROP = 397,
  WET_FEET = 398,
  ADDICTED = 399,
  DICE_SHARD = 400,
  EMERGENCY = 401,

  /** Corresponds to `PillEffect.INFESTED_EXCLAMATION` (34). */
  INFESTED_EXCLAMATION = 402,

  /** Corresponds to `PillEffect.INFESTED_QUESTION` (35). */
  INFESTED_QUESTION = 403,

  GET_OUT_OF_JAIL_CARD = 404,
  LARGER = 405,
  PERCS = 406,
  POWER_PILL = 407,

  /** Corresponds to `CardType.QUESTION_MARK` (48). */
  QUESTION_MARK = 408,

  RELAX = 409,
  RETRO = 410,
  SMALL = 411,

  /** Corresponds to `PillEffect.QUESTION_MARKS` (31). */
  QUESTION_MARKS = 412,

  DANGLE_WHISTLE = 413,
  LITTLE_HORN_COUGH = 414,
  LITTLE_HORN_GRUNT_1 = 415,
  LITTLE_HORN_GRUNT_2 = 416,
  FORSAKEN_LAUGH = 417,
  FORSAKEN_SCREAM = 418,
  STAIN_BURST = 419,
  BROWNIE_LAUGH = 420,
  HUSH_ROAR = 421,
  HUSH_GROWL = 422,
  HUSH_LOW_ROAR = 423,
  FRAIL_CHARGE = 424,
  HUSH_CHARGE = 425,
  MAW_OF_VOID = 426,
  ULTRA_GREED_COIN_DESTROY = 427,
  ULTRA_GREED_COINS_FALLING = 428,
  ULTRA_GREED_DEATH_SCREAM = 429,
  ULTRA_GREED_TURN_GOLD_1 = 430,
  ULTRA_GREED_TURN_GOLD_2 = 431,
  ULTRA_GREED_ROAR_1 = 432,
  ULTRA_GREED_ROAR_2 = 433,
  ULTRA_GREED_SPIT = 434,
  ULTRA_GREED_PULL_SLOT = 435,
  ULTRA_GREED_SLOT_SPIN_LOOP = 436,
  ULTRA_GREED_SLOT_STOP = 437,
  ULTRA_GREED_SLOT_WIN_LOOP_END = 438,
  ULTRA_GREED_SLOT_WIN_LOOP = 439,
  ULTRA_GREED_SPINNING = 440,

  /** Used by Dog Tooth. */
  DOG_BARK = 441,

  /** Used by Dog Tooth. */
  DOG_HOWL = 442,

  X_LAX = 443,
  WRONG = 444,
  VURP = 445,
  SUNSHINE = 446,
  ACE_OF_SPADES = 447,
  HORF = 448,
  HOLY_CARD = 449,
  ACE_OF_HEARTS = 450,
  GULP = 451,
  FRIENDS = 452,
  EXCITED = 453,
  DROWSY = 454,
  ACE_OF_DIAMONDS = 455,
  ACE_OF_CLUBS = 456,
  BLACK_RUNE = 457,
  PING_PONG = 458,
  SPEWER = 459,
  MOM_FOOTSTEPS = 460,
  BONE_HEART = 461,
  BONE_SNAP = 462,
  SHOVEL_DROP = 463,
  SHOVEL_DIG = 464,
  GOLD_HEART = 465,
  GOLD_HEART_DROP = 466,
  BONE_DROP = 467,

  /** When picking up a black heart. */
  UNHOLY = 468,

  BUTTON_PRESS = 469,
  GOLDEN_BOMB = 470,
  CANDLE_LIGHT = 471,
  THUNDER = 472,
  WATER_FLOW_LOOP = 473,
  BOSS_2_DIVE = 474,
  BOSS_2_INTRO_PIPES_TURNON = 475,
  WATER_FLOW_LARGE = 476,
  DEMON_HIT = 477,
  PUNCH = 478,
  FLUTE = 479,
  LAVA_LOOP = 480,
  WOOD_PLANK_BREAK = 481,
  BULLET_SHOT = 482,
  FLAME_BURST = 483,
  INFLATE = 484,
  CLAP = 485,
  BOSS_2_INTRO_WATER_EXPLOSION = 486,
  STONE_IMPACT = 487,
  BOSS_2_WATER_THRASHING = 488,
  FART_MEGA = 489,
  MATCHSTICK = 490,
  FORTUNE_COOKIE = 491,
  BULB_FLASH = 492,

  /** When getting hit by a Bulb. */
  BATTERY_DISCHARGE = 493,

  WHIP = 494,
  WHIP_HIT = 495,
  FREEZE = 496,
  ROTTEN_HEART = 497,
  FREEZE_SHATTER = 498,
  BONE_BOUNCE = 499,
  BONE_BREAK = 500,
  BISHOP_HIT = 501,
  CHAIN_LOOP = 503,
  CHAIN_BREAK = 504,
  MINECART_LOOP = 505,
  TOOTH_AND_NAIL = 506,
  TOOTH_AND_NAIL_TICK = 507,
  STATIC_BUILDUP = 508,
  BIG_LEECH = 510,
  REVERSE_EXPLOSION = 511,
  REVERSE_FOOL = 512,
  REVERSE_MAGICIAN = 513,
  REVERSE_HIGH_PRIESTESS = 514,
  REVERSE_EMPRESS = 515,
  REVERSE_EMPEROR = 516,
  REVERSE_HIEROPHANT = 517,
  REVERSE_LOVERS = 518,
  REVERSE_CHARIOT = 519,
  REVERSE_JUSTICE = 520,
  REVERSE_HERMIT = 521,
  REVERSE_WHEEL_OF_FORTUNE = 522,
  REVERSE_STRENGTH = 523,
  REVERSE_HANGED_MAN = 524,
  REVERSE_DEATH = 525,
  REVERSE_TEMPERANCE = 526,
  REVERSE_DEVIL = 527,
  REVERSE_TOWER = 528,
  REVERSE_STARS = 529,
  REVERSE_MOON = 530,
  REVERSE_SUN = 531,
  REVERSE_JUDGEMENT = 532,
  REVERSE_WORLD = 533,
  FLAMETHROWER_START = 534,
  FLAMETHROWER_LOOP = 535,
  FLAMETHROWER_END = 536,
  ROCKET_LAUNCH = 537,
  SWORD_SPIN = 538,
  BABY_BRIM = 539,
  KNIFE_PULL = 540,
  DOGMA_APPEAR_SCREAM = 541,
  DOGMA_DEATH = 542,
  DOGMA_BLACK_HOLE_CHARGE = 543,
  DOGMA_BLACK_HOLE_SHOOT = 544,
  DOGMA_BLACK_HOLE_OPEN = 545,
  DOGMA_BLACK_HOLE_CLOSE = 546,
  DOGMA_BRIMSTONE_CHARGE = 547,
  DOGMA_BRIMSTONE_SHOOT = 548,
  DOGMA_GODHEAD = 549,
  DOGMA_JACOBS = 550,
  DOGMA_JACOBS_ZAP = 551,
  DOGMA_SCREAM = 552,
  DOGMA_PREACHER = 553,
  DOGMA_RING_START = 554,
  DOGMA_RING_LOOP = 555,
  DOGMA_FEATHER_SPRAY = 556,
  DOGMA_JACOBS_DOT = 557,
  DOGMA_BLACK_HOLE_LOOP = 558,
  DOGMA_ANGEL_TRANSFORM = 559,
  DOGMA_ANGEL_TRANSFORM_END = 560,
  DOGMA_LIGHT_APPEAR = 561,
  DOGMA_LIGHT_BALL_THROW = 562,
  DOGMA_LIGHT_RAY_CHARGE = 563,
  DOGMA_LIGHT_RAY_FIRE = 564,
  DOGMA_SPIN_ATTACK = 565,
  DOGMA_WING_FLAP = 566,
  DOGMA_TV_BREAK = 567,
  DIVINE_INTERVENTION = 568,
  MENU_FLIP_LIGHT = 569,
  MENU_FLIP_DARK = 570,
  MENU_RIP = 571,
  URN_OPEN = 572,
  URN_CLOSE = 573,
  RECALL = 574,
  LARYNX_SCREAM_LO = 575,
  LARYNX_SCREAM_MED = 576,
  LARYNX_SCREAM_HI = 577,
  GROUND_TREMOR = 578,
  SOUL_PICKUP = 579,
  BALL_AND_CHAIN_LOOP = 580,
  BALL_AND_CHAIN_HIT = 581,
  LAZARUS_FLIP_DEAD = 582,
  LAZARUS_FLIP_ALIVE = 583,
  RECALL_FINISH = 584,
  ROCKET_LAUNCH_SHORT = 585,
  ROCKET_LAUNCH_TINY = 586,
  ROCKET_EXPLOSION = 587,
  JELLY_BOUNCE = 588,
  POOP_LASER = 589,
  POISON_WARN = 590,
  POISON_HURT = 591,
  BERSERK_START = 592,
  BERSERK_TICK = 593,
  BERSERK_END = 594,
  EDEN_GLITCH = 595,
  RAILROAD_TRACK_RAISE = 596,
  RAILROAD_TRACK_RAISE_FAR = 597,
  MOM_AND_DAD_1 = 598,
  MOM_AND_DAD_2 = 599,
  MOM_AND_DAD_3 = 600,
  MOM_AND_DAD_4 = 601,
  THUMBS_UP_AMPLIFIED = 602,
  THUMBS_DOWN_AMPLIFIED = 603,
  POWER_UP_SPEWER_AMPLIFIED = 604,
  POOP_ITEM_THROW = 605,
  POOP_ITEM_STORE = 606,
  POOP_ITEM_HOLD = 607,
  MIRROR_ENTER = 608,
  MIRROR_EXIT = 609,
  MIRROR_BREAK = 610,
  ANIMA_TRAP = 611,
  ANIMA_RATTLE = 612,
  ANIMA_BREAK = 613,
  VAMP_DOUBLE = 614,
  FLASHBACK = 615,
  DARK_ESAU_OPEN = 616,
  DARK_ESAU_DEATH_OPEN = 617,
  MOTHER_DEATH_1 = 618,
  MOTHER_DEATH_2 = 619,
  MOTHER_FIST_POUND_1 = 620,
  MOTHER_FIST_POUND_2 = 621,
  MOTHER_FIST_POUND_3 = 622,
  MOTHER_FISTULA = 623,
  MOTHER_APPEAR_1 = 624,
  MOTHER_APPEAR_2 = 625,
  MOTHER_KNIFE_START = 626,
  MOTHER_KNIFE_THROW = 627,
  MOTHER_SUMMON_ISAACS_START = 628,
  MOTHER_SUMMON_ISAACS_END = 629,
  MOTHER_HAND_BOIL_START = 630,
  MOTHER_GRUNT_1 = 631,
  MOTHER_GRUNT_5 = 632,
  MOTHER_GRUNT_6 = 633,
  MOTHER_GRUNT_7 = 634,
  MOTHER_LAUGH = 635,
  MOTHER_SPIN_START = 636,
  MOTHER_WALL_SHOT_START = 637,
  MOTHER_MISC = 638,
  MOTHER_SHOOT = 639,
  MOTHER_SUCTION = 640,
  MOTHER_ISAAC_RISE = 641,
  MOTHER_ISAAC_HIT = 642,
  MOTHER_WRIST_SWELL = 643,
  MOTHER_WRIST_EXPLODE = 644,
  MOTHER_DEATH_MELT = 645,
  MOTHER_ANGER_SHAKE = 646,
  MOTHER_CHARGE_1 = 647,
  MOTHER_CHARGE_2 = 648,
  MOTHER_LAND_SMASH = 649,
  ISAAC_ROAR = 650,
  FAMINE_APPEAR = 651,
  FAMINE_DEATH_1 = 652,
  FAMINE_DEATH_2 = 653,
  FAMINE_DASH_START = 654,
  FAMINE_DASH = 655,
  FAMINE_SHOOT = 656,
  FAMINE_BURST = 657,
  FAMINE_GURGLE = 658,
  PESTILENCE_MAGGOT_START = 659,
  PESTILENCE_MAGGOT_SHOOT_1 = 660,
  PESTILENCE_MAGGOT_RETURN = 661,
  PESTILENCE_BODY_SHOOT = 662,
  PESTILENCE_HEAD_DEATH = 663,
  PESTILENCE_DEATH = 664,
  PESTILENCE_COUGH = 665,
  PESTILENCE_BARF = 666,
  PESTILENCE_APPEAR = 667,
  PESTILENCE_HEAD_EXPLODE = 668,
  PESTILENCE_MAGGOT_ENTER = 669,
  PESTILENCE_MAGGOT_POP_OUT = 670,
  PESTILENCE_MAGGOT_SHOOT_2 = 671,
  PESTILENCE_NECK_PUKE = 672,
  PESTILENCE_PUKE_START = 673,
  WAR_APPEAR = 674,
  WAR_APPEAR_LAVA = 675,
  WAR_BOMB_TOSS = 676,
  WAR_DASH_START = 677,
  WAR_DASH = 678,
  WAR_HORSE_DEATH = 679,
  WAR_DEATH = 680,
  WAR_FIRE_SCREAM = 681,
  WAR_GRAB_PLAYER = 682,
  WAR_BOMB_HOLD = 683,
  WAR_BOMB_PULL_OUT = 684,
  WAR_CHASE = 685,
  WAR_BOMB_TICK = 686,
  WAR_FLAME = 687,
  WAR_LAVA_SPLASH = 688,
  WAR_LAVA_DASH = 689,
  DEATH_DIES = 690,
  DEATH_DESTROY_SKULLS = 691,
  DEATH_GROWL = 692,
  DEATH_SWIPE_START = 693,
  DEATH_SWIPE = 694,
  DEATH_SUMMON_SCYTHES = 695,
  DEATH_SUMMON_SKULLS = 696,
  BEAST_DEATH = 697,
  BEAST_LASER = 698,
  BEAST_BACKGROUND_DIVE = 699,
  BEAST_FIRE_RING = 700,
  BEAST_GHOST_DASH = 701,
  BEAST_GHOST_RISE = 702,
  BEAST_LAVA_BALL_SPLASH = 703,
  BEAST_LAVA_RISE = 704,
  BEAST_SUCTION_LOOP = 705,
  BEAST_FIRE_BARF = 706,
  BEAST_GHOST_ROAR = 707,
  BEAST_INTRO_SCREAM = 708,
  BEAST_SUCTION_END = 709,
  BEAST_SUCTION_START = 710,
  BEAST_SPIT = 711,
  BEAST_SURFACE_GROWL = 712,
  BEAST_SWITCH_SIDES = 713,
  MOTHER_SHADOW_APPEAR = 714,
  MOTHER_SHADOW_CHARGE_UP = 715,
  MOTHER_SHADOW_DASH = 716,
  MOTHER_SHADOW_END = 717,
  MOTHER_SHADOW_INTRO = 718,
  BUMBINO_DEATH = 719,
  BUMBINO_DIZZY = 720,
  BUMBINO_HIT_WALL = 721,
  BUMBINO_MISC = 722,
  BUMBINO_PUNCH = 723,
  BUMBINO_RAM = 724,
  BUMBINO_SLAM = 725,
  BUMBINO_SNAP_OUT = 726,
  SIREN_SCREAM = 727,
  SIREN_SING = 728,
  DEATH_SKULL_SUMMON_LOOP = 729,
  DEATH_SKULL_SUMMON_END = 730,
  BEAST_DEATH_2 = 731,
  BEAST_ANGELIC_BLAST = 732,
  ANCIENT_RECALL = 733,
  ERA_WALK = 734,
  HUGE_GROWTH = 735,
  RUNE_SHARD = 736,
  SHOT_SPEED_DOWN = 737,
  SHOT_SPEED_UP = 738,
  EXPERIMENTAL_PILL = 739,
  CRACKED_KEY = 740,
  QUEEN_OF_HEARTS = 741,
  WILD_CARD = 742,
  SOUL_OF_ISAAC = 743,
  SOUL_OF_MAGDALENE = 744,
  SOUL_OF_CAIN = 745,
  SOUL_OF_JUDAS = 746,
  SOUL_OF_XXX = 747,
  SOUL_OF_EVE = 748,
  SOUL_OF_SAMSON = 749,
  SOUL_OF_AZAZEL = 750,
  SOUL_OF_LAZARUS = 751,
  SOUL_OF_EDEN = 752,
  SOUL_OF_THE_LOST = 753,
  SOUL_OF_LILITH = 754,
  SOUL_OF_THE_KEEPER = 755,
  SOUL_OF_APOLLYON = 756,
  SOUL_OF_THE_FORGOTTEN = 757,
  SOUL_OF_BETHANY = 758,
  SOUL_OF_JACOB_AND_ESAU = 759,
  MEGA_BAD_GAS = 760,
  MEGA_BAD_TRIP = 761,
  MEGA_BALLS_OF_STEEL = 762,
  MEGA_BOMBS_ARE_KEY = 763,
  MEGA_EXPLOSIVE_DIARRHEA = 764,
  MEGA_FULL_HEALTH = 765,
  MEGA_HEALTH_UP = 766,
  MEGA_HEALTH_DOWN = 767,
  MEGA_I_FOUND_PILLS = 768,
  MEGA_PUBERTY = 769,
  MEGA_PRETTY_FLY = 770,
  MEGA_RANGE_DOWN = 771,
  MEGA_RANGE_UP = 772,
  MEGA_SPEED_DOWN = 773,
  MEGA_SPEED_UP = 774,
  MEGA_TEARS_DOWN = 775,
  MEGA_TEARS_UP = 776,
  MEGA_LUCK_DOWN = 777,
  MEGA_LUCK_UP = 778,
  MEGA_TELEPILLS = 779,
  MEGA_FORTY_EIGHT_HOUR_ENERGY = 780,
  MEGA_HEMATEMESIS = 781,
  MEGA_PARALYSIS = 782,
  MEGA_I_CAN_SEE_FOREVER = 783,
  MEGA_PHEROMONES = 784,
  MEGA_AMNESIA = 785,
  MEGA_LEMON_PARTY = 786,
  MEGA_R_U_A_WIZARD = 787,
  MEGA_PERCS = 788,
  MEGA_ADDICTED = 789,
  MEGA_RELAX = 790,
  MEGA_QUESTION_MARKS = 791,
  MEGA_ONE_MAKES_YOU_LARGER = 792,
  MEGA_ONE_MAKES_YOU_SMALL = 793,
  MEGA_INFESTED = 794,
  MEGA_INFESTED_1 = 795,
  MEGA_POWER_PILL = 796,
  MEGA_RETRO_VISION = 797,
  MEGA_FRIENDS_TIL_THE_END = 798,
  MEGA_X_LAX = 799,
  MEGA_SOMETHINGS_WRONG = 800,
  MEGA_IM_DROWSY = 801,
  MEGA_IM_EXCITED = 802,
  MEGA_GULP = 803,
  MEGA_HORF = 804,
  MEGA_SUNSHINE = 805,
  MEGA_VURP = 806,
  MEGA_SHOT_SPEED_DOWN = 807,
  MEGA_SHOT_SPEED_UP = 808,
  MEGA_EXPERIMENTAL_PILL = 809,
  SIREN_LUNGE = 810,
  SIREN_MINION_SMOKE = 811,
  SIREN_SCREAM_ATTACK = 812,
  SIREN_SING_STAB = 813,
  BEAST_LAVA_BALL_RISE = 814,
  BEAST_GROWL = 815,
  BEAST_GRUMBLE = 816,
  FAMINE_GRUNT = 817,
  G_FUEL_1 = 818,
  G_FUEL_2 = 819,
  G_FUEL_3 = 820,
  G_FUEL_4 = 821,
  G_FUEL_EXPLOSION_SMALL = 822,
  G_FUEL_EXPLOSION_BIG = 823,
  G_FUEL_GUNSHOT_MEDIUM = 824,
  G_FUEL_GUNSHOT_SMALL = 825,
  G_FUEL_GUNSHOT_LARGE = 826,
  G_FUEL_GUNSHOT_SPREAD = 827,
  G_FUEL_AIR_HORN = 828,
  G_FUEL_ITEM_APPEAR = 829,
  G_FUEL_GUNSHOT_MINI = 830,
  G_FUEL_BULLET_RICOCHET = 831,
  G_FUEL_ROCKET_LAUNCHER = 832,
}

----
enums\StageID.ts
/**
 * Corresponds to the filename used in the XML/STB file for the room. It also matches the "id"
 * attribute in the "stages.xml" file.
 *
 * This enum is not contiguous. In other words, the enum ranges from `StageID.SPECIAL_ROOMS` (0) to
 * `StageID.BACKWARDS` (36), but there is no corresponding `StageID` with the following values:
 *
 * - 18 (corresponds to Afterbirth+ "18.greed special.stb")
 * - 19 (corresponds to Afterbirth+ "19.greed basement.stb")
 * - 20 (corresponds to Afterbirth+ "20.greed caves.stb")
 * - 21 (corresponds to Afterbirth+ "21.greed depths.stb")
 * - 22 (corresponds to Afterbirth+ "22.greed womb.stb")
 * - 23 (corresponds to Afterbirth+ "23.greed sheol.stb")
 *
 * (These values are now unused in Repentance.)
 */
export enum StageID {
  SPECIAL_ROOMS = 0,
  BASEMENT = 1,
  CELLAR = 2,
  BURNING_BASEMENT = 3,
  CAVES = 4,
  CATACOMBS = 5,
  FLOODED_CAVES = 6,
  DEPTHS = 7,
  NECROPOLIS = 8,
  DANK_DEPTHS = 9,
  WOMB = 10,
  UTERO = 11,
  SCARRED_WOMB = 12,
  BLUE_WOMB = 13,
  SHEOL = 14,
  CATHEDRAL = 15,
  DARK_ROOM = 16,
  CHEST = 17,

  // The values from 18 to 23 are commented out in the "stages.xml" file.

  // - SPECIAL_ROOMS_GREED_MODE = 18,
  // - BASEMENT_GREED_MODE = 19,
  // - CAVES_GREED_MODE = 20,
  // - DEPTHS_GREED_MODE = 21,
  // - WOMB_GREED_MODE = 22,
  // - SHEOL_GREED_MODE = 23,

  SHOP = 24,
  ULTRA_GREED = 25,
  VOID = 26,
  DOWNPOUR = 27,
  DROSS = 28,
  MINES = 29,
  ASHPIT = 30,
  MAUSOLEUM = 31,
  GEHENNA = 32,
  CORPSE = 33,
  MORTIS = 34,
  HOME = 35,
  BACKWARDS = 36,
}

----
enums\StageTransition.ts
export enum StageTransition {
  DISAPPEAR = 0,
  NONE = 1,
}

----
enums\StageType.ts
export enum StageType {
  /** e.g. Basement, Caves, Depths, and so on. */
  ORIGINAL = 0,

  /** e.g. Cellar, Catacombs, Necropolis, and so on. */
  WRATH_OF_THE_LAMB = 1,

  /** e.g. Burning Basement, Flooded Caves, Dank Depths, and so on. */
  AFTERBIRTH = 2,

  /**
   * Deprecated; no longer used. (Greed Mode stages now use the normal stage types in Repentance.)
   */
  GREED_MODE = 3,

  /** e.g. Downpour, Mines, Mausoleum, and so on. */
  REPENTANCE = 4,

  /** e.g. Dross, Ashpit, Gehenna, and so on. */
  REPENTANCE_B = 5,
}

----
enums\TrinketSlot.ts
export enum TrinketSlot {
  /** The bottom-right trinket. */
  SLOT_1 = 0,

  /** The top-left trinket. */
  SLOT_2 = 1,
}

----
enums\WeaponType.ts
export enum WeaponType {
  TEARS = 1,
  BRIMSTONE = 2,
  LASER = 3,
  KNIFE = 4,
  BOMBS = 5,
  ROCKETS = 6,
  MONSTROS_LUNG = 7,
  LUDOVICO_TECHNIQUE = 8,
  TECH_X = 9,
  BONE = 10,
  NOTCHED_AXE = 11,
  URN_OF_SOULS = 12,
  SPIRIT_SWORD = 13,
  FETUS = 14,
  UMBILICAL_WHIP = 15,
}

----
enums\collections\gridEntityStates.ts
/* eslint-disable sort-exports/sort-exports */

/**
 * Used by the following grid entity types:
 * - GridEntityType.ROCK (2)
 * - GridEntityType.ROCK_TINTED (4)
 * - GridEntityType.ROCK_BOMB (5)
 * - GridEntityType.ROCK_ALT (6)
 * - GridEntityType.STATUE (21) (only for Angel Statues)
 * - GridEntityType.ROCK_SS (22)
 * - GridEntityType.ROCK_SPIKED (25)
 * - GridEntityType.ROCK_ALT2 (26)
 * - GridEntityType.ROCK_GOLD (27)
 */
export enum RockState {
  UNBROKEN = 1,
  BROKEN = 2,

  /**
   * Only applies for `GridEntityType.ROCK_BOMB` (5). After being bombed, the rock stays in this
   * state for 4 frames, then changes to `RockState.BROKEN`.
   */
  EXPLODING = 3,

  /** Only applies for `GridEntityType.ROCK_SS` (22), since it takes two bombs to break. */
  HALF_BROKEN = 4,
}

/** For `GridEntityType.PIT` (7). */
export enum PitState {
  NORMAL = 0,

  /**
   * Pits can become filled when nearby rocks are bombed into them.
   *
   * Note that the ladder collectible does not change the state to this.
   */
  FILLED = 1,
}

/** For `GridEntityType.SPIKES_ON_OFF` (9). */
export enum SpikesOnOffState {
  ON = 0,
  OFF = 1,
}

/** For `GridEntityType.SPIDERWEB` (10). */
export enum SpiderWebState {
  UNBROKEN = 0,
  BROKEN = 1,
}

/** For `GridEntityType.LOCK` (11). */
export enum LockState {
  LOCKED = 0,

  /**
   * Note that the locked block will turn to this state as soon as the key is inserted and stays
   * this state after disappearing. Thus, unlike the `RockState.BROKEN` enum, you cannot use this
   * state as a proxy for being able to move through the grid entity.
   */
  UNLOCKED = 1,
}

/**
 * For `GridEntityType.TNT` (12).
 *
 * The health of a TNT barrel is represented by its state. It starts at 0 and climbs upwards in
 * increments of 1. Once the state reaches 4, the barrel explodes, and remains at state 4.
 *
 * Breaking a TNT barrel usually takes 4 tears. However, it is possible to take less than that if
 * the players damage is high enough. (High damage causes the tear to do two or more increments at
 * once.)
 */
export enum TNTState {
  UNDAMAGED = 0,
  ONE_QUARTER_DAMAGED = 1,
  TWO_QUARTERS_DAMAGED = 2,
  THREE_QUARTERS_DAMAGED = 3,
  EXPLODED = 4,
}

/**
 * For `GridEntityType.POOP` (14).
 *
 * The health of a poop is represented by its state. It starts at 0 and climbs upwards in increments
 * of 250. Once the state reaches 1000, the poop is completely broken.
 *
 * Breaking a poop usually takes 4 tears. However, it is possible to take less than that if the
 * players damage is high enough. (High damage causes the tear to do two or more increments at
 * once.)
 *
 * Giga Poops increment by 20 instead of 250. Thus, they take around 50 tears to destroy.
 */
export enum PoopState {
  UNDAMAGED = 0,
  ONE_QUARTER_DAMAGED = 250,
  TWO_QUARTERS_DAMAGED = 500,
  THREE_QUARTERS_DAMAGED = 750,
  COMPLETELY_DESTROYED = 1000,
}

/** For `GridEntityType.DOOR` (16). */
export enum DoorState {
  INIT = 0,
  CLOSED = 1,
  OPEN = 2,
  ONE_CHAIN = 3,
  HALF_CRACKED = 4,
}

/** For `GridEntityType.TRAPDOOR` (17). */
export enum TrapdoorState {
  CLOSED = 0,
  OPEN = 1,
}

/** For `GridEntityType.CRAWL_SPACE` (18). */
export enum CrawlSpaceState {
  CLOSED = 0,
  OPEN = 1,
}

/** For `GridEntityType.PRESSURE_PLATE` (20). */
export enum PressurePlateState {
  UNPRESSED = 0,
  STATE_1_UNKNOWN = 1,
  STATE_2_UNKNOWN = 2,
  PRESSURE_PLATE_PRESSED = 3,
  REWARD_PLATE_PRESSED = 4,
}

/** For `GridEntityType.TELEPORTER` (23). */
export enum TeleporterState {
  NORMAL = 0,
  ACTIVATED = 1,

  /**
   * Set when a player stands on a teleport pad that has no corresponding pad for the player to be
   * sent to. When this happens, the pad turns black and deactivates.
   */
  DISABLED = 2,
}

----
enums\collections\gridEntityVariants.ts
/* eslint-disable sort-exports/sort-exports */

/**
 * For `GridEntityType.ROCK` (2).
 *
 * Note that this does not always apply to `GridEntityRock`, since that class can be equal to other
 * grid entity types.
 */
export enum RockVariant {
  NORMAL = 0,
  EVENT = 1,
}

/**
 * For GridEntityType.ROCK_ALT (6), RockAltType.URN.
 *
 * Note that you are unable to spawn specific urn variants. The game will pick a random variant
 * regardless of which one you select.
 */
export enum UrnVariant {
  NORMAL = 0,
  CHIPPED_TOP_LEFT = 1,
  NARROW = 2,
}

/**
 * For GridEntityType.ROCK_ALT (6), RockAltType.MUSHROOM.
 *
 * Note that you are unable to spawn specific mushroom variants. The game will pick a random variant
 * regardless of which one you select.
 */
export enum MushroomVariant {
  NORMAL = 0,
  CHIPPED_TOP_RIGHT = 1,
  NARROW = 2,
}

/**
 * For GridEntityType.ROCK_ALT (6), RockAltType.SKULL.
 *
 * Note that you are unable to spawn specific skull variants. The game will pick a random variant
 * regardless of which one you select.
 */
export enum SkullVariant {
  NORMAL = 0,
  FACING_RIGHT = 1,
  FACING_LEFT = 2,
}

/**
 * For GridEntityType.ROCK_ALT (6), RockAltType.POLYP.
 *
 * Note that you are unable to spawn specific polyp variants. The game will pick a random variant
 * regardless of which one you select.
 */
export enum PolypVariant {
  NORMAL = 0,
  MANY_FINGERS = 1,
  FLIPPED_AND_SHIFTED_UPWARDS = 2,
}

/**
 * For GridEntityType.ROCK_ALT (6), RockAltType.BUCKET.
 *
 * Note that you are unable to spawn specific bucket variants. The game will pick a random variant
 * regardless of which one you select.
 */
export enum BucketVariant {
  EMPTY = 0,
  FULL = 1,
  EMPTY_AND_SHIFTED_UPWARDS = 2,
}

/** For `GridEntityType.PIT` (7). */
export enum PitVariant {
  NORMAL = 0,
  FISSURE_SPAWNER = 16,
}

/**
 * For `GridEntityType.FIREPLACE` (13).
 *
 * This only partially corresponds to the `FireplaceVariant` for non-grid entities. (Spawning a grid
 * entity fireplace with a variant higher than 1 will result in a normal fireplace.)
 */
export enum FireplaceGridEntityVariant {
  NORMAL = 0,
  RED = 1,
}

/** For `GridEntityType.POOP` (14). */
export enum PoopGridEntityVariant {
  NORMAL = 0,
  RED = 1,
  CORNY = 2,
  GOLDEN = 3,
  RAINBOW = 4,
  BLACK = 5,
  WHITE = 6,
  GIANT_TOP_LEFT = 7,
  GIANT_TOP_RIGHT = 8,
  GIANT_BOTTOM_LEFT = 9,
  GIANT_BOTTOM_RIGHT = 10,
  CHARMING = 11,
}

/** For `GridEntityType.DOOR` (16). */
export enum DoorVariant {
  UNSPECIFIED = 0,
  LOCKED = 1,
  LOCKED_DOUBLE = 2,
  LOCKED_CRACKED = 3,
  LOCKED_BARRED = 4,

  /** The Mega Satan door, which is unlocked with the Key Piece familiars. */
  LOCKED_KEY_FAMILIAR = 5,

  LOCKED_GREED = 6,
  HIDDEN = 7,
  UNLOCKED = 8,
}

/** For `GridEntityType.TRAPDOOR` (17). */
export enum TrapdoorVariant {
  NORMAL = 0,

  /**
   * Void Portals will have a `VarData` of 0 if they are part of the grid layout and a `VarData` of
   * 1 if they are spawned after defeating a boss.
   *
   * Manually spawning a trapdoor with a variant of a Void Portal will work, but the sprite will
   * have the appearance of a normal trapdoor; you must replace the sprite sheet with
   * "gfx/grid/voidtrapdoor.anm2".
   */
  VOID_PORTAL = 1,
}

/** For `GridEntityType.CRAWL_SPACE` (18). */
export enum CrawlSpaceVariant {
  NORMAL = 0,

  /** Found by throwing a Chaos Card at Great Gideon. */
  GREAT_GIDEON = 1,

  /** Found in shops when the player has the Member Card item. */
  SECRET_SHOP = 2,

  /** Found when using Genesis on a "final" floor. */
  PASSAGE_TO_BEGINNING_OF_FLOOR = 3,

  /**
   * This variant is not used by the game.
   *
   * Any variant with a value of 4 or higher will not interact with the player.
   */
  NULL = 4,
}

/** For `GridEntityType.PRESSURE_PLATE` (20). */
export enum PressurePlateVariant {
  PRESSURE_PLATE = 0,
  REWARD_PLATE = 1,
  GREED_PLATE = 2,
  RAIL_PLATE = 3,
  KILL_ALL_ENEMIES_PLATE = 9,
  SPAWN_ROCKS_PLATE = 10,
}

/** For `GridEntityType.STATUE` (21). */
export enum StatueVariant {
  DEVIL = 0,
  ANGEL = 1,
}

----
enums\collections\npcStates.ts
/* eslint-disable sort-exports/sort-exports */

/** EntityType.FAMILIAR (3), FamiliarVariant.LOST_SOUL (211). */
export enum LostSoulState {
  ALIVE = 1,
  DEAD = 4,
}

/** For `EntityType.FAMINE` (63). */
export enum FamineState {
  MOVE = 4,
  HORIZONTAL_CHARGE = 8,

  /**
   * Famine always remains in this phase while in phase 2, regardless of whether he is moving around
   * or shooting tears.
   */
  PHASE_2 = 9,

  /** The non-champion version will summon Pooters. */
  SUMMON = 13,
}

/** For `EntityType.PESTILENCE` (64). */
export enum PestilenceState {
  MOVE = 4,
  ATTACK_IPECAC = 8,

  /**
   * The non-champion version will summon Chargers or Spitties in phase 1 and Attack Flies in phase
   * 2.
   */
  SUMMON = 13,
}

/** For `EntityType.WAR` (65), `WarVariant.WAR (0). */
export enum WarState {
  MOVE = 4,
  JUMP_AND_SPAWN_TROLL_BOMBS = 6,
  HORIZONTAL_CHARGE = 9,
}

/** For `EntityType.WAR` (65), `WarVariant.CONQUEST (1). */
export enum ConquestState {
  MOVE = 4,
  JUMP_AND_SPAWN_BEAMS = 6,
  TEAR_ATTACK = 8,
  HORIZONTAL_CHARGE = 9,
}

/** For `EntityType.WAR` (65), `WarVariant.WAR_WITHOUT_HORSE (2). */
export enum WarWithoutHorseState {
  MOVE = 4,
  SIT = 8,
}

/** For `EntityType.DEATH` (66). */
export enum DeathState {
  APPEAR = 1,
  SCYTHE_APPEAR = 3,
  MOVE = 4,
  JUMP_OFF_HORSE = 7,
  SLOW_ATTACK = 8,
  SUMMON_KNIGHTS = 13,
  SUMMON_SCYTHES = 14,
}

/** For `EntityType.DADDY_LONG_LEGS` (101). */
export enum DaddyLongLegsState {
  /** Used at the end of the sequence of single stomp attacks. */
  SLAM_WITH_PROJECTILE_BURST = 4,

  /**
   * This is used for both the single stomp attack and the multi-stomp attack.
   *
   * When doing the multi-stomp attack, the main entity will go to state 9 and the child entities
   * will have state 7.
   */
  STOMP_ATTACK_LEG = 7,

  SPITTING_SPIDERS_ATTACK = 8,
  MULTI_STOMP_ATTACK_MAIN = 9,
}

/** For `EntityType.BIG_HORN` (411), `BigHornVariant.BIG_HORN` (0). */
export enum BigHornState {
  IDLE = 3,
  HEAD_GOING_UP_OR_GOING_DOWN_INTO_HOLE = 4,
  HAND_GOING_DOWN_INTO_HOLE = 5,
  HAND_SLAM_ATTACK = 8,

  /**
   * This is used for all types of Troll Bomb attacks. Troll Bombs can randomly be Mega Troll Bombs
   * or Hot Bombs.
   */
  HAND_THROW_TROLL_BOMB_ATTACK = 9,

  HAND_THROW_TRIPLE_TROLL_BOMB_ATTACK = 10,

  /**
   * This is used for the attack where he spits out 1 ball, spits out 2 balls, and spits out 3
   * balls.
   */
  HEAD_BALL_ATTACK = 13,
}

/** For `EntityType.REAP_CREEP` (900). */
export enum ReapCreepState {
  CRAWLING_FROM_SIDE_TO_SIDE = 3,
  JUMPING_TO_TOP_WALL = 6,
  WALL_SLAM_ATTACK = 7,
  PROJECTILE_SPIT_LINE_ATTACK = 8,
  PROJECTILE_SPIT_BURST_ATTACK = 9,

  /** This is used for both the single fat Brimstone attack and the quad-beam Brimstone attack. */
  BRIMSTONE_ATTACK = 10,

  SPAWNING_WALL_SPIDERS = 13,
  SPAWNING_SPIDERS = 14,

  /**
   * There are three phases, so Reap Creep will enter this state while going from phase 1 to phase 2
   * and when going from phase 2 to phase 3.
   */
  TRANSFORMING_TO_NEXT_PHASE = 16,
}

/** For `EntityType.COLOSTOMIA` (917). */
export enum ColostomiaState {
  IDLE_PHASE_1 = 3,
  IDLE_PHASE_2 = 4,
  JUMP_ATTACK_WITH_PROJECTILE_SPLASH = 6,
  CHARGE_SLIDE = 8,
  SPIT_POOP_BOMB = 9,
  SPIT_TWO_POOP_BOMBS = 10,
  FART_ATTACK = 11,
  TRANSITION_TO_PHASE_2 = 16,
}

/** For `EntityType.ULTRA_GREED` (406), `UltraGreedVariant.ULTRA_GREED` (0). */
export enum UltraGreedState {
  HANGING = 2,
  IDLE = 3,
  MOVE = 4,
  GOLD_STATUE_BREAKING_OUT = 16,
  EYES_SPINNING = 100,

  /** This creates Keepers (i.e. Greed Heads). */
  STOMPING = 200,

  BLOCKING_WITH_ARMS = 400,
  SPIN_ATTACK = 510,
  SHOOT_4_COINS = 600,
  DYING = 9000,

  /**
   * He only goes to this state on Greed Mode when the fight is completed. On Greedier Mode, this
   * state will never be entered, and he will instead go to state
   * `UltraGreedState.GOLD_STATUE_BREAKING_OUT` (16).
   */
  GOLD_STATUE = 9001,
}

/** For `EntityType.ULTRA_GREED` (406), `UltraGreedVariant.ULTRA_GREEDIER` (1). */
export enum UltraGreedierState {
  IDLE = 3,
  MOVE = 4,
  JUMP = 6,

  /** This creates bomb coins. */
  STOMPING = 200,

  SHOOT_4_COINS = 600,
  FIST_POUND = 700,
  FIST_POUND_TRIPLE = 710,
  DYING = 9000,
  POST_EXPLOSION = 9001,
}

----
enums\collections\roomSubTypes.ts
/* eslint-disable sort-exports/sort-exports */

/**
 * For `StageID.SPECIAL_ROOMS` (0), `RoomType.SHOP` (2).
 *
 * This matches the sub-type in the "00.special rooms.stb" file.
 */
export enum ShopSubType {
  LEVEL_1 = 0,
  LEVEL_2 = 1,
  LEVEL_3 = 2,
  LEVEL_4 = 3,
  LEVEL_5 = 4,
  RARE_GOOD = 10,
  RARE_BAD = 11,
  TAINTED_KEEPER_LEVEL_1 = 100,
  TAINTED_KEEPER_LEVEL_2 = 101,
  TAINTED_KEEPER_LEVEL_3 = 102,
  TAINTED_KEEPER_LEVEL_4 = 103,
  TAINTED_KEEPER_LEVEL_5 = 104,
  TAINTED_KEEPER_RARE_GOOD = 110,
  TAINTED_KEEPER_RARE_BAD = 111,
}

/**
 * For `StageID.SPECIAL_ROOMS` (0), `RoomType.TREASURE` (4).
 *
 * This matches the sub-type in the "00.special rooms.stb" file and elsewhere.
 */
export enum TreasureRoomSubType {
  NORMAL = 0,
  MORE_OPTIONS = 1,
  PAY_TO_WIN = 2,
  MORE_OPTIONS_AND_PAY_TO_WIN = 3,
  KNIFE_PIECE = 34,
}

/**
 * For `StageID.SPECIAL_ROOMS` (0), `RoomType.BOSS` (5).
 *
 * This matches the "bossID" attribute in the "entities2.xml" file. It also matches the sub-type in
 * the "00.special rooms.stb" file.
 *
 * The enum is named `BossID` instead of `BossRoomSubType` in order to match the `Entity.GetBossID`,
 * `Room.GetBossID` and `Room.GetSecondBossID` methods.
 *
 * There is no BossID with a value of 0 because this is the default return value for "no boss ID"
 * when using the `Room.GetBossID` method.
 *
 * This enum is contiguous. (Every value is satisfied between 1 and 102, inclusive.)
 *
 * Also see the `MinibossID` enum.
 */
export enum BossID {
  MONSTRO = 1,
  LARRY_JR = 2,
  CHUB = 3,
  GURDY = 4,
  MONSTRO_2 = 5,
  MOM = 6,
  SCOLEX = 7,
  MOMS_HEART = 8,
  FAMINE = 9,
  PESTILENCE = 10,
  WAR = 11,
  DEATH = 12,
  DUKE_OF_FLIES = 13,
  PEEP = 14,
  LOKI = 15,
  BLASTOCYST = 16,
  GEMINI = 17,
  FISTULA = 18,
  GISH = 19,
  STEVEN = 20,
  CHAD = 21,
  HEADLESS_HORSEMAN = 22,
  FALLEN = 23,
  SATAN = 24,
  IT_LIVES = 25,
  HOLLOW = 26,
  CARRION_QUEEN = 27,
  GURDY_JR = 28,
  HUSK = 29,
  BLOAT = 30,
  LOKII = 31,
  BLIGHTED_OVUM = 32,
  TERATOMA = 33,
  WIDOW = 34,
  MASK_OF_INFAMY = 35,
  WRETCHED = 36,
  PIN = 37,
  CONQUEST = 38,
  ISAAC = 39,

  /** Also known as "???". */
  BLUE_BABY = 40,

  DADDY_LONG_LEGS = 41,
  TRIACHNID = 42,
  HAUNT = 43,
  DINGLE = 44,
  MEGA_MAW = 45,
  GATE = 46,
  MEGA_FATTY = 47,
  CAGE = 48,
  MAMA_GURDY = 49,
  DARK_ONE = 50,
  ADVERSARY = 51,
  POLYCEPHALUS = 52,
  MR_FRED = 53,
  LAMB = 54,
  MEGA_SATAN = 55,
  GURGLING = 56,
  STAIN = 57,
  BROWNIE = 58,
  FORSAKEN = 59,
  LITTLE_HORN = 60,
  RAG_MAN = 61,
  ULTRA_GREED = 62,
  HUSH = 63,
  DANGLE = 64,
  TURDLING = 65,
  FRAIL = 66,
  RAG_MEGA = 67,
  SISTERS_VIS = 68,
  BIG_HORN = 69,
  DELIRIUM = 70,

  /**
   * Ultra Greedier does not have its own boss room; it appears in the normal Ultra Greed room. The
   * `Room.GetBossID` function returns `BossID.ULTRA_GREED` (62) when fighting Ultra Greedier, but
   * the boss ID can be successfully retrieved from the `Entity.GetBossID` method.
   */
  ULTRA_GREEDIER = 71,

  MATRIARCH = 72,
  PILE = 73,
  REAP_CREEP = 74,
  LIL_BLUB = 75,
  WORMWOOD = 76,
  RAINMAKER = 77,
  VISAGE = 78,
  SIREN = 79,
  TUFF_TWINS = 80,
  HERETIC = 81,
  HORNFEL = 82,
  GREAT_GIDEON = 83,
  BABY_PLUM = 84,
  SCOURGE = 85,
  CHIMERA = 86,
  ROTGUT = 87,
  MOTHER = 88,
  MAUSOLEUM_MOM = 89,
  MAUSOLEUM_MOMS_HEART = 90,
  MIN_MIN = 91,
  CLOG = 92,
  SINGE = 93,
  BUMBINO = 94,
  COLOSTOMIA = 95,
  SHELL = 96,
  TURDLET = 97,

  /**
   * Raglich is currently unfinished and there are no boss rooms for it. However, the boss ID can be
   * successfully retrieved from the `Entity.GetBossID` method. This works for all variants of
   * `EntityType.RAGLICH` (919).
   */
  RAGLICH = 98,

  /**
   * Dogma does not have its own boss rooms; it appears in a normal room. The `Room.GetBossID`
   * function returns 0 inside of the Dogma Boss Room. However, the boss ID can be successfully
   * retrieved from the `Entity.GetBossID` method. This works for all variants of `EntityType.DOGMA`
   * (950).
   */
  DOGMA = 99,

  /**
   * The Beast does not have its own boss rooms; it appears in a crawl space. The `Room.GetBossID`
   * function returns 0 inside of The Beast Boss Room. However, the boss ID can be successfully
   * retrieved from the `Entity.GetBossID` method, but only if the variant is `BeastVariant.BEAST`
   * (0) or `BeastVariant.STALACTITE` (1).
   */
  BEAST = 100,

  HORNY_BOYS = 101,
  CLUTCH = 102,

  /**
   * There is an entry for "Cadavra" in the "bossportraits.xml" file, but it is not present in the
   * game.
   *
   * @see https://bindingofisaacrebirth.fandom.com/wiki/Cut_Content
   */
  // CADAVRA = 103,
}

/**
 * For `StageID.SPECIAL_ROOMS` (0), `RoomType.MINI_BOSS` (6).
 *
 * This matches the sub-type in the "00.special rooms.stb" file.
 *
 * The enum is named `MinibossID` instead of` MinibossRoomSubType` in order to match the `BossID`
 * enum.
 *
 * Also see the `BossID` enum.
 */
export enum MinibossID {
  SLOTH = 0,
  LUST = 1,
  WRATH = 2,
  GLUTTONY = 3,
  GREED = 4,
  ENVY = 5,
  PRIDE = 6,
  SUPER_SLOTH = 7,
  SUPER_LUST = 8,
  SUPER_WRATH = 9,
  SUPER_GLUTTONY = 10,
  SUPER_GREED = 11,
  SUPER_ENVY = 12,
  SUPER_PRIDE = 13,
  ULTRA_PRIDE = 14,
  KRAMPUS = 15,
}

// For `StageID.SPECIAL_ROOMS` (0), `RoomType.SUPER_SECRET` (8), the sub-type corresponds to the
// `BackdropType` enum.

/**
 * For `StageID.SPECIAL_ROOMS` (0), `RoomType.CURSE` (10).
 *
 * This matches the sub-type in the "00.special rooms.stb" file.
 */
export enum CurseRoomSubType {
  NORMAL = 0,
  VOODOO_HEAD = 1,
}

/**
 * For `StageID.SPECIAL_ROOMS` (0), `RoomType.CHALLENGE` (11).
 *
 * This matches the sub-type in the "00.special rooms.stb" file and elsewhere.
 */
export enum ChallengeRoomSubType {
  NORMAL = 0,
  BOSS = 1,
  NORMAL_WAVE = 10,
  BOSS_WAVE = 11,
  GREAT_GIDEON_WAVE = 12,
}

/**
 * For `StageID.SPECIAL_ROOMS` (0), `RoomType.LIBRARY` (12).
 *
 * This matches the sub-type in the "00.special rooms.stb" file.
 */
export enum LibrarySubType {
  LEVEL_1 = 0,
  LEVEL_2 = 1,
  LEVEL_3 = 2,
  LEVEL_4 = 3,
  LEVEL_5 = 4,
  EXTRA_GOOD = 10,
  EXTRA_BAD = 11,
  TAINTED_KEEPER_LEVEL_1 = 100,
  TAINTED_KEEPER_LEVEL_2 = 101,
  TAINTED_KEEPER_LEVEL_3 = 102,
  TAINTED_KEEPER_LEVEL_4 = 103,
  TAINTED_KEEPER_LEVEL_5 = 104,
  TAINTED_KEEPER_EXTRA_GOOD = 110,
  TAINTED_KEEPER_EXTRA_BAD = 111,
}

/**
 * For `StageID.SPECIAL_ROOMS` (0), `RoomType.DEVIL` (14).
 *
 * This matches the sub-type in the "00.special rooms.stb" file.
 */
export enum DevilRoomSubType {
  NORMAL = 0,
  NUMBER_SIX_TRINKET = 1,
}

/**
 * For `StageID.SPECIAL_ROOMS` (0), `RoomType.ANGEL` (15).
 *
 * This matches the sub-type in the "00.special rooms.stb" file.
 */
export enum AngelRoomSubType {
  NORMAL = 0,

  /** This is the kind of Angel Room that appears when players have The Stairway collectible. */
  SHOP = 1,
}

/**
 * For `StageID.SPECIAL_ROOMS` (0), `RoomType.DUNGEON` (16).
 *
 * This matches the sub-type in the "00.special rooms.stb" file and elsewhere.
 */
export enum DungeonSubType {
  NORMAL = 0,

  /** This is the room uncovered by throwing a Chaos Card at Great Gideon. */
  GIDEONS_GRAVE = 1,

  /** This is the room for the second phase of Rotgut. */
  ROTGUT_MAGGOT = 2,

  /** This is the room for the third phase of Rotgut. */
  ROTGUT_HEART = 3,

  BEAST_ROOM = 4,
}

/**
 * For `StageID.SPECIAL_ROOMS` (0), `RoomType.CLEAN_BEDROOM` (18).
 *
 * This matches the sub-type in the "00.special rooms.stb" file.
 */
export enum IsaacsRoomSubType {
  NORMAL = 0,
  GENESIS = 99,
}

/**
 * For `StageID.SPECIAL_ROOMS` (0), `RoomType.SECRET_EXIT` (27).
 *
 * This matches the sub-type in the "00.special rooms.stb" file.
 */
export enum SecretExitSubType {
  DOWNPOUR = 1,
  MINES = 2,
  MAUSOLEUM = 3,
}

/**
 * For `StageID.DOWNPOUR` (27) and `StageID.DROSS` (28), `RoomType.DEFAULT` (1).
 *
 * This matches the sub-type in the "27.downpour.stb" and "28.dross.stb" files.
 */
export enum DownpourRoomSubType {
  NORMAL = 0,
  WHITE_FIRE = 1,
  MIRROR = 34,
}

/**
 * For `StageID.MINES` (29) and `StageID.ASHPIT` (30), `RoomType.DEFAULT` (1).
 *
 * This matches the sub-type in the "29.mines.stb" and "30.ashpit.stb" files.
 */
export enum MinesRoomSubType {
  NORMAL = 0,
  BUTTON_ROOM = 1,
  MINESHAFT_ENTRANCE = 10,
  MINESHAFT_LOBBY = 11,
  MINESHAFT_KNIFE_PIECE = 20,
  MINESHAFT_ROOM_PRE_CHASE = 30,
  MINESHAFT_ROOM_POST_CHASE = 31,
}

/**
 * For `StageID.HOME` (35), `RoomType.DEFAULT` (1).
 *
 * This matches the sub-type in the "35.home.stb" file.
 */
export enum HomeRoomSubType {
  ISAACS_BEDROOM = 0,
  HALLWAY = 1,
  MOMS_BEDROOM = 2,
  LIVING_ROOM = 3,
  CLOSET_RIGHT = 10,
  CLOSET_LEFT = 11,
  DEATH_CERTIFICATE_ENTRANCE = 33,
  DEATH_CERTIFICATE_ITEMS = 34,
}

/**
 * For `StageID.BACKWARDS` (36), `RoomType.DEFAULT` (1).
 *
 * This matches the sub-type in the "36.backwards.stb" file.
 */
export enum BackwardsRoomSubType {
  EXIT = 0,
  BASEMENT = 1,
  CAVES = 4,
  DEPTHS = 7,
  DOWNPOUR = 27,
  MINES = 29,
  MAUSOLEUM = 31,
}

----
enums\collections\subTypes.ts
/* eslint-disable sort-exports/sort-exports */

/**
 * For `EntityType.PLAYER` (1), `PlayerVariant.PLAYER` (0).
 *
 * This is the sub-type of a player.
 *
 * This enum is contiguous. (Every value is satisfied between -1 and 40, inclusive.)
 *
 * Conventionally, variables that have this type are represented as "character" instead of
 * "playerType", since the former is more descriptive of what this value actually represents.
 */
export enum PlayerType {
  /** Used in the secret Possessor Mode added in Repentance. */
  POSSESSOR = -1,

  ISAAC = 0,
  MAGDALENE = 1,
  CAIN = 2,
  JUDAS = 3,
  BLUE_BABY = 4,
  EVE = 5,
  SAMSON = 6,
  AZAZEL = 7,
  LAZARUS = 8,
  EDEN = 9,
  LOST = 10,

  /** Lazarus Risen, from the Lazarus' Rags collectible. */
  LAZARUS_2 = 11,

  /** Dark Judas, from the Judas' Shadow collectible. */
  DARK_JUDAS = 12,

  LILITH = 13,
  KEEPER = 14,
  APOLLYON = 15,
  FORGOTTEN = 16,
  SOUL = 17,
  BETHANY = 18,
  JACOB = 19,
  ESAU = 20,

  /** Tainted Isaac */
  ISAAC_B = 21,

  /** Tainted Magdalene */
  MAGDALENE_B = 22,

  /** Tainted Cain */
  CAIN_B = 23,

  /** Tainted Judas */
  JUDAS_B = 24,

  /** Tainted Blue Baby */
  BLUE_BABY_B = 25,

  /** Tainted Eve */
  EVE_B = 26,

  /** Tainted Samson */
  SAMSON_B = 27,

  /** Tainted Azazel */
  AZAZEL_B = 28,

  /** Tainted Lazarus */
  LAZARUS_B = 29,

  /** Tainted Eden */
  EDEN_B = 30,

  /** Tainted Lost */
  LOST_B = 31,

  /** Tainted Lilith */
  LILITH_B = 32,

  /** Tainted Keeper */
  KEEPER_B = 33,

  /** Tainted Apollyon */
  APOLLYON_B = 34,

  /** Tainted Forgotten */
  FORGOTTEN_B = 35,

  /** Tainted Bethany */
  BETHANY_B = 36,

  /** Tainted Jacob */
  JACOB_B = 37,

  /** Dead Tainted Lazarus */
  LAZARUS_2_B = 38,

  /** Tainted Jacob in "Lost" form. */
  JACOB_2_B = 39,

  /** Tainted Soul */
  SOUL_B = 40,
}

/** For `EntityType.PLAYER` (1), `PlayerVariant.COOP_BABY` (1). */
export enum BabySubType {
  UNASSIGNED = -1,
  SPIDER = 0,
  LOVE = 1,
  BLOAT = 2,
  WATER = 3,
  PSY = 4,
  CURSED = 5,
  TROLL = 6,
  YBAB = 7,
  COCKEYED = 8,
  HOST = 9,
  LOST = 10,
  CUTE = 11,
  CROW = 12,
  SHADOW = 13,
  GLASS = 14,
  GOLD = 15,
  CY = 16,
  BEAN = 17,
  MAG = 18,
  WRATH = 19,
  WRAPPED = 20,
  BEGOTTEN = 21,
  DEAD = 22,
  FIGHTING = 23,
  ZERO = 24,
  GLITCH = 25,
  MAGNET = 26,
  BLACK = 27,
  RED = 28,
  WHITE = 29,
  BLUE = 30,
  RAGE = 31,
  CRY = 32,
  YELLOW = 33,
  LONG = 34,
  GREEN = 35,
  LIL = 36,
  BIG = 37,
  BROWN = 38,
  NOOSE = 39,
  HIVE = 40,
  BUDDY = 41,
  COLORFUL = 42,
  WHORE = 43,
  CRACKED = 44,
  DRIPPING = 45,
  BLINDING = 46,
  SUCKY = 47,
  DARK = 48,
  PICKY = 49,
  REVENGE = 50,
  BELIAL = 51,
  SALE = 52,
  GOAT = 53,
  SUPER_GREED = 54,
  MORT = 55,
  APOLLYON = 56,
  BONE = 57,
  BOUND = 58,
  FOUND_SOUL = 59,
  LOST_WHITE = 60,
  LOST_BLACK = 61,
  LOST_BLUE = 62,
  LOST_GREY = 63,
  WISP = 64,
  DOUBLE = 65,
  GLOWING = 66,
  ILLUSION = 67,
  HOPE = 68,
  SOLOMON_A = 69,
  SOLOMON_B = 70,
  BASIC = 71,
}

/** For `EntityType.FAMILIAR` (3), `FamiliarVariant.BLUE_FLY` (43). */
export enum BlueFlySubType {
  /** A standard fly, like what you get from using Guppy's Head. */
  BLUE_FLY = 0,

  /** Red (explosive) */
  WRATH = 1,

  /** Green (poison) */
  PESTILENCE = 2,

  /** Yellow (slowing) */
  FAMINE = 3,

  /** Black (double-damage) */
  DEATH = 4,

  /** White */
  CONQUEST = 5,
}

/** For `EntityType.FAMILIAR` (3), `FamiliarVariant.DIP` (201). */
export enum DipFamiliarSubType {
  NORMAL = 0,
  RED = 1,
  CORNY = 2,
  GOLD = 3,
  RAINBOW = 4,
  BLACK = 5,
  WHITE = 6,
  STONE = 12,
  FLAMING = 13,
  STINKY = 14,
  BROWNIE = 20,
}

/** For `EntityType.FAMILIAR` (3), `FamiliarVariant.BLOOD_BABY` (238). */
export enum BloodClotSubType {
  RED = 0,
  SOUL = 1,
  BLACK = 2,
  ETERNAL = 3,
  GOLD = 4,
  BONE = 5,
  ROTTEN = 6,

  /** Spawned by the Blood Clot trinket; cannot be turned into health by Sumptorium. */
  RED_NO_SUMPTORIUM = 7,
}

/** For `EntityType.PICKUP` (5), `PickupVariant.NULL` (0). */
export enum PickupNullSubType {
  /** Has a chance to spawn any possible pickup, including collectibles. */
  ALL = 0,

  EXCLUDE_COLLECTIBLES_CHESTS = 1,
  EXCLUDE_COLLECTIBLES = 2,
  EXCLUDE_COLLECTIBLES_CHESTS_COINS = 3,
  EXCLUDE_COLLECTIBLES_TRINKETS_CHESTS = 4,
}

/** For `EntityType.PICKUP` (5), `PickupVariant.HEART` (10). */
export enum HeartSubType {
  /**
   * Spawning hearts with this sub-type will produce a random heart with the following
   * probabilities:
   *
   * - `HeartSubType.FULL` (1) - 39.98%
   * - `HeartSubType.HALF` (2) - 39.99%
   * - `HeartSubType.SOUL` (3) - 6.73%
   * - `HeartSubType.ETERNAL` (4) - 1.80%
   * - `HeartSubType.DOUBLE_PACK` (5) - 4.21%
   * - `HeartSubType.BLACK` (6) - 0.50%
   * - `HeartSubType.GOLDEN` (7) - 0.63%
   * - `HeartSubType.HALF_SOUL` (8) - 2.24%
   * - `HeartSubType.SCARED` (9) - 0.87%
   * - `HeartSubType.BLENDED` (10) - 0.87%
   * - `HeartSubType.BONE` (11) - 0.47%
   * - `HeartSubType.ROTTEN` (12) - 1.71%
   */
  NULL = 0,

  FULL = 1,
  HALF = 2,
  SOUL = 3,
  ETERNAL = 4,
  DOUBLE_PACK = 5,
  BLACK = 6,
  GOLDEN = 7,
  HALF_SOUL = 8,
  SCARED = 9,
  BLENDED = 10,
  BONE = 11,
  ROTTEN = 12,
}

/** For `EntityType.PICKUP` (5), `PickupVariant.COIN` (20). */
export enum CoinSubType {
  /**
   * Spawning coins with this sub-type will produce a random coin with the following probabilities:
   *
   * - `CoinSubType.PENNY` (1) - 92.63%
   * - `CoinSubType.NICKEL` (2) - 4.68%
   * - `CoinSubType.DIME` (3) - 1.00%
   * - `CoinSubType.DOUBLE_PACK` (4) - 0.00% (never spawns)
   * - `CoinSubType.LUCKY_PENNY` (5) - 0.94%
   * - `CoinSubType.STICKY_NICKEL` (6) - 0.25%
   * - `CoinSubType.GOLDEN` (7) - 0.50%
   */
  NULL = 0,

  PENNY = 1,
  NICKEL = 2,
  DIME = 3,
  DOUBLE_PACK = 4,
  LUCKY_PENNY = 5,
  STICKY_NICKEL = 6,
  GOLDEN = 7,
}

/** For `EntityType.PICKUP` (5), `PickupVariant.KEY` (30). */
export enum KeySubType {
  /**
   * Spawning keys with this sub-type will produce a random key with the following probabilities:
   *
   * - `KeySubType.NORMAL` (1) - 96.08%
   * - `KeySubType.GOLDEN` (2) - 1.97%
   * - `KeySubType.DOUBLE_PACK` (3) - 0.00% (never spawns)
   * - `KeySubType.CHARGED` (4) - 1.96%
   */
  NULL = 0,

  NORMAL = 1,
  GOLDEN = 2,
  DOUBLE_PACK = 3,
  CHARGED = 4,
}

/** For `EntityType.PICKUP` (5), `PickupVariant.BOMB` (40). */
export enum BombSubType {
  /**
   * Spawning bombs with this sub-type will produce a random bomb with the following probabilities:
   *
   * - `BombSubType.NORMAL` (1) - 74.84%
   * - `BombSubType.DOUBLE_PACK` (2) - 12.47%
   * - `BombSubType.TROLL` (3) - 9.9%
   * - `BombSubType.GOLDEN` (4) - 0.89%
   * - `BombSubType.MEGA_TROLL` (5) - 1.78%
   * - `BombSubType.GOLDEN_TROLL` (6) - 0.12%
   * - `BombSubType.GIGA` (7) - 0.00% (never spawns)
   */
  NULL = 0,

  NORMAL = 1,
  DOUBLE_PACK = 2,
  TROLL = 3,
  GOLDEN = 4,
  MEGA_TROLL = 5,
  GOLDEN_TROLL = 6,
  GIGA = 7,
}

/** For `EntityType.PICKUP` (5), `PickupVariant.POOP` (42). */
export enum PoopPickupSubType {
  /** Equal to "Poop Nugget" in "entities2.xml". */
  SMALL = 0,

  /** Equal to "Big Poop Nugget" in "entities2.xml". */
  BIG = 1,
}

/** For `EntityType.PICKUP` (5), `PickupVariant.CHEST` (50). */
export enum ChestSubType {
  OPENED = 0,
  CLOSED = 1,
}

/** For `EntityType.PICKUP` (5), `PickupVariant.SACK` (69). */
export enum SackSubType {
  /**
   * Spawning sacks with this sub-type will produce a random sack with the following probabilities:
   *
   * - `SackSubType.NORMAL` (1) - 99.0%
   * - `SackSubType.BLACK` (2) - 1.0%
   */
  NULL = 0,

  NORMAL = 1,
  BLACK = 2,
}

/**
 * For `EntityType.PICKUP` (5), `PickupVariant.PILL` (70).
 *
 * This is the sub-type of a pill.
 */
export enum PillColor {
  /**
   * Spawning pills with this sub-type will produce a random pill with the following probabilities:
   *
   * - Random normal pill - 97.86%
   * - Specific normal pill - 7.53%
   * - Gold pill - 0.7%
   * - Random horse pill - 1.43%
   * - Specific horse pill - 0.11%
   * - Horse gold pill - 0.01%
   */
  NULL = 0,

  BLUE_BLUE = 1,
  WHITE_BLUE = 2,
  ORANGE_ORANGE = 3,
  WHITE_WHITE = 4,
  RED_DOTS_RED = 5,
  PINK_RED = 6,
  BLUE_CADET_BLUE = 7,
  YELLOW_ORANGE = 8,
  ORANGE_DOTS_WHITE = 9,
  WHITE_AZURE = 10,
  BLACK_YELLOW = 11,
  WHITE_BLACK = 12,
  WHITE_YELLOW = 13,

  GOLD = 14,

  HORSE_BLUE_BLUE = 2049,
  HORSE_WHITE_BLUE = 2050,
  HORSE_ORANGE_ORANGE = 2051,
  HORSE_WHITE_WHITE = 2052,
  HORSE_RED_DOTS_RED = 2053,
  HORSE_PINK_RED = 2054,
  HORSE_BLUE_CADET_BLUE = 2055,
  HORSE_YELLOW_ORANGE = 2056,
  HORSE_ORANGE_DOTS_WHITE = 2057,
  HORSE_WHITE_AZURE = 2058,
  HORSE_BLACK_YELLOW = 2059,
  HORSE_WHITE_BLACK = 2060,
  HORSE_WHITE_YELLOW = 2061,

  HORSE_GOLD = 2062,
}

/** For `EntityType.PICKUP` (5), `PickupVariant.LIL_BATTERY` (90). */
export enum BatterySubType {
  /**
   * Spawning batteries with this sub-type will produce a random battery with the following
   * probabilities:
   *
   * - `BatterySubType.NORMAL` (1) - 32.72%
   * - `BatterySubType.MICRO` (2) - 65.44%
   * - `BatterySubType.MEGA` (3) - 1.00%
   * - `BatterySubType.GOLDEN` (4) - 0.83%
   */
  NULL = 0,

  NORMAL = 1,
  MICRO = 2,
  MEGA = 3,
  GOLDEN = 4,
}

/**
 * For `EntityType.PICKUP` (5), `PickupVariant.COLLECTIBLE` (100).
 *
 * This is the sub-type of a collectible.
 *
 * This enum is not contiguous. In other words, the enum ranges from `CollectibleType.NULL` (0) to
 * `CollectibleType.MOMS_RING` (732), but there is no corresponding `CollectibleType` with the
 * following values:
 *
 * 1. 43 (Pills here)
 * 2. 61 (Tarot Card)
 * 3. 235
 * 4. 587 (Menorah)
 * 5. 613 (Salt Shaker)
 * 6. 620 (Voodoo Pin)
 * 7. 630 (Lucky Seven)
 * 8. 648 (Pill Crusher)
 * 9. 662
 * 10. 666
 * 11. 718
 */
export enum CollectibleType {
  /** Spawning collectibles with this sub-type will produce a random collectible. */
  NULL = 0,

  SAD_ONION = 1,
  INNER_EYE = 2,
  SPOON_BENDER = 3,
  CRICKETS_HEAD = 4,
  MY_REFLECTION = 5,
  NUMBER_ONE = 6,
  BLOOD_OF_THE_MARTYR = 7,
  BROTHER_BOBBY = 8,
  SKATOLE = 9,
  HALO_OF_FLIES = 10,
  ONE_UP = 11,
  MAGIC_MUSHROOM = 12,
  VIRUS = 13,
  ROID_RAGE = 14,

  /** <3 */
  HEART = 15,

  RAW_LIVER = 16,
  SKELETON_KEY = 17,
  DOLLAR = 18,
  BOOM = 19,
  TRANSCENDENCE = 20,
  COMPASS = 21,
  LUNCH = 22,
  DINNER = 23,
  DESSERT = 24,
  BREAKFAST = 25,
  ROTTEN_MEAT = 26,
  WOODEN_SPOON = 27,
  BELT = 28,
  MOMS_UNDERWEAR = 29,
  MOMS_HEELS = 30,
  MOMS_LIPSTICK = 31,
  WIRE_COAT_HANGER = 32,
  BIBLE = 33,
  BOOK_OF_BELIAL = 34,
  NECRONOMICON = 35,
  POOP = 36,
  MR_BOOM = 37,
  TAMMYS_HEAD = 38,
  MOMS_BRA = 39,
  KAMIKAZE = 40,
  MOMS_PAD = 41,
  BOBS_ROTTEN_HEAD = 42,

  // - There is no enum member with a value of 43. (This has a placeholder name of "Pills here" in
  //   the "items.xml" file.)

  TELEPORT = 44,
  YUM_HEART = 45,
  LUCKY_FOOT = 46,
  DOCTORS_REMOTE = 47,
  CUPIDS_ARROW = 48,
  SHOOP_DA_WHOOP = 49,
  STEVEN = 50,
  PENTAGRAM = 51,
  DR_FETUS = 52,
  MAGNETO = 53,
  TREASURE_MAP = 54,
  MOMS_EYE = 55,
  LEMON_MISHAP = 56,
  DISTANT_ADMIRATION = 57,
  BOOK_OF_SHADOWS = 58,

  /**
   * This is the collectible that Judas is granted when he picks up Birthright. It acts in a similar
   * way to Book of Virtues.
   */
  BOOK_OF_BELIAL_BIRTHRIGHT = 59,

  LADDER = 60,

  // - There is no enum member with a value of 61. (This has a placeholder name of "Tarot Card" in
  //   the "items.xml" file.)

  CHARM_OF_THE_VAMPIRE = 62,
  BATTERY = 63,
  STEAM_SALE = 64,
  ANARCHIST_COOKBOOK = 65,
  HOURGLASS = 66,
  SISTER_MAGGY = 67,
  TECHNOLOGY = 68,
  CHOCOLATE_MILK = 69,
  GROWTH_HORMONES = 70,
  MINI_MUSH = 71,
  ROSARY = 72,
  CUBE_OF_MEAT = 73,
  QUARTER = 74,
  PHD = 75,
  XRAY_VISION = 76,
  MY_LITTLE_UNICORN = 77,
  BOOK_OF_REVELATIONS = 78,
  MARK = 79,
  PACT = 80,
  DEAD_CAT = 81,
  LORD_OF_THE_PIT = 82,
  NAIL = 83,
  WE_NEED_TO_GO_DEEPER = 84,
  DECK_OF_CARDS = 85,
  MONSTROS_TOOTH = 86,
  LOKIS_HORNS = 87,
  LITTLE_CHUBBY = 88,
  SPIDER_BITE = 89,
  SMALL_ROCK = 90,
  SPELUNKER_HAT = 91,
  SUPER_BANDAGE = 92,
  GAMEKID = 93,
  SACK_OF_PENNIES = 94,
  ROBO_BABY = 95,
  LITTLE_CHAD = 96,
  BOOK_OF_SIN = 97,
  RELIC = 98,
  LITTLE_GISH = 99,
  LITTLE_STEVEN = 100,
  HALO = 101,
  MOMS_BOTTLE_OF_PILLS = 102,
  COMMON_COLD = 103,
  PARASITE = 104,
  D6 = 105,
  MR_MEGA = 106,
  PINKING_SHEARS = 107,
  WAFER = 108,
  MONEY_EQUALS_POWER = 109,
  MOMS_CONTACTS = 110,
  BEAN = 111,
  GUARDIAN_ANGEL = 112,
  DEMON_BABY = 113,
  MOMS_KNIFE = 114,
  OUIJA_BOARD = 115,
  NINE_VOLT = 116,
  DEAD_BIRD = 117,
  BRIMSTONE = 118,
  BLOOD_BAG = 119,
  ODD_MUSHROOM_THIN = 120,
  ODD_MUSHROOM_LARGE = 121,
  WHORE_OF_BABYLON = 122,
  MONSTER_MANUAL = 123,
  DEAD_SEA_SCROLLS = 124,
  BOBBY_BOMB = 125,
  RAZOR_BLADE = 126,
  FORGET_ME_NOW = 127,
  FOREVER_ALONE = 128,
  BUCKET_OF_LARD = 129,
  PONY = 130,
  BOMB_BAG = 131,
  LUMP_OF_COAL = 132,
  GUPPYS_PAW = 133,
  GUPPYS_TAIL = 134,
  IV_BAG = 135,
  BEST_FRIEND = 136,
  REMOTE_DETONATOR = 137,
  STIGMATA = 138,
  MOMS_PURSE = 139,
  BOBS_CURSE = 140,
  PAGEANT_BOY = 141,
  SCAPULAR = 142,
  SPEED_BALL = 143,
  BUM_FRIEND = 144,
  GUPPYS_HEAD = 145,
  PRAYER_CARD = 146,
  NOTCHED_AXE = 147,
  INFESTATION = 148,
  IPECAC = 149,
  TOUGH_LOVE = 150,
  MULLIGAN = 151,
  TECHNOLOGY_2 = 152,
  MUTANT_SPIDER = 153,
  CHEMICAL_PEEL = 154,
  PEEPER = 155,
  HABIT = 156,
  BLOODY_LUST = 157,
  CRYSTAL_BALL = 158,
  SPIRIT_OF_THE_NIGHT = 159,
  CRACK_THE_SKY = 160,
  ANKH = 161,
  CELTIC_CROSS = 162,
  GHOST_BABY = 163,
  CANDLE = 164,
  CAT_O_NINE_TAILS = 165,
  D20 = 166,
  HARLEQUIN_BABY = 167,
  EPIC_FETUS = 168,
  POLYPHEMUS = 169,
  DADDY_LONGLEGS = 170,
  SPIDER_BUTT = 171,
  SACRIFICIAL_DAGGER = 172,
  MITRE = 173,
  RAINBOW_BABY = 174,
  DADS_KEY = 175,
  STEM_CELLS = 176,
  PORTABLE_SLOT = 177,
  HOLY_WATER = 178,
  FATE = 179,
  BLACK_BEAN = 180,
  WHITE_PONY = 181,
  SACRED_HEART = 182,
  TOOTH_PICKS = 183,
  HOLY_GRAIL = 184,
  DEAD_DOVE = 185,
  BLOOD_RIGHTS = 186,
  GUPPYS_HAIRBALL = 187,
  ABEL = 188,
  SMB_SUPER_FAN = 189,
  PYRO = 190,
  THREE_DOLLAR_BILL = 191,
  TELEPATHY_BOOK = 192,
  MEAT = 193,
  MAGIC_8_BALL = 194,
  MOMS_COIN_PURSE = 195,
  SQUEEZY = 196,
  JESUS_JUICE = 197,
  BOX = 198,
  MOMS_KEY = 199,
  MOMS_EYESHADOW = 200,
  IRON_BAR = 201,
  MIDAS_TOUCH = 202,
  HUMBLEING_BUNDLE = 203, // Intentionally misspelled to match the in-game spelling.
  FANNY_PACK = 204,
  SHARP_PLUG = 205,
  GUILLOTINE = 206,
  BALL_OF_BANDAGES = 207,
  CHAMPION_BELT = 208,
  BUTT_BOMBS = 209,
  GNAWED_LEAF = 210,
  SPIDERBABY = 211,
  GUPPYS_COLLAR = 212,
  LOST_CONTACT = 213,
  ANEMIC = 214,
  GOAT_HEAD = 215,
  CEREMONIAL_ROBES = 216,
  MOMS_WIG = 217,
  PLACENTA = 218,
  OLD_BANDAGE = 219,
  SAD_BOMBS = 220,
  RUBBER_CEMENT = 221,
  ANTI_GRAVITY = 222,
  PYROMANIAC = 223,
  CRICKETS_BODY = 224,
  GIMPY = 225,
  BLACK_LOTUS = 226,
  PIGGY_BANK = 227,
  MOMS_PERFUME = 228,
  MONSTROS_LUNG = 229,
  ABADDON = 230,
  BALL_OF_TAR = 231,
  STOP_WATCH = 232,
  TINY_PLANET = 233,
  INFESTATION_2 = 234,

  // - There is no enum member with a value of 235.

  E_COLI = 236,
  DEATHS_TOUCH = 237,
  KEY_PIECE_1 = 238,
  KEY_PIECE_2 = 239,
  EXPERIMENTAL_TREATMENT = 240,
  CONTRACT_FROM_BELOW = 241,
  INFAMY = 242,
  TRINITY_SHIELD = 243,
  TECH_5 = 244,
  TWENTY_TWENTY = 245,
  BLUE_MAP = 246,
  BFFS = 247,
  HIVE_MIND = 248,
  THERES_OPTIONS = 249,
  BOGO_BOMBS = 250,
  STARTER_DECK = 251,
  LITTLE_BAGGY = 252,
  MAGIC_SCAB = 253,
  BLOOD_CLOT = 254,
  SCREW = 255,
  HOT_BOMBS = 256,
  FIRE_MIND = 257,
  MISSING_NO = 258,
  DARK_MATTER = 259,
  BLACK_CANDLE = 260,
  PROPTOSIS = 261,
  MISSING_PAGE_2 = 262,
  CLEAR_RUNE = 263,
  SMART_FLY = 264,
  DRY_BABY = 265,
  JUICY_SACK = 266,
  ROBO_BABY_2 = 267,
  ROTTEN_BABY = 268,
  HEADLESS_BABY = 269,
  LEECH = 270,
  MYSTERY_SACK = 271,
  BBF = 272,
  BOBS_BRAIN = 273,
  BEST_BUD = 274,
  LIL_BRIMSTONE = 275,
  ISAACS_HEART = 276,
  LIL_HAUNT = 277,
  DARK_BUM = 278,
  BIG_FAN = 279,
  SISSY_LONGLEGS = 280,
  PUNCHING_BAG = 281,
  HOW_TO_JUMP = 282,
  D100 = 283,
  D4 = 284,
  D10 = 285,
  BLANK_CARD = 286,
  BOOK_OF_SECRETS = 287,
  BOX_OF_SPIDERS = 288,
  RED_CANDLE = 289,
  JAR = 290,
  FLUSH = 291,
  SATANIC_BIBLE = 292,
  HEAD_OF_KRAMPUS = 293,
  BUTTER_BEAN = 294,
  MAGIC_FINGERS = 295,
  CONVERTER = 296,
  BLUE_BOX = 297,
  UNICORN_STUMP = 298,
  TAURUS = 299,
  ARIES = 300,
  CANCER = 301,
  LEO = 302,
  VIRGO = 303,
  LIBRA = 304,
  SCORPIO = 305,
  SAGITTARIUS = 306,
  CAPRICORN = 307,
  AQUARIUS = 308,
  PISCES = 309,
  EVES_MASCARA = 310,
  JUDAS_SHADOW = 311,
  MAGGYS_BOW = 312,
  HOLY_MANTLE = 313,
  THUNDER_THIGHS = 314,
  STRANGE_ATTRACTOR = 315,
  CURSED_EYE = 316,
  MYSTERIOUS_LIQUID = 317,
  GEMINI = 318,
  CAINS_OTHER_EYE = 319,
  BLUE_BABYS_ONLY_FRIEND = 320,
  SAMSONS_CHAINS = 321,
  MONGO_BABY = 322,
  ISAACS_TEARS = 323,
  UNDEFINED = 324,
  SCISSORS = 325,
  BREATH_OF_LIFE = 326,
  POLAROID = 327,
  NEGATIVE = 328,
  LUDOVICO_TECHNIQUE = 329,
  SOY_MILK = 330,
  GODHEAD = 331,
  LAZARUS_RAGS = 332,
  MIND = 333,
  BODY = 334,
  SOUL = 335,
  DEAD_ONION = 336,
  BROKEN_WATCH = 337,
  BOOMERANG = 338,
  SAFETY_PIN = 339,
  CAFFEINE_PILL = 340,
  TORN_PHOTO = 341,
  BLUE_CAP = 342,
  LATCH_KEY = 343,
  MATCH_BOOK = 344,
  SYNTHOIL = 345,
  SNACK = 346,
  DIPLOPIA = 347,
  PLACEBO = 348,
  WOODEN_NICKEL = 349,
  TOXIC_SHOCK = 350,
  MEGA_BEAN = 351,
  GLASS_CANNON = 352,
  BOMBER_BOY = 353,
  CRACK_JACKS = 354,
  MOMS_PEARLS = 355,
  CAR_BATTERY = 356,
  BOX_OF_FRIENDS = 357,
  WIZ = 358,
  EIGHT_INCH_NAILS = 359,
  INCUBUS = 360,
  FATES_REWARD = 361,
  LIL_CHEST = 362,
  SWORN_PROTECTOR = 363,
  FRIEND_ZONE = 364,
  LOST_FLY = 365,
  SCATTER_BOMBS = 366,
  STICKY_BOMBS = 367,
  EPIPHORA = 368,
  CONTINUUM = 369,
  MR_DOLLY = 370,
  CURSE_OF_THE_TOWER = 371,
  CHARGED_BABY = 372,
  DEAD_EYE = 373,
  HOLY_LIGHT = 374,
  HOST_HAT = 375,
  RESTOCK = 376,
  BURSTING_SACK = 377,
  NUMBER_TWO = 378,
  PUPULA_DUPLEX = 379,
  PAY_TO_PLAY = 380,
  EDENS_BLESSING = 381,
  FRIEND_BALL = 382,
  TEAR_DETONATOR = 383,
  LIL_GURDY = 384,
  BUMBO = 385,
  D12 = 386,
  CENSER = 387,
  KEY_BUM = 388,
  RUNE_BAG = 389,
  SERAPHIM = 390,
  BETRAYAL = 391,
  ZODIAC = 392,
  SERPENTS_KISS = 393,
  MARKED = 394,
  TECH_X = 395,
  VENTRICLE_RAZOR = 396,
  TRACTOR_BEAM = 397,
  GODS_FLESH = 398,
  MAW_OF_THE_VOID = 399,
  SPEAR_OF_DESTINY = 400,
  EXPLOSIVO = 401,
  CHAOS = 402,
  SPIDER_MOD = 403,
  FARTING_BABY = 404,
  GB_BUG = 405,
  D8 = 406,
  PURITY = 407,
  ATHAME = 408,
  EMPTY_VESSEL = 409,
  EVIL_EYE = 410,
  LUSTY_BLOOD = 411,
  CAMBION_CONCEPTION = 412,
  IMMACULATE_CONCEPTION = 413,
  MORE_OPTIONS = 414,
  CROWN_OF_LIGHT = 415,
  DEEP_POCKETS = 416,
  SUCCUBUS = 417,
  FRUIT_CAKE = 418,
  TELEPORT_2 = 419,
  BLACK_POWDER = 420,
  KIDNEY_BEAN = 421,
  GLOWING_HOUR_GLASS = 422,
  CIRCLE_OF_PROTECTION = 423,
  SACK_HEAD = 424,
  NIGHT_LIGHT = 425,
  OBSESSED_FAN = 426,
  MINE_CRAFTER = 427,
  PJS = 428,
  HEAD_OF_THE_KEEPER = 429,
  PAPA_FLY = 430,
  MULTIDIMENSIONAL_BABY = 431,
  GLITTER_BOMBS = 432,
  MY_SHADOW = 433,
  JAR_OF_FLIES = 434,
  LIL_LOKI = 435,
  MILK = 436,
  D7 = 437,
  BINKY = 438,
  MOMS_BOX = 439,
  KIDNEY_STONE = 440,
  MEGA_BLAST = 441,
  DARK_PRINCES_CROWN = 442,
  APPLE = 443,
  LEAD_PENCIL = 444,
  DOG_TOOTH = 445,
  DEAD_TOOTH = 446,
  LINGER_BEAN = 447,
  SHARD_OF_GLASS = 448,
  METAL_PLATE = 449,
  EYE_OF_GREED = 450,
  TAROT_CLOTH = 451,
  VARICOSE_VEINS = 452,
  COMPOUND_FRACTURE = 453,
  POLYDACTYLY = 454,
  DADS_LOST_COIN = 455,
  MIDNIGHT_SNACK = 456,
  CONE_HEAD = 457,
  BELLY_BUTTON = 458,
  SINUS_INFECTION = 459,
  GLAUCOMA = 460,
  PARASITOID = 461,
  EYE_OF_BELIAL = 462,
  SULFURIC_ACID = 463,
  GLYPH_OF_BALANCE = 464,
  ANALOG_STICK = 465,
  CONTAGION = 466,
  FINGER = 467,
  SHADE = 468,
  DEPRESSION = 469,
  HUSHY = 470,
  LIL_MONSTRO = 471,
  KING_BABY = 472,
  BIG_CHUBBY = 473,
  BROKEN_GLASS_CANNON = 474,
  PLAN_C = 475,
  D1 = 476,
  VOID = 477,
  PAUSE = 478,
  SMELTER = 479,
  COMPOST = 480,
  DATAMINER = 481,
  CLICKER = 482,
  MAMA_MEGA = 483,
  WAIT_WHAT = 484,
  CROOKED_PENNY = 485,
  DULL_RAZOR = 486,
  POTATO_PEELER = 487,
  METRONOME = 488,
  D_INFINITY = 489,
  EDENS_SOUL = 490,
  ACID_BABY = 491,
  YO_LISTEN = 492,
  ADRENALINE = 493,
  JACOBS_LADDER = 494,
  GHOST_PEPPER = 495,
  EUTHANASIA = 496,
  CAMO_UNDIES = 497,
  DUALITY = 498,
  EUCHARIST = 499,
  SACK_OF_SACKS = 500,
  GREEDS_GULLET = 501,
  LARGE_ZIT = 502,
  LITTLE_HORN = 503,
  BROWN_NUGGET = 504,
  POKE_GO = 505,
  BACKSTABBER = 506,
  SHARP_STRAW = 507,
  MOMS_RAZOR = 508,
  BLOODSHOT_EYE = 509,
  DELIRIOUS = 510,
  ANGRY_FLY = 511,
  BLACK_HOLE = 512,
  BOZO = 513,
  BROKEN_MODEM = 514,
  MYSTERY_GIFT = 515,
  SPRINKLER = 516,
  FAST_BOMBS = 517,
  BUDDY_IN_A_BOX = 518,
  LIL_DELIRIUM = 519,
  JUMPER_CABLES = 520,
  COUPON = 521,
  TELEKINESIS = 522,
  MOVING_BOX = 523,
  TECHNOLOGY_ZERO = 524,
  LEPROSY = 525,
  SEVEN_SEALS = 526,
  MR_ME = 527,
  ANGELIC_PRISM = 528,
  POP = 529,
  DEATHS_LIST = 530,
  HAEMOLACRIA = 531,
  LACHRYPHAGY = 532,
  TRISAGION = 533,
  SCHOOLBAG = 534,
  BLANKET = 535,
  SACRIFICIAL_ALTAR = 536,
  LIL_SPEWER = 537,
  MARBLES = 538,
  MYSTERY_EGG = 539,
  FLAT_STONE = 540,
  MARROW = 541,
  SLIPPED_RIB = 542,
  HALLOWED_GROUND = 543,
  POINTY_RIB = 544,
  BOOK_OF_THE_DEAD = 545,
  DADS_RING = 546,
  DIVORCE_PAPERS = 547,
  JAW_BONE = 548,
  BRITTLE_BONES = 549,
  BROKEN_SHOVEL_1 = 550,
  BROKEN_SHOVEL_2 = 551,
  MOMS_SHOVEL = 552,
  MUCORMYCOSIS = 553,
  TWO_SPOOKY = 554,
  GOLDEN_RAZOR = 555,
  SULFUR = 556,
  FORTUNE_COOKIE = 557,
  EYE_SORE = 558,
  ONE_HUNDRED_TWENTY_VOLT = 559,
  IT_HURTS = 560,
  ALMOND_MILK = 561,
  ROCK_BOTTOM = 562,
  NANCY_BOMBS = 563,
  BAR_OF_SOAP = 564,
  BLOOD_PUPPY = 565,
  DREAM_CATCHER = 566,
  PASCHAL_CANDLE = 567,
  DIVINE_INTERVENTION = 568,
  BLOOD_OATH = 569,
  PLAYDOUGH_COOKIE = 570,
  ORPHAN_SOCKS = 571,
  EYE_OF_THE_OCCULT = 572,
  IMMACULATE_HEART = 573,
  MONSTRANCE = 574,
  INTRUDER = 575,
  DIRTY_MIND = 576,
  DAMOCLES = 577,
  FREE_LEMONADE = 578,
  SPIRIT_SWORD = 579,
  RED_KEY = 580,
  PSY_FLY = 581,
  WAVY_CAP = 582,
  ROCKET_IN_A_JAR = 583,
  BOOK_OF_VIRTUES = 584,
  ALABASTER_BOX = 585,
  STAIRWAY = 586,

  // - There is no enum member with a value of 587. (This used to be the ID for Menorah before it
  //   was cut from Repentance.)

  SOL = 588,
  LUNA = 589,
  MERCURIUS = 590,
  VENUS = 591,
  TERRA = 592,
  MARS = 593,
  JUPITER = 594,
  SATURNUS = 595,
  URANUS = 596,
  NEPTUNUS = 597,
  PLUTO = 598,
  VOODOO_HEAD = 599,
  EYE_DROPS = 600,
  ACT_OF_CONTRITION = 601,
  MEMBER_CARD = 602,
  BATTERY_PACK = 603,
  MOMS_BRACELET = 604,
  SCOOPER = 605,
  OCULAR_RIFT = 606,
  BOILED_BABY = 607,
  FREEZER_BABY = 608,
  ETERNAL_D6 = 609, // eslint-disable-line isaacscript/enum-member-number-separation
  BIRD_CAGE = 610,
  LARYNX = 611,
  LOST_SOUL = 612,

  // - There is no enum member with a value of 613. (This used to be the ID for Salt Shaker before
  //   it was cut from Repentance.)

  BLOOD_BOMBS = 614,
  LIL_DUMPY = 615,
  BIRDS_EYE = 616,
  LODESTONE = 617,
  ROTTEN_TOMATO = 618,
  BIRTHRIGHT = 619,

  // - There is no enum member with a value of 620. (This used to be the ID for Voodoo Pin before it
  //   was cut from Repentance.)

  RED_STEW = 621,
  GENESIS = 622,
  SHARP_KEY = 623,
  BOOSTER_PACK = 624,
  MEGA_MUSH = 625,
  KNIFE_PIECE_1 = 626,
  KNIFE_PIECE_2 = 627,
  DEATH_CERTIFICATE = 628,
  BOT_FLY = 629,

  // - There is no enum member with a value of 630. (This used to be the ID for Lucky Seven before
  //   it was cut from Repentance.)

  MEAT_CLEAVER = 631,
  EVIL_CHARM = 632,
  DOGMA = 633,
  PURGATORY = 634,
  STITCHES = 635,
  R_KEY = 636,
  KNOCKOUT_DROPS = 637,
  ERASER = 638,
  YUCK_HEART = 639,
  URN_OF_SOULS = 640,
  AKELDAMA = 641,
  MAGIC_SKIN = 642,
  REVELATION = 643,
  CONSOLATION_PRIZE = 644,
  TINYTOMA = 645,
  BRIMSTONE_BOMBS = 646,
  FOUR_FIVE_VOLT = 647,

  // - There is no enum member with a value of 648. (This used to be the ID for Pill Crusher before
  //   it was cut from Repentance.)

  FRUITY_PLUM = 649,
  PLUM_FLUTE = 650,
  STAR_OF_BETHLEHEM = 651,
  CUBE_BABY = 652,
  VADE_RETRO = 653,
  FALSE_PHD = 654,
  SPIN_TO_WIN = 655,
  DAMOCLES_PASSIVE = 656,
  VASCULITIS = 657,
  GIANT_CELL = 658,
  TROPICAMIDE = 659,
  CARD_READING = 660,
  QUINTS = 661,

  // - There is no enum member with a value of 662.

  TOOTH_AND_NAIL = 663,
  BINGE_EATER = 664,
  GUPPYS_EYE = 665,

  // - There is no enum member with a value of 666.

  STRAWMAN = 667,
  DADS_NOTE = 668,
  SAUSAGE = 669,
  OPTIONS = 670,
  CANDY_HEART = 671,
  POUND_OF_FLESH = 672,
  REDEMPTION = 673,
  SPIRIT_SHACKLES = 674,
  CRACKED_ORB = 675,
  EMPTY_HEART = 676,
  ASTRAL_PROJECTION = 677,
  C_SECTION = 678,
  LIL_ABADDON = 679,
  MONTEZUMAS_REVENGE = 680,
  LIL_PORTAL = 681,
  WORM_FRIEND = 682,
  BONE_SPURS = 683,
  HUNGRY_SOUL = 684,
  JAR_OF_WISPS = 685,
  SOUL_LOCKET = 686,
  FRIEND_FINDER = 687,
  INNER_CHILD = 688,
  GLITCHED_CROWN = 689,
  JELLY_BELLY = 690,
  SACRED_ORB = 691,
  SANGUINE_BOND = 692,
  SWARM = 693,
  HEARTBREAK = 694,
  BLOODY_GUST = 695,
  SALVATION = 696,
  VANISHING_TWIN = 697,
  TWISTED_PAIR = 698,
  AZAZELS_RAGE = 699,
  ECHO_CHAMBER = 700,
  ISAACS_TOMB = 701,
  VENGEFUL_SPIRIT = 702,
  ESAU_JR = 703,
  BERSERK = 704,
  DARK_ARTS = 705,
  ABYSS = 706,
  SUPPER = 707,
  STAPLER = 708,
  SUPLEX = 709,
  BAG_OF_CRAFTING = 710,
  FLIP = 711,
  LEMEGETON = 712,
  SUMPTORIUM = 713,
  RECALL = 714,
  HOLD = 715,
  KEEPERS_SACK = 716,
  KEEPERS_KIN = 717,

  // - There is no enum member with a value of 718.

  KEEPERS_BOX = 719,
  EVERYTHING_JAR = 720,
  TMTRAINER = 721,
  ANIMA_SOLA = 722,
  SPINDOWN_DICE = 723,
  HYPERCOAGULATION = 724,
  IBS = 725,
  HEMOPTYSIS = 726,
  GHOST_BOMBS = 727,
  GELLO = 728,
  DECAP_ATTACK = 729,
  GLASS_EYE = 730,
  STYE = 731,
  MOMS_RING = 732,
}

/**
 * For `EntityType.PICKUP` (5), `PickupVariant.CARD` (300).
 *
 * This is the sub-type of a card.
 *
 * This enum was renamed from "Card" to be consistent with the `CollectibleType` and `TrinketType`
 * enums.
 *
 * This enum is contiguous. (Every value is satisfied between 0 and 97, inclusive.)
 */
export enum CardType {
  /**
   * Spawning cards with this sub-type will produce a random card with the following probabilities:
   *
   * - Random tarot card (1-22) - 66.66%
   * - Specific tarot card (1-22) - 3.03%
   * - Random face card (23-31) - 7.74%
   * - Specific face card (23-31) - 0.86%
   * - Random rune (32-41) - 3.60%
   * - Specific rune (32-41) - 0.36%
   * - Random special card (42-54) - 3.51%
   * - Specific special card (42-54) - 0.27%
   * - Rune shard (55) - 0.00% (never spawns, assuming a fully unlocked save file)
   * - Random reverse tarot card (56-77) - 11.22%
   * - Specific reverse tarot card (56-77) - 0.51%
   * - Cracked Key (78) - 0.27% (same as special card)
   * - Queen of Hearts (79) - 0.86% (same as face card)
   * - Wild Card (80) - 0.27% (same as special card)
   * - Random character rune (81-97) - 5.95%
   * - Specific character rune (81-97) - 0.35%
   */
  NULL = 0,

  FOOL = 1,
  MAGICIAN = 2,
  HIGH_PRIESTESS = 3,
  EMPRESS = 4,
  EMPEROR = 5,
  HIEROPHANT = 6,
  LOVERS = 7,
  CHARIOT = 8,
  JUSTICE = 9,
  HERMIT = 10,
  WHEEL_OF_FORTUNE = 11,
  STRENGTH = 12,
  HANGED_MAN = 13,
  DEATH = 14,
  TEMPERANCE = 15,
  DEVIL = 16,
  TOWER = 17,
  STARS = 18,
  MOON = 19,
  SUN = 20,
  JUDGEMENT = 21,
  WORLD = 22,
  TWO_OF_CLUBS = 23,
  TWO_OF_DIAMONDS = 24,
  TWO_OF_SPADES = 25,
  TWO_OF_HEARTS = 26,
  ACE_OF_CLUBS = 27,
  ACE_OF_DIAMONDS = 28,
  ACE_OF_SPADES = 29,
  ACE_OF_HEARTS = 30,
  JOKER = 31,
  RUNE_HAGALAZ = 32,
  RUNE_JERA = 33,
  RUNE_EHWAZ = 34,
  RUNE_DAGAZ = 35,
  RUNE_ANSUZ = 36,
  RUNE_PERTHRO = 37,
  RUNE_BERKANO = 38,
  RUNE_ALGIZ = 39,
  RUNE_BLANK = 40,
  RUNE_BLACK = 41,
  CHAOS = 42,
  CREDIT = 43,
  RULES = 44,
  AGAINST_HUMANITY = 45,
  SUICIDE_KING = 46,
  GET_OUT_OF_JAIL_FREE = 47,
  QUESTION_MARK = 48,
  DICE_SHARD = 49,
  EMERGENCY_CONTACT = 50,
  HOLY = 51,
  HUGE_GROWTH = 52,
  ANCIENT_RECALL = 53,
  ERA_WALK = 54,
  RUNE_SHARD = 55,
  REVERSE_FOOL = 56,
  REVERSE_MAGICIAN = 57,
  REVERSE_HIGH_PRIESTESS = 58,
  REVERSE_EMPRESS = 59,
  REVERSE_EMPEROR = 60,
  REVERSE_HIEROPHANT = 61,
  REVERSE_LOVERS = 62,
  REVERSE_CHARIOT = 63,
  REVERSE_JUSTICE = 64,
  REVERSE_HERMIT = 65,
  REVERSE_WHEEL_OF_FORTUNE = 66,
  REVERSE_STRENGTH = 67,
  REVERSE_HANGED_MAN = 68,
  REVERSE_DEATH = 69,
  REVERSE_TEMPERANCE = 70,
  REVERSE_DEVIL = 71,
  REVERSE_TOWER = 72,
  REVERSE_STARS = 73,
  REVERSE_MOON = 74,
  REVERSE_SUN = 75,
  REVERSE_JUDGEMENT = 76,
  REVERSE_WORLD = 77,
  CRACKED_KEY = 78,
  QUEEN_OF_HEARTS = 79,
  WILD = 80,
  SOUL_OF_ISAAC = 81,
  SOUL_OF_MAGDALENE = 82,
  SOUL_OF_CAIN = 83,
  SOUL_OF_JUDAS = 84,
  SOUL_OF_BLUE_BABY = 85,
  SOUL_OF_EVE = 86,
  SOUL_OF_SAMSON = 87,
  SOUL_OF_AZAZEL = 88,
  SOUL_OF_LAZARUS = 89,
  SOUL_OF_EDEN = 90,
  SOUL_OF_LOST = 91,
  SOUL_OF_LILITH = 92,
  SOUL_OF_KEEPER = 93,
  SOUL_OF_APOLLYON = 94,
  SOUL_OF_FORGOTTEN = 95,
  SOUL_OF_BETHANY = 96,
  SOUL_OF_JACOB_AND_ESAU = 97,
}

/**
 * For `EntityType.PICKUP` (5), `PickupVariant.TRINKET` (350).
 *
 * This is the sub-type of a trinket.
 *
 * This enum is not contiguous. In other words, the enum ranges from `TrinketType.NULL` (0) to
 * `TrinketType.SIGIL_OF_BAPHOMET` (189), but there is no corresponding `TrinketType` with a value
 * of 47.
 */
export enum TrinketType {
  /** Spawning trinkets with this sub-type will produce a random trinket. */
  NULL = 0,

  SWALLOWED_PENNY = 1,
  PETRIFIED_POOP = 2,
  AAA_BATTERY = 3,
  BROKEN_REMOTE = 4,
  PURPLE_HEART = 5,
  BROKEN_MAGNET = 6,
  ROSARY_BEAD = 7,
  CARTRIDGE = 8,
  PULSE_WORM = 9,
  WIGGLE_WORM = 10,
  RING_WORM = 11,
  FLAT_WORM = 12,
  STORE_CREDIT = 13,
  CALLUS = 14,
  LUCKY_ROCK = 15,
  MOMS_TOENAIL = 16,
  BLACK_LIPSTICK = 17,
  BIBLE_TRACT = 18,
  PAPER_CLIP = 19,
  MONKEY_PAW = 20,
  MYSTERIOUS_PAPER = 21,
  DAEMONS_TAIL = 22,
  MISSING_POSTER = 23,
  BUTT_PENNY = 24,
  MYSTERIOUS_CANDY = 25,
  HOOK_WORM = 26,
  WHIP_WORM = 27,
  BROKEN_ANKH = 28,
  FISH_HEAD = 29,
  PINKY_EYE = 30,
  PUSH_PIN = 31,
  LIBERTY_CAP = 32,
  UMBILICAL_CORD = 33,
  CHILDS_HEART = 34,
  CURVED_HORN = 35,
  RUSTED_KEY = 36,
  GOAT_HOOF = 37,
  MOMS_PEARL = 38,
  CANCER = 39,
  RED_PATCH = 40,
  MATCH_STICK = 41,
  LUCKY_TOE = 42,
  CURSED_SKULL = 43,
  SAFETY_CAP = 44,
  ACE_OF_SPADES = 45,
  ISAACS_FORK = 46,

  // - There is no enum member with a value of 47. This was originally the ID for The Polaroid in
  //   Wrath of the Lamb. In the vanilla enums, this is listed as `POLAROID_OBSOLETE`.

  MISSING_PAGE = 48,
  BLOODY_PENNY = 49,
  BURNT_PENNY = 50,
  FLAT_PENNY = 51,
  COUNTERFEIT_PENNY = 52,
  TICK = 53,
  ISAACS_HEAD = 54,
  MAGGYS_FAITH = 55,
  JUDAS_TONGUE = 56,
  BLUE_BABYS_SOUL = 57,
  SAMSONS_LOCK = 58,
  CAINS_EYE = 59,
  EVES_BIRD_FOOT = 60,
  LEFT_HAND = 61,
  SHINY_ROCK = 62,
  SAFETY_SCISSORS = 63,
  RAINBOW_WORM = 64,
  TAPE_WORM = 65,
  LAZY_WORM = 66,
  CRACKED_DICE = 67,
  SUPER_MAGNET = 68,
  FADED_POLAROID = 69,
  LOUSE = 70,
  BOBS_BLADDER = 71,
  WATCH_BATTERY = 72,
  BLASTING_CAP = 73,
  STUD_FINDER = 74,
  ERROR = 75,
  POKER_CHIP = 76,
  BLISTER = 77,
  SECOND_HAND = 78,
  ENDLESS_NAMELESS = 79,
  BLACK_FEATHER = 80,
  BLIND_RAGE = 81,
  GOLDEN_HORSE_SHOE = 82,
  STORE_KEY = 83,
  RIB_OF_GREED = 84,
  KARMA = 85,
  LIL_LARVA = 86,
  MOMS_LOCKET = 87,
  NO = 88,
  CHILD_LEASH = 89,
  BROWN_CAP = 90,
  MECONIUM = 91,
  CRACKED_CROWN = 92,
  USED_DIAPER = 93,
  FISH_TAIL = 94,
  BLACK_TOOTH = 95,
  OUROBOROS_WORM = 96,
  TONSIL = 97,
  NOSE_GOBLIN = 98,
  SUPER_BALL = 99,
  VIBRANT_BULB = 100,
  DIM_BULB = 101,
  FRAGMENTED_CARD = 102,
  EQUALITY = 103,
  WISH_BONE = 104,
  BAG_LUNCH = 105,
  LOST_CORK = 106,
  CROW_HEART = 107,
  WALNUT = 108,
  DUCT_TAPE = 109,
  SILVER_DOLLAR = 110,
  BLOODY_CROWN = 111,
  PAY_TO_WIN = 112,
  LOCUST_OF_WRATH = 113,
  LOCUST_OF_PESTILENCE = 114,
  LOCUST_OF_FAMINE = 115,
  LOCUST_OF_DEATH = 116,
  LOCUST_OF_CONQUEST = 117,
  BAT_WING = 118,
  STEM_CELL = 119,
  HAIRPIN = 120,
  WOODEN_CROSS = 121,
  BUTTER = 122,
  FILIGREE_FEATHERS = 123,
  DOOR_STOP = 124,
  EXTENSION_CORD = 125,
  ROTTEN_PENNY = 126,
  BABY_BENDER = 127,
  FINGER_BONE = 128,
  JAW_BREAKER = 129,
  CHEWED_PEN = 130,
  BLESSED_PENNY = 131,
  BROKEN_SYRINGE = 132,
  SHORT_FUSE = 133,
  GIGANTE_BEAN = 134,
  LIGHTER = 135,
  BROKEN_PADLOCK = 136,
  MYOSOTIS = 137,
  M = 138,
  TEARDROP_CHARM = 139,
  APPLE_OF_SODOM = 140,
  FORGOTTEN_LULLABY = 141,
  BETHS_FAITH = 142,
  OLD_CAPACITOR = 143,
  BRAIN_WORM = 144,
  PERFECTION = 145,
  DEVILS_CROWN = 146,
  CHARGED_PENNY = 147,
  FRIENDSHIP_NECKLACE = 148,
  PANIC_BUTTON = 149,
  BLUE_KEY = 150,
  FLAT_FILE = 151,
  TELESCOPE_LENS = 152,
  MOMS_LOCK = 153,
  DICE_BAG = 154,
  HOLY_CROWN = 155,
  MOTHERS_KISS = 156,
  TORN_CARD = 157,
  TORN_POCKET = 158,
  GILDED_KEY = 159,
  LUCKY_SACK = 160,
  WICKED_CROWN = 161,
  AZAZELS_STUMP = 162,
  DINGLE_BERRY = 163,
  RING_CAP = 164,
  NUH_UH = 165,
  MODELING_CLAY = 166,
  POLISHED_BONE = 167,
  HOLLOW_HEART = 168,
  KIDS_DRAWING = 169,
  CRYSTAL_KEY = 170,
  KEEPERS_BARGAIN = 171,
  CURSED_PENNY = 172,
  YOUR_SOUL = 173,
  NUMBER_MAGNET = 174,
  STRANGE_KEY = 175,
  LIL_CLOT = 176,
  TEMPORARY_TATTOO = 177,
  SWALLOWED_M80 = 178, // eslint-disable-line isaacscript/enum-member-number-separation
  RC_REMOTE = 179,
  FOUND_SOUL = 180,
  EXPANSION_PACK = 181,
  BETHS_ESSENCE = 182,
  TWINS = 183,
  ADOPTION_PAPERS = 184,
  CRICKET_LEG = 185,
  APOLLYONS_BEST_FRIEND = 186,
  BROKEN_GLASSES = 187,
  ICE_CUBE = 188,
  SIGIL_OF_BAPHOMET = 189,
}

/** For `EntityType.PICKUP` (5), `PickupVariant.BED` (380). */
export enum BedSubType {
  ISAAC = 0,
  MOM = 10,
}

/** For `EntityType.LASER` (7). */
export enum LaserSubType {
  /** A typical laser that has a start and end point. */
  LINEAR = 0,

  /** A controlled ring laser (e.g. Tech + Ludovico, Brim + Ludovico). */
  RING_LUDOVICO = 1,

  /** A ring laser that travels like a projectile (e.g. Tech X). */
  RING_PROJECTILE = 2,

  /** A ring laser that encircle their parents (e.g. Maw of the Void). */
  RING_FOLLOW_PARENT = 3,

  /** For Technology Zero; doesn't create an impact. */
  NO_IMPACT = 4,
}

/** For `EntityType.GAPER` (10), `GaperVariant.ROTTEN_GAPER` (3). */
export enum RottenGaperSubType {
  V1 = 0,
  V2 = 1,
  V3 = 2,
  V4 = 3,
  V5 = 4,
  V6 = 5,
}

/** For `EntityType.LARRY_JR` (19), `LarryJrVariant.LARRY_JR` (0). */
export enum LarryJrSubType {
  /** The non-champion version. */
  NORMAL = 0,

  /**
   * The green champion version. Will occasionally shoot a projectile in the direction he's facing,
   * pausing momentarily as he does so.
   */
  GREEN = 1,

  /**
   * The blue champion version. Is 15% larger and has 45% more HP, but moves more slowly and does
   * not leave poop behind. Has shared health between his body segments, meaning that dealing damage
   * to one segment will deal a percentage of the damage to the other segments. This version always
   * drops a Soul Heart when defeated.
   */
  BLUE = 2,
}

/** For `EntityType.LARRY_JR` (19), `LarryJrVariant.HOLLOW` (1). */
export enum HollowSubType {
  /** The non-champion version. */
  NORMAL = 0,

  /**
   * The green champion version. Has a chance for each segment that isn't the head to spawn a
   * Charger on death. Occasionally stops movement to shoot 3 bullets at wherever it is facing. The
   * head will spawn a Charger only if killed immediately after spawning.
   */
  GREEN = 1,

  /**
   * The black champion version. 15% larger, has slower movement and 25% more HP. Each segment that
   * isn't the head spawns a Boom Fly when killed. Does not spawn any poop. The head will spawn a
   * Boom Fly only if killed immediately after spawning.
   */
  BLACK = 2,

  /**
   * The yellow champion version. 15% larger and has 25% more HP but retains the same movement
   * speed. Each segment that isn't the head will drop a penny on death. The head will drop a penny
   * only if killed immediately after spawning.
   */
  YELLOW = 3,
}

/** For `EntityType.MONSTRO` (20), variant 0. */
export enum MonstroSubType {
  /** The non-champion version. */
  NORMAL = 0,

  /**
   * The red champion version. Two 20% smaller Monstros replace the normal Monstro, each with 55%
   * less HP than the original.
   */
  RED = 1,

  /**
   * The grey champion version. 15% larger and has 25% more HP. Uses projectile volleys much more
   * often and is unable to jump off-screen.
   */
  GREY = 2,
}

/** For `EntityType.CHARGER` (23), `ChargerVariant.CHARGER` (0). */
export enum ChargerSubType {
  CHARGER = 0,
  MY_SHADOW = 1,
}

/** For `EntityType.BOOM_FLY` (25), `BoomFlyVariant.DRAGON_FLY` (3). */
export enum DragonFlySubType {
  /** Upon death, creates lines of fire in the cardinal directions. */
  NORMAL = 0,

  /** Upon death, creates lines of fire in the ordinal directions. */
  X = 1,
}

/** For `EntityType.CHUB` (28), `ChubVariant.CHUB (0)`. */
export enum ChubSubType {
  /** The non-champion version. */
  NORMAL = 0,

  /**
   * The blue champion version. 15% larger and slower than normal, with 25% more HP. Spawns orange
   * Boils instead of Chargers. Despite the different color, they behave exactly like normal Boils.
   *
   * Note that this actually looks green in-game, but internally it is labeled as blue. (Yellow
   * mixes with blue to cause green.)
   */
  BLUE = 1,

  /**
   * The orange champion version. 15% smaller and faster than normal, with 15% less HP. Spawns
   * Spitties instead of Chargers.
   */
  ORANGE = 2,
}

/** For `EntityType.CHUB` (28), `ChubVariant.CARRION_QUEEN (2)`. */
export enum CarrionQueenSubType {
  /** The non-champion version. */
  NORMAL = 0,

  /**
   * The pink champion version. Moves slightly quicker, has 100% more HP and spawns small Mask
   * Hearts instead of Red Poop. The hearts have 28 HP and killing them deals 40 damage to Carrion
   * Queen. She does not bounce diagonally around the room when below half health.
   */
  PINK = 1,
}

/** For `EntityType.GURDY` (36), variant 0. */
export enum GurdySubType {
  /** The non-champion version. */
  NORMAL = 0,

  /**
   * The green champion version. 11% larger and does not use her projectile attack. Instead, she
   * summons monsters at a faster rate.
   */
  GREEN = 1,
}

/** For `EntityType.BABY` (37), variant `BabyVariant.ANGELIC_BABY`. */
export enum AngelicBabySubType {
  NORMAL = 0,
  SMALL = 1,
}

/** For `EntityType.MONSTRO_2` (43), `Monstro2Variant.MONSTRO_2` (0). */
export enum Monstro2SubType {
  /** The non-champion version. */
  NORMAL = 0,

  /**
   * The red champion version. 20% smaller. Moves and attacks much faster, but only spawns 2 Suckers
   * when landing. Has reduced health.
   */
  RED = 1,
}

/** For `EntityType.MOM` (43), `MomVariant.MOM` (0). */
export enum MomSubType {
  /** The non-champion version. */
  NORMAL = 0,

  /**
   * The blue champion version. Has 23% more HP, summons monsters more often, and summons a
   * different variation of enemies that were added in the Wrath of The Lamb expansion of the
   * original game.
   */
  BLUE = 1,

  /**
   * The red champion version. Does not summon monsters at all, and instead repeatedly uses her foot
   * stomp, which has increased speed.
   */
  RED = 2,
}

/** For `EntityType.PIN` (62), `PinVariant.PIN` (0). */
export enum PinSubType {
  /** The non-champion version. */
  NORMAL = 0,

  /**
   * The grey champion version. 15% larger with 25% more HP. Fires a radial burst of 6 spiraling
   * projectiles instead of an explosive projectile and fires 6 projectiles instead of 4 when
   * jumping.
   */
  GREY = 1,
}

/** For `EntityType.PIN` (62), `PinVariant.FRAIL` (2). */
export enum FrailSubType {
  /** The non-champion version. */
  NORMAL = 0,

  /** The black champion version. Starts in its second phase, with only 66.6% HP total. */
  BLACK = 1,
}

/** For `EntityType.FAMINE` (63), variant 0. */
export enum FamineSubType {
  /** The non-champion version. */
  NORMAL = 0,

  /**
   * The blue champion version. Charges more often and veers towards Isaac (similar to the Dark
   * One). He can do this attack regardless of whether Isaac is to his sides. He will shoot six
   * bullets in all directions instead of summoning Pooters. In phase 2, he will spit out a cluster
   * of bullets instead of a triple shot, similar to Monstro's attack, with a lower shot speed than
   * his non-champion version. Will always drop a Soul Heart upon death.
   */
  BLUE = 1,
}

/** For `EntityType.PESTILENCE` (64), variant 0. */
export enum PestilenceSubType {
  /** The non-champion version. */
  NORMAL = 0,

  /**
   * The grey champion version. Leaves a trail of slowing white creep instead of green creep, shoots
   * 6 projectiles in all directions instead of an Ipecac shot, and spawns Trites instead of
   * Chargers or Spitties. He cannot spawn more than 3 Trites at once. It spawns spiders instead of
   * Attack Flies in phase 2.
   */
  GREY = 1,
}

/** For `EntityType.WAR` (65), `WarVariant.WAR` (0). */
export enum WarSubType {
  /** The non-champion version. */
  NORMAL = 0,

  /**
   * The grey champion version. 15% larger with 25% more HP. Summons 2 Mega Troll Bombs when he
   * ascends off-screen and summons a single Troll Bomb behind his path when he charges through the
   * screen. When transforming into his second phase, he shoots 6 projectiles in all directions, as
   * well as each time he stops chasing Isaac in this phase.
   */
  GREY = 1,
}

/** For `EntityType.DEATH` (66), variant 0. */
export enum DeathSubType {
  /** The non-champion version. */
  NORMAL = 0,

  /**
   * The black champion version. 15% larger with 25% more HP. In his first phase, he summons
   * Kamikaze Leeches instead of homing Death Scythes and does not use the Hourglass. He spawns Red
   * Maws rather than Knights after he dismounts from his horse.
   */
  BLACK = 1,
}

/** For `EntityType.DUKE_OF_FLIES` (67), variant `DukeOfFliesVariant.DUKE_OF_FLIES` (0). */
export enum DukeOfFliesSubType {
  /** The non-champion version. */
  NORMAL = 0,

  /**
   * The green champion version. Spawns Moters instead of the large Attack Flies and shoots blood
   * shots in eight directions when spreading the orbiting flies. He can spread the Attack Flies at
   * any moment instead of only performing it when having enough of them orbiting him, similar to
   * The Husk.
   */
  GREEN = 1,

  /**
   * The orange champion version. 15% larger than normal with 25% more HP and spawns Suckers instead
   * of the large Attack Flies.
   */
  ORANGE = 2,
}

/** For `EntityType.DUKE_OF_FLIES` (67), variant `DukeOfFliesVariant.HUSK` (1). */
export enum HuskSubType {
  /** The non-champion version. */
  NORMAL = 0,

  /**
   * The black champion version. 15% larger with 56% more HP. It moves slower and spawns Boom Flies
   * instead of spiders and Attack Flies. The explosions from the Boom Flies can damage the Husk.
   * Spawns 1-2 additional Boom Flies upon death.
   */
  BLACK = 1,

  /**
   * The red champion version. 25% smaller and faster. Rather than spawning enemies, it only fires
   * its ring of eight blood shots. Spawns 1-2 additional Red Boom Flies upon death.
   */
  RED = 2,
}

/** For `EntityType.PEEP` (68), variant `PeepVariant.PEEP` (0). */
export enum PeepSubType {
  /** The non-champion version. */
  NORMAL = 0,

  /**
   * The yellow champion version. 15% smaller, moves faster, and leaves a constant trail of yellow
   * creep.
   */
  YELLOW = 1,

  /**
   * The cyan champion version. Starts the battle with both his eyes popped out, similar to The
   * Bloat.
   */
  CYAN = 2,
}

/** For `EntityType.PEEP` (68), variant `PeepVariant.BLOAT` (1). */
export enum BloatSubType {
  /** The non-champion version. */
  NORMAL = 0,

  /**
   * The green champion version. Fires Spawns 2 Chargers whenever he creates large puddles of creep.
   * Creates green creep instead of red creep.
   */
  GREEN = 1,
}

/**
 * For `EntityType.FISTULA_BIG` (71), `EntityType.FISTULA_MEDIUM` (72), and
 * `EntityType.FISTULA_SMALL` (73). (All use variant `FistulaVariant.FISTULA` (0).
 */
export enum FistulaSubType {
  /** The non-champion version. */
  NORMAL = 0,

  /**
   * The grey champion version. 15% larger with 25% more HP. Spawns Boom Flies with 15 HP instead of
   * Chargers. Each piece travels much slower and splits into three medium Fistulas as opposed to
   * the original's four, similar to Teratoma.
   */
  GREY = 1,
}

/** For `EntityType.GEMINI` (79), variant `GeminiVariant.GEMINI` (0). */
export enum GeminiSubType {
  /** The non-champion version. */
  NORMAL = 0,

  /**
   * The green champion version. They start separated from each other and have no difference in
   * behavior. However, if Contusion is killed last, it will usually drop a Red Heart or Half Red
   * Heart, but will rarely drop any other type of Heart instead (Soul, Bone, Gold, etc).
   */
  GREEN = 1,

  /**
   * The blue champion version. Suture shoots homing shots. Contusion will drop a Soul Heart if
   * killed last.
   */
  BLUE = 2,
}

/** For `EntityType.GURDY_JR` (99), variant 0. */
export enum GurdyJrSubType {
  /** The non-champion version. */
  NORMAL = 0,

  /**
   * The blue champion version. Instead of one Gurdy Jr., there will be two 42% smaller ones. This
   * version has 45% less HP than the original and only uses the charging attack. It drops a Soul
   * Heart upon death.
   */
  BLUE = 1,

  /**
   * The yellow champion version. 15% larger than the regular, with 25% more HP. She spawns Super
   * Pooters instead of regular Pooters. Does not shoot projectiles of any sort.
   */
  YELLOW = 2,
}

/** For `EntityType.WIDOW` (100), `WidowVariant.WIDOW` (0). */
export enum WidowSubType {
  /** The non-champion version. */
  NORMAL = 0,

  /**
   * The black champion version. Spawns Big Spiders with half health instead of Sacks, black creep
   * instead of white, and spits out six blood shots instead of spiders.
   */
  BLACK = 1,

  /**
   * The pink champion version. Spawns Boils instead of Sacks and Attack Flies instead of spiders.
   * Jumps quicker. She is also 25% smaller and has 10% less health.
   */
  PINK = 2,
}

/** For `EntityType.GURGLING` (100), `GurglingVariant.GURGLING_BOSS` (1). */
export enum GurglingSubType {
  /** The non-champion version. */
  NORMAL = 0,

  /**
   * The yellow champion version. Three Gurglings will appear instead of two. They are faster but do
   * not leave any creep. They don't spawn any Attack Flies.
   */
  YELLOW = 1,

  /**
   * The black champion version. Gurglings spawn Troll Bombs at regular intervals instead of red
   * creep when rushing towards the player. They take only 5 damage from their own bombs. They don't
   * spawn any Attack Flies.
   */
  BLACK = 2,
}

/**
 * For `EntityType.CONSTANT_STONE_SHOOTER` (202),
 * `ConstantStoneShooterVariant.CONSTANT_STONE_SHOOTER` (0).
 *
 * This is the same as the `Direction` enum.
 */
export enum ConstantStoneShooterSubType {
  LEFT = 0,
  UP = 1,
  RIGHT = 2,
  DOWN = 3,
}

/** For `EntityType.HAUNT` (260), `HauntVariant.HAUNT` (0). */
export enum HauntSubType {
  /** The non-champion version. */
  NORMAL = 0,

  /**
   * The black champion version. Only two Lil' Haunts circle The Haunt in the first phase. In the
   * second phase, The Haunt spawns 1-2 spiders instead of firing a brimstone laser.
   */
  BLACK = 1,

  /**
   * The pink champion version. Only one Lil' Haunt circles The Haunt in the first phase. In the
   * second phase, The Haunt has 50% less HP (100). The Haunt's laser is replaced with two diagonal
   * Brimstone lasers that reflect once off of walls. The Haunt's blood-shot attack is changed to 8
   * shots and is aimed towards Isaac.
   */
  PINK = 2,
}

/** For `EntityType.DINGLE` (261), `DingleVariant.DINGLE` (0). */
export enum DingleSubType {
  /** The non-champion version. */
  NORMAL = 0,

  /**
   * The red champion version. Dingle summons Red Poop instead of Dips. He also dashes four times
   * instead of three, though the dashes are shorter and slower. He also fires blood projectiles
   * instead of poop projectiles, though it is a purely cosmetic effect.
   */
  RED = 1,

  /**
   * The black champion version. Dingle summons spiders instead of Dips and fires eight shots in all
   * directions instead of spitting three at Isaac. He also dashes much faster, but will only dash
   * one time instead of three.
   */
  BLACK = 2,
}

/** For `EntityType.MEGA_MAW` (262), variant 0. */
export enum MegaMawSubType {
  /** The non-champion version. */
  NORMAL = 0,

  /**
   * The red champion version. Doesn't shoot any flames or spawn monsters and has a completely
   * different set of blood-shot attacks.
   */
  RED = 1,

  /**
   * The black champion version. Spits 1-2 spiders instead of Hoppers. The spiders will be tossed
   * directly towards Isaac instead of landing below Mega Maw. It does not use flame attacks.
   */
  BLACK = 2,
}

/** For `EntityType.GATE` (263), variant 0. */
export enum GateSubType {
  /** The non-champion version. */
  NORMAL = 0,

  /**
   * The red champion version. Does not spawn any enemies and has a completely different set of
   * attacks.
   */
  RED = 1,

  /**
   * The black champion version. Has 25% more HP and spawns Big Spiders instead of Leapers. The Big
   * Spiders are tossed directly towards Isaac instead of landing randomly in the room, and can be
   * damaged by The Gate's blood shots, like the Leapers. It does not perform the Brimstone attack.
   */
  BLACK = 2,
}

/** For `EntityType.MEGA_FATTY` (264), variant 0. */
export enum MegaFattySubType {
  /** The non-champion version. */
  NORMAL = 0,

  /**
   * The red champion version. 33% smaller and has 10% less HP. Shoots 6 bullets instead of leaving
   * red creep upon landing. Creates Red Poop instead of Dips. Vomit attack sends out four
   * projectiles stream attacks in a pattern similar to Mom's Heart.
   */
  RED = 1,

  /**
   * The brown champion version. Has 15% more HP. He will not use his vomit attack and sends out
   * rock waves instead of leaving red creep upon landing when performing the long-range jump,
   * similar to The Cage.
   */
  BROWN = 2,
}

/** For `EntityType.CAGE` (265), variant 0. */
export enum CageSubType {
  /** The non-champion version. */
  NORMAL = 0,

  /**
   * The green champion version. Periodically leaves puddles of green creep and does not spawn any
   * Vis.
   */
  GREEN = 1,

  /**
   * The pink champion version. Two Cages replace the normal Cage, each with 50% HP. They never
   * perform their jump attack. Both Cages are 50% smaller.
   */
  PINK = 2,
}

/** For `EntityType.POLYCEPHALUS` (269), `PolycephalusVariant.POLYCEPHALUS` (0). */
export enum PolycephalusSubType {
  /** The non-champion version. */
  NORMAL = 0,

  /**
   * The red champion version. Summons Para-Bites instead of Round Worms. All projectile attacks are
   * replaced with a ring of six projectiles.
   */
  RED = 1,

  /**
   * The pink champion version. Two Polycephaluses replace the normal Polycephalus, each with 50%
   * HP. They do not spawn Round Worms.
   */
  PINK = 2,
}

/** For `EntityType.LEPER` (310), variant 0. */
export enum LeperSubType {
  STAGE_1 = 0,
  STAGE_2 = 1,
  STAGE_3 = 2,
  STAGE_4 = 3,
}

/** For `EntityType.STAIN` (401), variant 0. */
export enum StainSubType {
  /** The non-champion version. */
  NORMAL = 0,

  /**
   * The grey champion version. Continuously spawns 2 Round Worms instead of Chargers, with a
   * maximum of 3 at any time. Never fires barrages of bullets.
   */
  GREY = 1,
}

/** For `EntityType.BROWNIE` (402), variant 0. */
export enum BrownieSubType {
  /** The non-champion version. */
  NORMAL = 0,

  /**
   * The black champion version. Spawns up to 3 Chargers at once instead of Brownie Corns and
   * creates black creep instead of brown creep. The Corn Mines that he spawns are also black.
   * Brownie still leaves green creep when poisoned. When at low health, he becomes 2 Dank Squirts
   * instead of a weakened Dangle.
   */
  BLACK = 1,
}

/** For `EntityType.FORSAKEN` (403), variant 0. */
export enum ForsakenSubType {
  /** The non-champion version. */
  NORMAL = 0,

  /**
   * The black champion version. Spawns Black Bonies instead of regular Bonies. The spinning
   * Brimstone attack is replaced with The Forsaken spawning 4 Dank Death's Heads and resuming
   * invincibility for 1 second if there are no other Dank Death's Heads alive. It can not spawn any
   * Dank Death's Heads if there is at least 1 other alive and will instead remain vulnerable for a
   * duration before spawning another Black Bony.
   */
  BLACK = 1,
}

/** For `EntityType.LITTLE_HORN` (404), variant 0. */
export enum LittleHornSubType {
  /** The non-champion version. */
  NORMAL = 0,

  /**
   * The orange champion version. Spits out an orange Troll Bomb instead of a Dark Ball. This Troll
   * Bomb deals contact damage and leaves a patch of fire similar to Hot Bombs that cannot damage
   * him. He also throws these special Troll Bombs into Pitfalls instead of normal ones, and spawns
   * them during the chain teleport attack. He loses 1 HP whenever he spits out a bomb. Does not
   * attack with Mega Troll Bombs.
   */
  ORANGE = 1,

  /**
   * The black champion version. Does not attack with Pits, Troll Bombs or Mega Troll Bombs, but
   * fires Dark Balls more frequently. This version can still do the chain teleport attack but does
   * not spawn any Troll Bombs.
   */
  BLACK = 2,
}

/** For `EntityType.RAG_MAN` (405), variant 0. */
export enum RagManSubType {
  /** The non-champion version. */
  NORMAL = 0,

  /**
   * The red champion version. Does not fire homing bullets, and instead constantly creates and
   * revives Raglings. The Raglings spawned by this version have the same red color as Rag Man and
   * have 34% less than the normal ones.
   */
  RED = 1,

  /**
   * The black champion version. The head roll attack spawns 1-2 spiders instead of a Ragling. He
   * fires a spray of 3 arcing bullets, instead of a resurrection attack.
   */
  BLACK = 2,
}

/**
 * For `EntityType.QUAKE_GRIMACE` (804), variant 0.
 *
 * This is the same as the `Direction` enum.
 */
export enum QuakeGrimaceSubType {
  LEFT = 0,
  UP = 1,
  RIGHT = 2,
  DOWN = 3,
}

/** For `EntityType.DEEP_GAPER` (811), variant 0. */
export enum DeepGaperSubType {
  V1 = 0,
  V2 = 1,
  V3 = 2,
  V4 = 3,
  V5 = 4,
  V6 = 5,
  V7 = 6,
}

/** For `EntityType.MORNINGSTAR` (863), variant 0. */
export enum MorningStarSubType {
  /** Randomizes between 'Normal' and 'Alternate'. */
  RANDOM = 0,

  NORMAL = 1,

  /** Visual difference only. */
  ALTERNATE = 2,
}

/** For `EntityType.DARK_ESAU` (866), variant 0. */
export enum DarkEsauSubType {
  DARK = 0,

  /** After picking up T. Jacob's Birthright. */
  DARKER = 1,
}

/** For `EntityType.MAZE_ROAMER` (890), variant 0. */
export enum MazeRoamerSubType {
  NORMAL = 0,
  MIRRORED = 1,
}

/** For `EntityType.MOTHER` (912), `MotherVariant.MOTHER_1` (0). */
export enum MotherSubType {
  PHASE_1 = 0,
  PHASE_2 = 1,

  /** Instantly disappears and drops a heart. */
  LEFT_ARM = 2,

  /** Instantly disappears and drops a heart. */
  RIGHT_ARM = 3,

  /** Instantly disappears and drops a heart. */
  DISAPPEAR = 4,
}

/** For `EntityType.MOTHER` (912), `MotherVariant.BALL` (100). */
export enum MotherBallSubType {
  LARGE = 0,
  MEDIUM = 1,
  SMALL = 2,
}

/** For `EntityType.EFFECT` (1000), `EffectVariant.BLOOD_EXPLOSION` (2). */
export enum BloodExplosionSubType {
  MEDIUM_WITH_LEFTOVER_BLOOD = 0,
  SMALL = 1,
  MEDIUM = 2,
  LARGE = 3,
  GIANT = 4,
  SWIRL = 5,
}

/** For `EntityType.EFFECT` (1000), `EffectVariant.BLOOD_PARTICLE` (5). */
export enum GibSubType {
  BLOOD = 0,
  BONE = 1,
  GUT = 2,
  EYE = 3,
}

/** For `EntityType.EFFECT` (1000), `EffectVariant.POOF_1` (15). */
export enum PoofSubType {
  NORMAL = 0,
  SMALL = 1,

  // A sub-type of 2 appears to be the same thing as a sub-type of 0.

  LARGE = 3,
}

/** For `EntityType.EFFECT` (1000), `EffectVariant.HEAVEN_LIGHT_DOOR` (39). */
export enum HeavenLightDoorSubType {
  HEAVEN_DOOR = 0,
  MOONLIGHT = 1,
}

/** For `EntityType.EFFECT` (1000), `EffectVariant.CARPET` (74). */
export enum CarpetSubType {
  ISAACS_CARPET = 0,
  MOMS_CARPET_1 = 1,
  MOMS_CARPET_2 = 2,
}

/** For `EntityType.EFFECT` (1000), `EffectVariant.DICE_FLOOR` (76). */
export enum DiceFloorSubType {
  /** Has the same effect as using a D4. */
  ONE_PIP = 0,

  /** Has the same effect as using a D20. */
  TWO_PIP = 1,

  /**
   * Rerolls all pickups and trinkets on the floor, including items inside of a shop, excluding
   * collectibles.
   */
  THREE_PIP = 2,

  /** Rerolls all collectibles on the floor. */
  FOUR_PIP = 3,

  /** Has the same effect as using a Forget Me Now. */
  FIVE_PIP = 4,

  /** Has the combined effect of a 1-pip, 3-pip and 4-pip dice room. */
  SIX_PIP = 5,
}

/** For `EntityType.EFFECT` (1000), `EffectVariant.TALL_LADDER` (156). */
export enum TallLadderSubType {
  TALL_LADDER = 0,
  STAIRWAY = 1,
}

/** For `EntityType.EFFECT` (1000), `EffectVariant.PORTAL_TELEPORT` (161). */
export enum PortalTeleportSubType {
  /** Is yellow in color. */
  TREASURE_ROOM = 0,

  /** Is red in color. */
  BOSS_ROOM = 1,

  /** Is blue in color. */
  SECRET_ROOM = 2,

  /**
   * Is purple in color.
   *
   * Portals of this type are non-persistent in that they will not respawn if the player leaves the
   * room, which makes them unlike the portals spawned by the Lil Portal familiar. In order to
   * generate Lil-Portal-style portals, you add 1000 to the destination room grid index. For
   * example, you would use a sub-type of 1058 for a persistent portal that always goes to the room
   * at grid index 58.
   */
  RANDOM_ROOM = 3,
}

/** For `EntityType.EFFECT` (1000), `EffectVariant.PURGATORY` (189). */
export enum PurgatorySubType {
  RIFT = 0,
  GHOST = 1,
}

----
enums\collections\variants.ts
/* eslint-disable sort-exports/sort-exports */

/** For `EntityType.PLAYER` (1). */
export enum PlayerVariant {
  PLAYER = 0,
  COOP_BABY = 1,
}

/**
 * For `EntityType.TEAR` (2).
 *
 * Generally, the `TearVariant` affects the graphics of the tear, while the `TearFlag` affects the
 * gameplay mechanic. For example, the Euthanasia collectible grants a chance for needle tears that
 * explode. `TearVariant.NEEDLE` makes the tear look like a needle, and the exploding effect comes
 * from `TearFlag.NEEDLE`.
 *
 * However, there are some exceptions:
 * - `TearVariant.CHAOS_CARD` (9) - The variant grants the instant-kill property of the tear.
 * - `TearVariant.KEY_BLOOD` (44) - Sharp Key makes Isaac shoot key tears that deal extra damage.
 *   Both the graphical effect and the extra damage are granted by this variant.
 */
export enum TearVariant {
  BLUE = 0,
  BLOOD = 1,
  TOOTH = 2,

  /** Used by Loadstone. */
  METALLIC = 3,

  BOBS_HEAD = 4,
  FIRE_MIND = 5,
  DARK_MATTER = 6,
  MYSTERIOUS = 7,
  SCHYTHE = 8,

  /** This variant has a non-cosmetic property; it grants the instant-kill property of the tear. */
  CHAOS_CARD = 9,

  LOST_CONTACT = 10,
  CUPID_BLUE = 11,
  CUPID_BLOOD = 12,
  NAIL = 13,
  PUPULA = 14,
  PUPULA_BLOOD = 15,
  GODS_FLESH = 16,
  GODS_FLESH_BLOOD = 17,
  DIAMOND = 18,
  EXPLOSIVO = 19,
  COIN = 20,
  MULTIDIMENSIONAL = 21,
  STONE = 22,
  NAIL_BLOOD = 23,
  GLAUCOMA = 24,
  GLAUCOMA_BLOOD = 25,
  BOOGER = 26,
  EGG = 27,
  RAZOR = 28,
  BONE = 29,
  BLACK_TOOTH = 30,

  /** Used by Euthanasia. */
  NEEDLE = 31,

  BELIAL = 32,
  EYE = 33,
  EYE_BLOOD = 34,
  BALLOON = 35,
  HUNGRY = 36,
  BALLOON_BRIMSTONE = 37,
  BALLOON_BOMB = 38,
  FIST = 39,

  /** Used by Mom's Bracelet. */
  GRID_ENTITY = 40,

  ICE = 41,
  ROCK = 42,
  KEY = 43,

  /**
   * Used by Sharp Key. Both the graphical effect and the extra damage are granted by this variant.
   */
  KEY_BLOOD = 44,

  ERASER = 45,
  FIRE = 46,
  SWORD_BEAM = 47,
  SPORE = 48,
  TECH_SWORD_BEAM = 49,
  FETUS = 50,
}

/** For `EntityType.FAMILIAR` (3). */
export enum FamiliarVariant {
  FAMILIAR_NULL = 0,
  BROTHER_BOBBY = 1,
  DEMON_BABY = 2,
  LITTLE_CHUBBY = 3,
  LITTLE_GISH = 4,
  LITTLE_STEVEN = 5,
  ROBO_BABY = 6,
  SISTER_MAGGY = 7,
  ABEL = 8,
  GHOST_BABY = 9,
  HARLEQUIN_BABY = 10,
  RAINBOW_BABY = 11,
  ISAACS_HEAD = 12,
  BLUE_BABY_SOUL = 13,
  DEAD_BIRD = 14,
  EVES_BIRD_FOOT = 15,
  DADDY_LONGLEGS = 16,
  PEEPER = 17,
  BOMB_BAG = 20,
  SACK_OF_PENNIES = 21,
  LITTLE_CHAD = 22,
  RELIC = 23,
  BUM_FRIEND = 24,
  HOLY_WATER = 25,
  KEY_PIECE_1 = 26,
  KEY_PIECE_2 = 27,
  KEY_FULL = 28,
  FOREVER_ALONE = 30,
  DISTANT_ADMIRATION = 31,
  GUARDIAN_ANGEL = 32,
  FLY_ORBITAL = 33,
  SACRIFICIAL_DAGGER = 35,
  DEAD_CAT = 40,
  ONE_UP = 41,
  GUPPYS_HAIRBALL = 42,
  BLUE_FLY = 43,
  CUBE_OF_MEAT_1 = 44,
  CUBE_OF_MEAT_2 = 45,
  CUBE_OF_MEAT_3 = 46,
  CUBE_OF_MEAT_4 = 47,
  ISAACS_BODY = 48,
  SMART_FLY = 50,
  DRY_BABY = 51,
  JUICY_SACK = 52,
  ROBO_BABY_2 = 53,
  ROTTEN_BABY = 54,
  HEADLESS_BABY = 55,
  LEECH = 56,
  MYSTERY_SACK = 57,
  BBF = 58,
  BOBS_BRAIN = 59,
  BEST_BUD = 60,
  LIL_BRIMSTONE = 61,
  ISAACS_HEART = 62,
  LIL_HAUNT = 63,
  DARK_BUM = 64,
  BIG_FAN = 65,
  SISSY_LONGLEGS = 66,
  PUNCHING_BAG = 67,
  GUILLOTINE = 68,
  BALL_OF_BANDAGES_1 = 69,
  BALL_OF_BANDAGES_2 = 70,
  BALL_OF_BANDAGES_3 = 71,
  BALL_OF_BANDAGES_4 = 72,
  BLUE_SPIDER = 73,
  MONGO_BABY = 74,
  SAMSONS_CHAINS = 75,
  CAINS_OTHER_EYE = 76,
  BLUE_BABYS_ONLY_FRIEND = 77,
  SCISSORS = 78,
  GEMINI = 79,
  INCUBUS = 80,
  FATES_REWARD = 81,
  LIL_CHEST = 82,
  SWORN_PROTECTOR = 83,
  FRIEND_ZONE = 84,
  LOST_FLY = 85,
  CHARGED_BABY = 86,
  LIL_GURDY = 87,
  BUMBO = 88,
  CENSER = 89,
  KEY_BUM = 90,
  RUNE_BAG = 91,
  SERAPHIM = 92,
  GB_BUG = 93,
  SPIDER_MOD = 94,
  FARTING_BABY = 95,
  SUCCUBUS = 96,
  LIL_LOKI = 97,
  OBSESSED_FAN = 98,
  PAPA_FLY = 99,
  MILK = 100,
  MULTIDIMENSIONAL_BABY = 101,
  SUPER_BUM = 102,
  TONSIL = 103,
  BIG_CHUBBY = 104,
  DEPRESSION = 105,
  SHADE = 106,
  HUSHY = 107,
  LIL_MONSTRO = 108,
  KING_BABY = 109,
  FINGER = 110,
  YO_LISTEN = 111,
  ACID_BABY = 112,
  SPIDER_BABY = 113,
  SACK_OF_SACKS = 114,
  BROWN_NUGGET_POOTER = 115,
  BLOODSHOT_EYE = 116,
  MOMS_RAZOR = 117,
  ANGRY_FLY = 118,
  BUDDY_IN_A_BOX = 119,
  SPRINKLER = 120,
  LEPROSY = 121,
  LIL_HARBINGERS = 122,
  ANGELIC_PRISM = 123,
  MYSTERY_EGG = 124,
  LIL_SPEWER = 125,
  SLIPPED_RIB = 126,
  POINTY_RIB = 127,
  BONE_ORBITAL = 128,
  HALLOWED_GROUND = 129,
  JAW_BONE = 130,
  INTRUDER = 200,
  DIP = 201,
  DAMOCLES = 202,
  BLOOD_OATH = 203,
  PSY_FLY = 204,
  MENORAH = 205,
  WISP = 206,
  PEEPER_2 = 207,
  BOILED_BABY = 208,
  FREEZER_BABY = 209,
  BIRD_CAGE = 210,
  LOST_SOUL = 211,
  LIL_DUMPY = 212,
  KNIFE_PIECE_1 = 213,
  KNIFE_PIECE_2 = 214,
  TINYTOMA = 216,
  TINYTOMA_2 = 217,
  BOT_FLY = 218,
  SIREN_MINION = 220,
  PASCHAL_CANDLE = 221,
  STITCHES = 222,
  KNIFE_FULL = 223,
  BABY_PLUM = 224,
  FRUITY_PLUM = 225,
  SPIN_TO_WIN = 226,
  MINISAAC = 228,
  SWARM_FLY_ORBITAL = 229,
  LIL_ABADDON = 230,
  ABYSS_LOCUST = 231,
  LIL_PORTAL = 232,
  WORM_FRIEND = 233,
  BONE_SPUR = 234,
  TWISTED_BABY = 235,
  STAR_OF_BETHLEHEM = 236,
  ITEM_WISP = 237,
  BLOOD_BABY = 238,
  CUBE_BABY = 239,

  /** Produced from the Gello collectible. */
  UMBILICAL_BABY = 240,

  BLOOD_PUPPY = 241,
  VANISHING_TWIN = 242,
  DECAP_ATTACK = 243,
  FORGOTTEN_BODY = 900,
}

/** For `EntityType.BOMB` (4). */
export enum BombVariant {
  NORMAL = 0,

  /** Mr. Boom bombs. */
  BIG = 1,

  /** The decoy object from Best Friend. */
  DECOY = 2,

  TROLL = 3,
  MEGA_TROLL = 4,

  /** Bob's Curse bombs. */
  POISON = 5,

  /** Bomb's Curse + Mr. Mega bombs. */
  POISON_BIG = 6,

  SAD = 7,
  HOT = 8,
  BUTT = 9,
  MR_MEGA = 10,
  BOBBY = 11,
  GLITTER = 12,

  /** The red bombs that are created on certain Repentance floors. */
  THROWABLE = 13,

  /** The small bombs from Scatter Bombs. */
  SMALL = 14,

  BRIMSTONE = 15,

  /**
   * A special bomb type rarely thrown by Hornfel. This looks very similar to the type of bombs that
   * result from the player having Sad Bombs + Blood Bombs, but this has a slightly different mouth.
   */
  SAD_BLOOD = 16,

  GIGA = 17,
  GOLDEN_TROLL = 18,
  ROCKET = 19,
  ROCKET_GIGA = 20,
}

/** For `EntityType.PICKUP` (5). */
export enum PickupVariant {
  NULL = 0,
  HEART = 10,
  COIN = 20,
  KEY = 30,
  BOMB = 40,
  THROWABLE_BOMB = 41,

  /** The poop bombs that only spawn when the player is Tainted Blue Baby. */
  POOP = 42,

  CHEST = 50,
  BOMB_CHEST = 51,
  SPIKED_CHEST = 52,
  ETERNAL_CHEST = 53,
  MIMIC_CHEST = 54,
  OLD_CHEST = 55,
  WOODEN_CHEST = 56,
  MEGA_CHEST = 57,
  HAUNTED_CHEST = 58,

  /** The gold chest that requires a key to open. */
  LOCKED_CHEST = 60,

  SACK = 69,
  PILL = 70,
  LIL_BATTERY = 90,
  COLLECTIBLE = 100,
  BROKEN_SHOVEL = 110,
  SHOP_ITEM = 150,
  CARD = 300,
  BIG_CHEST = 340,
  TRINKET = 350,
  RED_CHEST = 360,
  TROPHY = 370,
  BED = 380,
  MOMS_CHEST = 390,
}

/** For `EntityType.SLOT` (6). */
export enum SlotVariant {
  SLOT_MACHINE = 1,
  BLOOD_DONATION_MACHINE = 2,
  FORTUNE_TELLING_MACHINE = 3,
  BEGGAR = 4,
  DEVIL_BEGGAR = 5,
  SHELL_GAME = 6,
  KEY_MASTER = 7,
  DONATION_MACHINE = 8,
  BOMB_BUM = 9,
  SHOP_RESTOCK_MACHINE = 10,
  GREED_DONATION_MACHINE = 11,
  MOMS_DRESSING_TABLE = 12,
  BATTERY_BUM = 13,
  ISAAC_SECRET = 14,
  HELL_GAME = 15,
  CRANE_GAME = 16,
  CONFESSIONAL = 17,
  ROTTEN_BEGGAR = 18,
}

/** For `EntityType.LASER` (7). */
export enum LaserVariant {
  /** Used for Brimstone. */
  THICK_RED = 1,

  /** Used for Technology. */
  THIN_RED = 2,

  SHOOP_DA_WHOOP = 3,

  /** Looks like a squiggly line. */
  PRIDE = 4,

  /** Used for Angel lasers. */
  LIGHT_BEAM = 5,

  /** Used for Mega Blast. */
  GIANT_RED = 6,

  TRACTOR_BEAM = 7,

  /** Used for Circle of Protection; looks like a thinner Angel laser. */
  LIGHT_RING = 8,

  BRIMSTONE_TECHNOLOGY = 9,
  ELECTRIC = 10,
  THICKER_RED = 11,
  THICK_BROWN = 12,
  BEAST = 13,
  THICKER_BRIMSTONE_TECHNOLOGY = 14,
  GIANT_BRIMSTONE_TECHNOLOGY = 15,
}

/** For `EntityType.KNIFE` (8). */
export enum KnifeVariant {
  MOMS_KNIFE = 0,
  BONE_CLUB = 1,
  BONE_SCYTHE = 2,
  DONKEY_JAWBONE = 3,
  BAG_OF_CRAFTING = 4,
  SUMPTORIUM = 5,
  // - 6 is unused.
  // - 7 is unused.
  // - 8 is unused.
  NOTCHED_AXE = 9,
  SPIRIT_SWORD = 10,
  TECH_SWORD = 11,
}

/** For `EntityType.PROJECTILE` (9). */
export enum ProjectileVariant {
  NORMAL = 0,
  BONE = 1,
  FIRE = 2,
  PUKE = 3,
  TEAR = 4,
  CORN = 5,
  HUSH = 6,
  COIN = 7,
  GRID = 8,
  ROCK = 9,
  RING = 10,
  MEAT = 11,
  FCUK = 12,
  WING = 13,
  LAVA = 14,
  HEAD = 15,
  PEEP = 16,
}

/** For `EntityType.GAPER` (10). */
export enum GaperVariant {
  FROWNING_GAPER = 0,
  GAPER = 1,
  FLAMING_GAPER = 2,
  ROTTEN_GAPER = 3,
}

/** For `EntityType.GUSHER` (11). */
export enum GusherVariant {
  GUSHER = 0,
  PACER = 1,
}

/** For `EntityType.POOTER` (14). */
export enum PooterVariant {
  POOTER = 0,
  SUPER_POOTER = 1,
  TAINTED_POOTER = 2,
}

/** For `EntityType.CLOTTY` (15). */
export enum ClottyVariant {
  CLOTTY = 0,
  CLOT = 1,
  BLOB = 2,
  GRILLED_CLOTTY = 3,
}

/** For `EntityType.MULLIGAN` (16). */
export enum MulliganVariant {
  MULLIGAN = 0,
  MULLIGOON = 1,
  MULLIBOOM = 2,
}

/** For `EntityType.SHOPKEEPER` (17). */
export enum ShopkeeperVariant {
  SHOPKEEPER = 0,
  SECRET_ROOM_KEEPER = 1,
  ERROR_ROOM_KEEPER = 2,
  SPECIAL_SHOPKEEPER = 3,
  SPECIAL_SECRET_ROOM_KEEPER = 4,
}

/** For `EntityType.LARRY_JR` (19). */
export enum LarryJrVariant {
  LARRY_JR = 0,
  HOLLOW = 1,
  TUFF_TWIN = 2,
  SHELL = 3,
}

/** For `EntityType.HIVE` (22). */
export enum HiveVariant {
  HIVE = 0,
  DROWNED_HIVE = 1,
  HOLY_MULLIGAN = 2,
  TAINTED_MULLIGAN = 3,
}

/** For `EntityType.CHARGER` (23). */
export enum ChargerVariant {
  CHARGER = 0,
  DROWNED_CHARGER = 1,
  DANK_CHARGER = 2,
  CARRION_PRINCESS = 3,
}

/** For `EntityType.GLOBIN` (24). */
export enum GlobinVariant {
  GLOBIN = 0,
  GAZING_GLOBIN = 1,
  DANK_GLOBIN = 2,
  CURSED_GLOBIN = 3,
}

/** For `EntityType.BOOM_FLY` (25). */
export enum BoomFlyVariant {
  BOOM_FLY = 0,
  RED_BOOM_FLY = 1,
  DROWNED_BOOM_FLY = 2,
  DRAGON_FLY = 3,
  BONE_FLY = 4,
  SICK_BOOM_FLY = 5,
  TAINTED_BOOM_FLY = 6,
}

/** For `EntityType.MAW` (26). */
export enum MawVariant {
  MAW = 0,
  RED_MAW = 1,
  PSYCHIC_MAW = 2,
}

/** For `EntityType.HOST` (27). */
export enum HostVariant {
  HOST = 0,
  RED_HOST = 1,
  HARD_HOST = 3,
}

/** For `EntityType.CHUB` (28). */
export enum ChubVariant {
  CHUB = 0,
  CHAD = 1,
  CARRION_QUEEN = 2,
}

/** For `EntityType.HOPPER` (29). */
export enum HopperVariant {
  HOPPER = 0,
  TRITE = 1,
  EGGY = 2,
  TAINTED_HOPPER = 3,
}

/** For `EntityType.BOIL` (30). */
export enum BoilVariant {
  BOIL = 0,
  GUT = 1,
  SACK = 2,
}

/** For `EntityType.SPITTY` (31). */
export enum SpittyVariant {
  SPITTY = 0,
  TAINTED_SPITTY = 1,
}

/**
 * For `EntityType.FIREPLACE` (33).
 *
 * Also see the `FireplaceGridEntityVariant` enum, which is different and used for the grid entity
 * version.
 */
export enum FireplaceVariant {
  NORMAL = 0,
  RED = 1,
  BLUE = 2,
  PURPLE = 3,
  WHITE = 4,
  MOVEABLE = 10,
  COAL = 11,
  MOVEABLE_BLUE = 12,
  MOVEABLE_PURPLE = 13,
}

/** For `EntityType.LEAPER` (34). */
export enum LeaperVariant {
  LEAPER = 0,
  STICKY_LEAPER = 1,
}

/** For `EntityType.MR_MAW` (35). */
export enum MrMawVariant {
  MR_MAW = 0,
  MR_MAW_HEAD = 1,
  MR_RED_MAW = 2,
  MR_RED_MAW_HEAD = 3,
  MR_MAW_NECK = 10,
}

/** For `EntityType.BABY` (38). */
export enum BabyVariant {
  BABY = 0,
  ANGELIC_BABY = 1,
  ULTRA_PRIDE_BABY = 2,
  WRINKLY_BABY = 3,
}

/** For `EntityType.VIS` (39). */
export enum VisVariant {
  VIS = 0,
  DOUBLE_VIS = 1,
  CHUBBER = 2,
  SCARRED_DOUBLE_VIS = 3,
  CHUBBER_PROJECTILE = 22,
}

/** For `EntityType.GUTS` (40). */
export enum GutsVariant {
  GUTS = 0,
  SCARRED_GUTS = 1,
  SLOG = 2,
}

/** For `EntityType.KNIGHT` (41). */
export enum KnightVariant {
  KNIGHT = 0,
  SELFLESS_KNIGHT = 1,
  LOOSE_KNIGHT = 2,
  BRAINLESS_KNIGHT = 3,
  BLACK_KNIGHT = 4,
}

/** For `EntityType.GRIMACE` (42). */
export enum GrimaceVariant {
  STONE_GRIMACE = 0,
  VOMIT_GRIMACE = 1,
  TRIPLE_GRIMACE = 2,
}

/** For `EntityType.MONSTRO_2` (43). */
export enum Monstro2Variant {
  MONSTRO_2 = 0,
  GISH = 1,
}

/** For `EntityType.POKY` (44). */
export enum PokyVariant {
  POKY = 0,
  SLIDE = 1,
}

/** For `EntityType.MOM` (45). */
export enum MomVariant {
  MOM = 0,
  STOMP = 10,
}

/** For `EntityType.SLOTH` (46). */
export enum SlothVariant {
  SLOTH = 0,
  SUPER_SLOTH = 1,
  ULTRA_PRIDE = 2,
}

/** For `EntityType.LUST` (47). */
export enum LustVariant {
  LUST = 0,
  SUPER_LUST = 1,
}

/** For `EntityType.WRATH` (48). */
export enum WrathVariant {
  WRATH = 0,
  SUPER_WRATH = 1,
}

/** For `EntityType.GLUTTONY` (49). */
export enum GluttonyVariant {
  GLUTTONY = 0,
  SUPER_GLUTTONY = 1,
}

/** For `EntityType.GREED` (50). */
export enum GreedVariant {
  GREED = 0,
  SUPER_GREED = 1,
}

/** For `EntityType.ENVY` (51). */
export enum EnvyVariant {
  ENVY = 0,
  SUPER_ENVY = 1,
  ENVY_BIG = 10,
  SUPER_ENVY_BIG = 11,
  ENVY_MEDIUM = 20,
  SUPER_ENVY_MEDIUM = 21,
  ENVY_SMALL = 30,
  SUPER_ENVY_SMALL = 31,
}

/** For `EntityType.PRIDE` (52). */
export enum PrideVariant {
  PRIDE = 0,
  SUPER_PRIDE = 1,
  // Ultra Pride is part of the `SlothVariant` enum.
}

/** For `EntityType.DOPLE` (53). */
export enum DopleVariant {
  DOPLE = 0,
  EVIL_TWIN = 1,
}

/** For `EntityType.LEECH` (55). */
export enum LeechVariant {
  LEECH = 0,
  KAMIKAZE_LEECH = 1,
  HOLY_LEECH = 2,
}

/** For `EntityType.MEMBRAIN` (57). */
export enum MemBrainVariant {
  MEMBRAIN = 0,
  MAMA_GUTS = 1,
  DEAD_MEAT = 2,
}

/** For `EntityType.PARA_BITE` (58). */
export enum ParaBiteVariant {
  PARA_BITE = 0,
  SCARRED_PARA_BITE = 1,
}

/** For `EntityType.EYE` (60). */
export enum EyeVariant {
  EYE = 0,
  BLOODSHOT_EYE = 1,
  HOLY_EYE = 2,
}

/** For `EntityType.SUCKER` (61). */
export enum SuckerVariant {
  SUCKER = 0,
  SPIT = 1,
  SOUL_SUCKER = 2,
  INK = 3,
  MAMA_FLY = 4,
  BULB = 5,
  BLOOD_FLY = 6,
  TAINTED_SUCKER = 7,
}

/** For `EntityType.PIN` (62). */
export enum PinVariant {
  PIN = 0,
  SCOLEX = 1,
  FRAIL = 2,
  WORMWOOD = 3,
}

/** For `EntityType.WAR` (65). */
export enum WarVariant {
  WAR = 0,
  CONQUEST = 1,
  WAR_WITHOUT_HORSE = 2,
}

/** For `EntityType.DEATH` (66). */
export enum DeathVariant {
  DEATH = 0,
  DEATH_SCYTHE = 10,
  DEATH_HORSE = 20,
  DEATH_WITHOUT_HORSE = 30,
}

/** For `EntityType.DUKE_OF_FLIES` (67). */
export enum DukeOfFliesVariant {
  DUKE_OF_FLIES = 0,
  HUSK = 1,
}

/** For `EntityType.PEEP` (68). */
export enum PeepVariant {
  PEEP = 0,
  BLOAT = 1,
  PEEP_EYE = 10,
  BLOAT_EYE = 11,
}

/** For `EntityType.LOKI` (69). */
export enum LokiVariant {
  LOKI = 0,
  LOKII = 1,
}

/**
 * For:
 * - `EntityType.FISTULA_BIG` (71)
 * - `EntityType.FISTULA_MEDIUM` (72)
 * - `EntityType.FISTULA_SMALL` (73)
 */
export enum FistulaVariant {
  FISTULA = 0,
  TERATOMA = 1,
}

/** For `EntityType.MOMS_HEART` (78). */
export enum MomsHeartVariant {
  MOMS_HEART = 0,
  IT_LIVES = 1,
  MOMS_GUTS = 10,
}

/** For `EntityType.GEMINI` (79). */
export enum GeminiVariant {
  GEMINI = 0,
  STEVEN = 1,
  BLIGHTED_OVUM = 2,
  GEMINI_BABY = 10,
  STEVEN_BABY = 11,
  BLIGHTED_OVUM_BABY = 12,
  UMBILICAL_CORD = 20,
}

/** For `EntityType.FALLEN` (81). */
export enum FallenVariant {
  FALLEN = 0,
  KRAMPUS = 1,
}

/** For `EntityType.SATAN` (84). */
export enum SatanVariant {
  SATAN = 0,
  STOMP = 10,
}

/** For `EntityType.GURGLE` (87). */
export enum GurgleVariant {
  GURGLE = 0,
  CRACKLE = 1,
}

/** For `EntityType.WALKING_BOIL` (88). */
export enum WalkingBoilVariant {
  WALKING_BOIL = 0,
  WALKING_GUT = 1,
  WALKING_SACK = 2,
}

/** For `EntityType.HEART` (92). */
export enum HeartVariant {
  HEART = 0,
  HALF_HEART = 1,
}

/** For `EntityType.MASK` (93). */
export enum MaskVariant {
  MASK = 0,
  MASK_2 = 1,
}

/** For `EntityType.WIDOW` (100). */
export enum WidowVariant {
  WIDOW = 0,
  WRETCHED = 1,
}

/** For `EntityType.DADDY_LONG_LEGS` (101). */
export enum DaddyLongLegsVariant {
  DADDY_LONG_LEGS = 0,
  TRIACHNID = 1,
}

/** For `EntityType.ISAAC` (102). */
export enum IsaacVariant {
  ISAAC = 0,
  BLUE_BABY = 1,
  BLUE_BABY_HUSH = 2,
}

/** For `EntityType.CONSTANT_STONE_SHOOTER` (202). */
export enum ConstantStoneShooterVariant {
  CONSTANT_STONE_SHOOTER = 0,
  CROSS_STONE_SHOOTER = 10,
  CROSS_STONE_SHOOTER_ALWAYS_ON = 11,
}

/** For `EntityType.BABY_LONG_LEGS` (206). */
export enum BabyLongLegsVariant {
  BABY_LONG_LEGS = 0,
  SMALL_BABY_LONG_LEGS = 1,
}

/** For `EntityType.CRAZY_LONG_LEGS` (207). */
export enum CrazyLongLegsVariant {
  CRAZY_LONG_LEGS = 0,
  SMALL_CRAZY_LONG_LEGS = 1,
}

/** For `EntityType.FATTY` (208). */
export enum FattyVariant {
  FATTY = 0,
  PALE_FATTY = 1,
  FLAMING_FATTY = 2,
}

/** For `EntityType.DEATHS_HEAD` (212). */
export enum DeathsHeadVariant {
  DEATHS_HEAD = 0,

  /**
   * This is the only Death's Head variant that does not rely on other enemies in the room being
   * alive.
   */
  DANK_DEATHS_HEAD = 1,
  CURSED_DEATHS_HEAD = 2,
  BRIMSTONE_DEATHS_HEAD = 3,
  RED_SKULL = 4,
}

/** For `EntityType.SWINGER` (216). */
export enum SwingerVariant {
  SWINGER = 0,
  SWINGER_HEAD = 1,
  SWINGER_NECK = 10,
}

/** For `EntityType.DIP` (217). */
export enum DipVariant {
  DIP = 0,
  CORN = 1,
  BROWNIE_CORN = 2,
  BIG_CORN = 3,
}

/** For `EntityType.SQUIRT` (220). */
export enum SquirtVariant {
  SQUIRT = 0,
  DANK_SQUIRT = 1,
}

/** For `EntityType.SKINNY` (226). */
export enum SkinnyVariant {
  SKINNY = 0,
  ROTTY = 1,
  CRISPY = 2,
}

/** For `EntityType.BONY` (227). */
export enum BonyVariant {
  BONY = 0,
  HOLY_BONY = 1,
}

/** For `EntityType.HOMUNCULUS` (228). */
export enum HomunculusVariant {
  HOMUNCULUS = 0,
  HOMUNCULUS_CORD = 10,
}

/** For `EntityType.TUMOR` (229). */
export enum TumorVariant {
  TUMOR = 0,
  PLANETOID = 1,
}

/** For `EntityType.NERVE_ENDING` (231). */
export enum NerveEndingVariant {
  NERVE_ENDING = 0,
  NERVE_ENDING_2 = 1,
}

/** For `EntityType.GURGLING` (237). */
export enum GurglingVariant {
  GURGLING = 0,
  GURGLING_BOSS = 1,
  TURDLING = 2,
}

/** For `EntityType.GRUB` (239). */
export enum GrubVariant {
  GRUB = 0,
  CORPSE_EATER = 1,
  CARRION_RIDER = 2,
}

/** For `EntityType.WALL_CREEP` (240). */
export enum WallCreepVariant {
  WALL_CREEP = 0,
  SOY_CREEP = 1,
  RAG_CREEP = 2,
  TAINTED_SOY_CREEP = 3,
}

/** For `EntityType.RAGE_CREEP` (241). */
export enum RageCreepVariant {
  RAGE_CREEP = 0,
  SPLIT_RAGE_CREEP = 1,
}

/** For `EntityType.ROUND_WORM` (244). */
export enum RoundWormVariant {
  ROUND_WORM = 0,
  TUBE_WORM = 1,
  TAINTED_ROUND_WORM = 2,
  TAINTED_TUBE_WORM = 3,
}

/** For `EntityType.POOP` (245). */
export enum PoopEntityVariant {
  NORMAL = 0,
  GOLDEN = 1,
  STONE = 11,
  CORNY = 12,
  BURNING = 13,
  STINKY = 14,
  BLACK = 15,
  WHITE = 16,
}

/** For `EntityType.RAGLING` (246). */
export enum RaglingVariant {
  RAGLING = 0,
  RAG_MANS_RAGLING = 1,
}

/** For `EntityType.BEGOTTEN` (251). */
export enum BegottenVariant {
  BEGOTTEN = 0,
  BEGOTTEN_CHAIN = 10,
}

/** For `EntityType.CONJOINED_FATTY` (257). */
export enum ConjoinedFattyVariant {
  CONJOINED_FATTY = 0,
  BLUE_CONJOINED_FATTY = 1,
}

/** For `EntityType.HAUNT` (260). */
export enum HauntVariant {
  HAUNT = 0,
  LIL_HAUNT = 10,
}

/** For `EntityType.DINGLE` (261). */
export enum DingleVariant {
  DINGLE = 0,
  DANGLE = 1,
}

/** For `EntityType.MAMA_GURDY` (266). */
export enum MamaGurdyVariant {
  MAMA_GURDY = 0,
  LEFT_HAND = 1,
  RIGHT_HAND = 2,
}

/** For `EntityType.POLYCEPHALUS` (269). */
export enum PolycephalusVariant {
  POLYCEPHALUS = 0,
  PILE = 1,
}

/** For `EntityType.URIEL` (271) and `EntityType.GABRIEL` (272). */
export enum AngelVariant {
  NORMAL = 0,
  FALLEN = 1,
}

/** For `EntityType.LAMB` (273). */
export enum LambVariant {
  LAMB = 0,
  BODY = 10,
}

/** For `EntityType.MEGA_SATAN` (274) and `EntityType.MEGA_SATAN_2` (275). */
export enum MegaSatanVariant {
  MEGA_SATAN = 0,
  MEGA_SATAN_RIGHT_HAND = 1,
  MEGA_SATAN_LEFT_HAND = 2,
}

/** For `EntityType.PITFALL` (291). */
export enum PitfallVariant {
  PITFALL = 0,
  SUCTION_PITFALL = 1,
  TELEPORT_PITFALL = 2,
}

/** For `EntityType.MOVABLE_TNT` (292). */
export enum MoveableTNTVariant {
  MOVEABLE_TNT = 0,
  MINE_CRAFTER = 1,
}

/** For `EntityType.ULTRA_COIN` (293). */
export enum UltraCoinVariant {
  SPINNER = 0,
  KEY = 1,
  BOMB = 2,
  HEART = 3,
}

/** For `EntityType.STONEY` (302). */
export enum StoneyVariant {
  STONEY = 0,
  CROSS_STONEY = 10,
}

/** For `EntityType.PORTAL` (306). */
export enum PortalVariant {
  PORTAL = 0,
  LIL_PORTAL = 1,
}

/** For `EntityType.LEPER` (310). */
export enum LeperVariant {
  LEPER = 0,
  LEPER_FLESH = 1,
}

/** For `EntityType.MR_MINE` (311). */
export enum MrMineVariant {
  MR_MINE = 0,
  MR_MINE_NECK = 10,
}

/** For `EntityType.LITTLE_HORN` (404). */
export enum LittleHornVariant {
  LITTLE_HORN = 0,
  DARK_BALL = 1,
}

/** For `EntityType.RAG_MAN` (405). */
export enum RagManVariant {
  RAG_MAN = 0,
  RAG_MAN_HEAD = 1,
}

/** For `EntityType.ULTRA_GREED` (406). */
export enum UltraGreedVariant {
  ULTRA_GREED = 0,
  ULTRA_GREEDIER = 1,
}

/** For `EntityType.RAG_MEGA` (409). */
export enum RagMegaVariant {
  RAG_MEGA = 0,
  PURPLE_BALL = 1,
  REBIRTH_PILLAR = 2,
}

/** For `EntityType.BIG_HORN` (411). */
export enum BigHornVariant {
  BIG_HORN = 0,
  SMALL_HOLE = 1,
  BIG_HOLE = 2,
}

/** For `EntityType.BLOOD_PUPPY` (802). */
export enum BloodPuppyVariant {
  SMALL = 0,
  LARGE = 1,
}

/** For `EntityType.SUB_HORF` (812). */
export enum SubHorfVariant {
  SUB_HORF = 0,
  TAINTED_SUB_HORF = 1,
}

/** For `EntityType.POLTY` (816). */
export enum PoltyVariant {
  POLTY = 0,
  KINETI = 1,
}

/** For `EntityType.PREY` (817). */
export enum PreyVariant {
  PREY = 0,
  MULLIGHOUL = 1,
}

/** For `EntityType.ROCK_SPIDER` (818). */
export enum RockSpiderVariant {
  ROCK_SPIDER = 0,
  TINTED_ROCK_SPIDER = 1,
  COAL_SPIDER = 2,
}

/** For `EntityType.FLY_BOMB` (819). */
export enum FlyBombVariant {
  FLY_BOMB = 0,
  ETERNAL_FLY_BOMB = 1,
}

/** For `EntityType.DANNY` (820). */
export enum DannyVariant {
  DANNY = 0,
  COAL_BOY = 1,
}

/** For `EntityType.GYRO` (824). */
export enum GyroVariant {
  GYRO = 0,
  GRILLED_GYRO = 1,
}

/** For `EntityType.FACELESS` (827). */
export enum FacelessVariant {
  FACELESS = 0,
  TAINTED_FACELESS = 1,
}

/** For `EntityType.MOLE` (829). */
export enum MoleVariant {
  MOLE = 0,
  TAINTED_MOLE = 1,
}

/** For `EntityType.BIG_BONY` (830). */
export enum BigBonyVariant {
  BIG_BONY = 0,
  BIG_BONE = 10,
}

/** For `EntityType.GUTTED_FATTY` (831). */
export enum GuttyFattyVariant {
  GUTTED_FATTY = 0,
  GUTTY_FATTY_EYE = 10,
  FESTERING_GUTS = 20,
}

/** For `EntityType.EXORCIST` (832). */
export enum ExorcistVariant {
  EXORCIST = 0,
  FANATIC = 1,
}

/** For `EntityType.WHIPPER` (834). */
export enum WhipperVariant {
  WHIPPER = 0,
  SNAPPER = 1,
  FLAGELLANT = 2,
}

/** For `EntityType.PEEPER_FATTY` (835). */
export enum PeeperFattyVariant {
  PEEPING_FATTY = 0,
  PEEPING_FATTY_EYE = 10,
}

/** For `EntityType.REVENANT` (841). */
export enum RevenantVariant {
  REVENANT = 0,
  QUAD_REVENANT = 1,
}

/** For `EntityType.CANARY` (843). */
export enum CanaryVariant {
  CANARY = 0,
  FOREIGNER = 1,
}

/** For `EntityType.GAPER_LVL_2` (850). */
export enum Gaper2Variant {
  GAPER = 0,
  HORF = 1,
  GUSHER = 2,
}

/** For `EntityType.CHARGER_LVL_2` (855). */
export enum Charger2Variant {
  CHARGER = 0,
  ELLEECH = 1,
}

/** For `EntityType.EVIS` (865). */
export enum EvisVariant {
  EVIS = 0,
  EVIS_GUTS = 10,
}

/** For `EntityType.DARK_ESAU` (866). */
export enum DarkEsauVariant {
  DARK_ESAU = 0,
  PIT = 1,
}

/** For `EntityType.DUMP` (876). */
export enum DumpVariant {
  DUMP = 0,
  DUMP_HEAD = 1,
}

/** For `EntityType.NEEDLE` (881). */
export enum NeedleVariant {
  NEEDLE = 0,
  PASTY = 1,
}

/** For `EntityType.CULTIST` (885). */
export enum CultistVariant {
  CULTIST = 0,
  BLOOD_CULTIST = 1,
  BONE_TRAP = 10,
}

/** For `EntityType.VIS_FATTY` (886). */
export enum VisFattyVariant {
  VIS_FATTY = 0,
  FETAL_DEMON = 1,
}

/** For `EntityType.GOAT` (891). */
export enum GoatVariant {
  GOAT = 0,
  BLACK_GOAT = 1,
}

/** For `EntityType.VISAGE` (903). */
export enum VisageVariant {
  VISAGE = 0,
  VISAGE_MASK = 1,
  VISAGE_CHAIN = 10,
  VISAGE_PLASMA = 20,
}

/** For `EntityType.SIREN` (904). */
export enum SirenVariant {
  SIREN = 0,
  SIREN_SKULL = 1,
  SIREN_HELPER_PROJECTILE = 10,
}

/** For `EntityType.SCOURGE` (909). */
export enum ScourgeVariant {
  SCOURGE = 0,
  SCOURGE_CHAIN = 10,
}

/** For `EntityType.CHIMERA` (910). */
export enum ChimeraVariant {
  CHIMERA = 0,
  CHIMERA_BODY = 1,
  CHIMERA_HEAD = 2,
}

/** For `EntityType.ROTGUT` (911). */
export enum RotgutVariant {
  PHASE_1_HEAD = 0,
  PHASE_2_MAGGOT = 1,
  PHASE_3_HEART = 2,
}

/** For `EntityType.MOTHER` (912). */
export enum MotherVariant {
  /**
   * The body that is attached to the top of the screen in phase 1. During phase 2, it remains alive
   * but is inactive.
   */
  MOTHER_1 = 0,

  /** The circular body that moves around in phase 2. */
  MOTHER_2 = 10,

  /** Gaper-like monster that Mother spawns in Phase 1. */
  DEAD_ISAAC = 20,

  WORM = 30,
  BALL = 100,
}

/** For `EntityType.SINGE` (915). */
export enum SingeVariant {
  SINGE = 0,
  SINGE_BALL = 1,
}

/** For `EntityType.RAGLICH` (919). */
export enum RaglichVariant {
  RAGLICH = 0,
  RAGLICH_ARM = 1,
}

/** For `EntityType.CLUTCH` (921). */
export enum ClutchVariant {
  CLUTCH = 0,
  CLUTCH_ORBITAL = 1,
}

/** For `EntityType.DOGMA` (950). */
export enum DogmaVariant {
  DOGMA_PHASE_1 = 0,
  TV = 1,
  ANGEL_PHASE_2 = 2,
  ANGEL_BABY_UNUSED = 10,
}

/** For `EntityType.BEAST` (951). */
export enum BeastVariant {
  BEAST = 0,
  STALACTITE = 1,
  ROCK_PROJECTILE = 2,
  SOUL = 3,
  ULTRA_FAMINE = 10,
  ULTRA_FAMINE_FLY = 11,
  ULTRA_PESTILENCE = 20,
  ULTRA_PESTILENCE_FLY = 21,
  ULTRA_PESTILENCE_MAGGOT = 22,
  ULTRA_PESTILENCE_FLY_BALL = 23,
  ULTRA_WAR = 30,
  ULTRA_WAR_BOMB = 31,
  ULTRA_DEATH = 40,
  ULTRA_DEATH_SCYTHE = 41,
  ULTRA_DEATH_HEAD = 42,
  BACKGROUND_BEAST = 100,
  BACKGROUND_FAMINE = 101,
  BACKGROUND_PESTILENCE = 102,
  BACKGROUND_WAR = 103,
  BACKGROUND_DEATH = 104,
}

/** For `EntityType.GENERIC_PROP` (960). */
export enum GenericPropVariant {
  GENERIC_PROP = 0,
  MOMS_DRESSER = 1,
  MOMS_VANITY = 2,
  COUCH = 3,
  TV = 4,
}

/** For `EntityType.EFFECT` (1000). */
export enum EffectVariant {
  EFFECT_NULL = 0,
  BOMB_EXPLOSION = 1,
  BLOOD_EXPLOSION = 2,
  FLY_EXPLOSION = 3,
  ROCK_PARTICLE = 4,
  BLOOD_PARTICLE = 5,
  DEVIL = 6,
  BLOOD_SPLAT = 7,
  LADDER = 8,
  ANGEL = 9,
  BLUE_FLAME = 10,
  BULLET_POOF = 11,
  TEAR_POOF_A = 12,
  TEAR_POOF_B = 13,
  RIPPLE_POOF = 14,
  POOF_1 = 15,
  POOF_2 = 16,
  POOF_4 = 17,
  BOMB_CRATER = 18,
  CRACK_THE_SKY = 19,
  SCYTHE_BREAK = 20,
  TINY_BUG = 21,
  CREEP_RED = 22,
  CREEP_GREEN = 23,
  CREEP_YELLOW = 24,
  CREEP_WHITE = 25,
  CREEP_BLACK = 26,
  WOOD_PARTICLE = 27,
  MONSTROS_TOOTH = 28,
  MOM_FOOT_STOMP = 29,
  TARGET = 30,
  ROCKET = 31,
  PLAYER_CREEP_LEMON_MISHAP = 32,
  TINY_FLY = 33,
  FART = 34,
  TOOTH_PARTICLE = 35,
  XRAY_WALL = 36,
  PLAYER_CREEP_HOLY_WATER = 37,
  SPIDER_EXPLOSION = 38,
  HEAVEN_LIGHT_DOOR = 39,
  STAR_FLASH = 40,
  WATER_DROPLET = 41,
  BLOOD_GUSH = 42,
  POOP_EXPLOSION = 43,
  PLAYER_CREEP_WHITE = 44,
  PLAYER_CREEP_BLACK = 45,
  PLAYER_CREEP_RED = 46,
  TRINITY_SHIELD = 47,
  BATTERY = 48,
  HEART = 49,
  LASER_IMPACT = 50,
  HOT_BOMB_FIRE = 51,
  RED_CANDLE_FLAME = 52,
  PLAYER_CREEP_GREEN = 53,
  PLAYER_CREEP_HOLY_WATER_TRAIL = 54,
  SPIKE = 55,
  CREEP_BROWN = 56,
  PULLING_EFFECT = 57,
  POOP_PARTICLE = 58,
  DUST_CLOUD = 59,
  BOOMERANG = 60,
  SHOCKWAVE = 61,
  ROCK_EXPLOSION = 62,
  WORM = 63,
  BEETLE = 64,
  WISP = 65,
  EMBER_PARTICLE = 66,
  SHOCKWAVE_DIRECTIONAL = 67,
  WALL_BUG = 68,
  BUTTERFLY = 69,
  BLOOD_DROP = 70,
  BRIMSTONE_SWIRL = 71,
  CRACK_WAVE = 72,
  SHOCKWAVE_RANDOM = 73,
  CARPET = 74,
  BAR_PARTICLE = 75,
  DICE_FLOOR = 76,
  LARGE_BLOOD_EXPLOSION = 77,
  PLAYER_CREEP_LEMON_PARTY = 78,
  TEAR_POOF_SMALL = 79,
  TEAR_POOF_VERY_SMALL = 80,
  FRIEND_BALL = 81,
  WOMB_TELEPORT = 82,
  SPEAR_OF_DESTINY = 83,
  EVIL_EYE = 84,
  DIAMOND_PARTICLE = 85,
  NAIL_PARTICLE = 86,
  FALLING_EMBER = 87,
  DARK_BALL_SMOKE_PARTICLE = 88,
  ULTRA_GREED_FOOTPRINT = 89,
  PLAYER_CREEP_PUDDLE_MILK = 90,
  MOMS_HAND = 91,
  PLAYER_CREEP_BLACK_POWDER = 92,
  PENTAGRAM_BLACK_POWDER = 93,
  CREEP_SLIPPERY_BROWN = 94,
  GOLD_PARTICLE = 95,
  HUSH_LASER = 96,
  IMPACT = 97,
  COIN_PARTICLE = 98,
  WATER_SPLASH = 99,
  HUSH_ASHES = 100,
  HUSH_LASER_UP = 101,
  BULLET_POOF_HUSH = 102,
  ULTRA_GREED_BLING = 103,
  FIREWORKS = 104,
  BROWN_CLOUD = 105,
  FART_RING = 106,
  BLACK_HOLE = 107,
  MR_ME = 108,
  DEATH_SKULL = 109,
  ENEMY_BRIMSTONE_SWIRL = 110,
  HAEMO_TRAIL = 111,
  HALLOWED_GROUND = 112,
  BRIMSTONE_BALL = 113,
  FORGOTTEN_CHAIN = 114,
  BROKEN_SHOVEL_SHADOW = 115,
  DIRT_PATCH = 116,
  FORGOTTEN_SOUL = 117,
  SMALL_ROCKET = 118,
  TIMER = 119,
  SPAWNER = 120,
  LIGHT = 121,
  BIG_HORN_HOLE_HELPER = 122,
  HALO = 123,
  TAR_BUBBLE = 124,
  BIG_HORN_HAND = 125,
  TECH_DOT = 126,
  MAMA_MEGA_EXPLOSION = 127,
  OPTION_LINE = 128,
  LEECH_EXPLOSION = 130,
  MAGGOT_EXPLOSION = 131,
  BIG_SPLASH = 132,
  WATER_RIPPLE = 133,
  PEDESTAL_RIPPLE = 134,
  RAIN_DROP = 135,
  GRID_ENTITY_PROJECTILE_HELPER = 136,
  WORMWOOD_HOLE = 137,
  MIST = 138,
  TRAPDOOR_COVER = 139,
  BACKDROP_DECORATION = 140,
  SMOKE_CLOUD = 141,
  WHIRLPOOL = 142,
  FART_WAVE = 143,
  ENEMY_GHOST = 144,
  ROCK_POOF = 145,
  DIRT_PILE = 146,
  FIRE_JET = 147,
  FIRE_WAVE = 148,
  BIG_ROCK_EXPLOSION = 149,
  BIG_CRACK_WAVE = 150,
  BIG_ATTRACT = 151,
  HORNFEL_ROOM_CONTROLLER = 152,
  OCCULT_TARGET = 153,
  DOOR_OUTLINE = 154,
  CREEP_SLIPPERY_BROWN_GROWING = 155,
  TALL_LADDER = 156,
  WILLO_SPAWNER = 157,
  TADPOLE = 158,
  LIL_GHOST = 159,
  BISHOP_SHIELD = 160,
  PORTAL_TELEPORT = 161,
  HERETIC_PENTAGRAM = 162,
  CHAIN_GIB = 163,
  SIREN_RING = 164,
  CHARM_EFFECT = 165,
  SPRITE_TRAIL = 166,
  CHAIN_LIGHTNING = 167,
  COLOSTOMIA_PUDDLE = 168,
  CREEP_STATIC = 169,
  DOGMA_DEBRIS = 170,
  DOGMA_BLACK_HOLE = 171,
  DOGMA_ORB = 172,
  CRACKED_ORB_POOF = 173,
  SHOP_SPIKES = 174,
  KINETI_BEAM = 175,
  CLEAVER_SLASH = 176,
  REVERSE_EXPLOSION = 177,
  URN_OF_SOULS = 178,
  ENEMY_SOUL = 179,
  RIFT = 180,
  LAVA_SPAWNER = 181,
  BIG_KNIFE = 182,
  MOTHER_SHOCKWAVE = 183,
  WORM_FRIEND_SNARE = 184,
  REDEMPTION = 185,
  HUNGRY_SOUL = 186,
  EXPLOSION_WAVE = 187,
  DIVINE_INTERVENTION = 188,
  PURGATORY = 189,
  MOTHER_TRACER = 190,
  PICKUP_GHOST = 191,
  FISSURE_SPAWNER = 192,
  ANIMA_CHAIN = 193,
  DARK_SNARE = 194,
  CREEP_LIQUID_POOP = 195,
  GROUND_GLOW = 196,
  DEAD_BIRD = 197,
  GENERIC_TRACER = 198,
  ULTRA_DEATH_SCYTHE = 199,
}

----
enums\flags\ActionTrigger.ts
/**
 * This is represented as an object instead of an enum due to limitations with TypeScript enums. (We
 * want this type to be a child of the `BitFlag` type.)
 *
 * @enum
 * @notExported
 * @rename ActionTrigger
 */
const ActionTriggerInternal = {
  /** 1 << -1 (0) */
  NONE: 1 << -1,

  /** 1 << 0 (1) */
  BOMB_PLACED: 1 << 0,

  /** 1 << 1 (2) */
  MOVED: 1 << 1,

  /** 1 << 2 (4) */
  SHOOTING: 1 << 2,

  /** 1 << 3 (8) */
  CARD_PILL_USED: 1 << 3,

  /** 1 << 4 (16) */
  ITEM_ACTIVATED: 1 << 4,

  /** 1 << 5 (32) */
  ITEMS_DROPPED: 1 << 5,
} as const;

type ActionTriggerValue = BitFlag & {
  readonly __actionTriggerBrand: symbol;
};
type ActionTriggerType = {
  readonly [K in keyof typeof ActionTriggerInternal]: ActionTriggerValue;
};

export const ActionTrigger = ActionTriggerInternal as ActionTriggerType;
export type ActionTrigger = ActionTriggerType[keyof ActionTriggerType];

export const ActionTriggerZero = 0 as BitFlags<ActionTrigger>;

----
enums\flags\CacheFlag.ts
/**
 * This is represented as an object instead of an enum due to limitations with TypeScript enums. (We
 * want this type to be a child of the `BitFlag` type.)
 *
 * @enum
 * @notExported
 * @rename CacheFlag
 */
const CacheFlagInternal = {
  /** 1 << 0 (1) */
  DAMAGE: 1 << 0,

  /** 1 << 1 (2) */
  FIRE_DELAY: 1 << 1,

  /** 1 << 2 (4) */
  SHOT_SPEED: 1 << 2,

  /** 1 << 3 (8) */
  RANGE: 1 << 3,

  /** 1 << 4 (16) */
  SPEED: 1 << 4,

  /** 1 << 5 (32) */
  TEAR_FLAG: 1 << 5,

  /** 1 << 6 (64) */
  TEAR_COLOR: 1 << 6,

  /** 1 << 7 (128) */
  FLYING: 1 << 7,

  /** 1 << 8 (256) */
  WEAPON: 1 << 8,

  /** 1 << 9 (512) */
  FAMILIARS: 1 << 9,

  /** 1 << 10 (1024) */
  LUCK: 1 << 10,

  /** 1 << 11 (2048) */
  SIZE: 1 << 11,

  /** 1 << 12 (4096) */
  COLOR: 1 << 12,

  /** 1 << 13 (8192) */
  PICKUP_VISION: 1 << 13,

  /** (1 << 16) - 1 */
  ALL: (1 << 16) - 1,

  /** 1 << 31 (2147483648) */
  TWIN_SYNC: 1 << 31,
} as const;

type CacheFlagValue = BitFlag & {
  readonly __cacheFlagBrand: symbol;
};
type CacheFlagType = {
  readonly [K in keyof typeof CacheFlagInternal]: CacheFlagValue;
};

export const CacheFlag = CacheFlagInternal as CacheFlagType;
export type CacheFlag = CacheFlagType[keyof CacheFlagType];

export const CacheFlagZero = 0 as BitFlags<CacheFlag>;

----
enums\flags\DamageFlag.ts
/**
 * This is represented as an object instead of an enum due to limitations with TypeScript enums. (We
 * want this type to be a child of the `BitFlag` type.)
 *
 * @enum
 * @notExported
 * @rename DamageFlag
 */
const DamageFlagInternal = {
  /** 1 << 0 (1) */
  NO_KILL: 1 << 0,

  /**
   * e.g. fireplace
   *
   * 1 << 1 (2)
   */
  FIRE: 1 << 1,

  /** 1 << 2 (4) */
  EXPLOSION: 1 << 2,

  /** 1 << 3 (8) */
  LASER: 1 << 3,

  /** 1 << 4 (16) */
  ACID: 1 << 4,

  /** 1 << 5 (32) */
  RED_HEARTS: 1 << 5,

  /** 1 << 6 (64) */
  COUNTDOWN: 1 << 6,

  /** 1 << 7 (128) */
  SPIKES: 1 << 7,

  /** 1 << 8 (256) */
  CLONES: 1 << 8,

  /** 1 << 9 (512) */
  POOP: 1 << 9,

  /** 1 << 10 (1024) */
  DEVIL: 1 << 10,

  /** 1 << 11 (2048) */
  ISSAC_HEART: 1 << 11,

  /** 1 << 12 (4096) */
  TNT: 1 << 12,

  /** 1 << 13 (8192) */
  INVINCIBLE: 1 << 13,

  /** 1 << 14 (16384) */
  SPAWN_FLY: 1 << 14,

  /** 1 << 15 (32768) */
  POISON_BURN: 1 << 15,

  /** 1 << 16 (65536) */
  CURSED_DOOR: 1 << 16,

  /** 1 << 17 (131072) */
  TIMER: 1 << 17,

  /** 1 << 18 (262144) */
  IV_BAG: 1 << 18,

  /** 1 << 19 (524288) */
  PITFALL: 1 << 19,

  /** 1 << 20 (1048576) */
  CHEST: 1 << 20,

  /** 1 << 21 (2097152) */
  FAKE: 1 << 21,

  /** 1 << 22 (4194304) */
  BOOGER: 1 << 22,

  /** 1 << 23 (8388608) */
  SPAWN_BLACK_HEART: 1 << 23,

  /**
   * Comes from a strong impact. Can damage Tuff Twins or The Shell (e.g. Mom's foot, shockwaves,
   * rock tears).
   *
   * 1 << 24 (16777216)
   */
  CRUSH: 1 << 24,

  /** 1 << 25 (33554432) */
  NO_MODIFIERS: 1 << 25,

  /** 1 << 26 (67108864) */
  SPAWN_RED_HEART: 1 << 26,

  /** 1 << 27 (134217728) */
  SPAWN_COIN: 1 << 27,

  /** 1 << 28 (268435456) */
  NO_PENALTIES: 1 << 28,

  /** 1 << 29 (536870912) */
  SPAWN_TEMP_HEART: 1 << 29,

  /** 1 << 30 (1073741824) */
  IGNORE_ARMOR: 1 << 30,

  /** 1 << 31 (2147483648) */
  SPAWN_CARD: 1 << 31,

  /** 1 << 32 (4294967296) */
  SPAWN_RUNE: 1 << 32,
} as const;

type DamageFlagValue = BitFlag & {
  readonly __damageFlagBrand: symbol;
};
type DamageFlagType = {
  readonly [K in keyof typeof DamageFlagInternal]: DamageFlagValue;
};

export const DamageFlag = DamageFlagInternal as DamageFlagType;
export type DamageFlag = DamageFlagType[keyof DamageFlagType];

export const DamageFlagZero = 0 as BitFlags<DamageFlag>;

----
enums\flags\DisplayFlag.ts
/**
 * This is represented as an object instead of an enum due to limitations with TypeScript enums. (We
 * want this type to be a child of the `BitFlag` type.)
 *
 * @enum
 * @notExported
 * @rename DisplayFlag
 */
const DisplayFlagInternal = {
  /** 1 << -1 (0) */
  INVISIBLE: 1 << -1,

  /** 1 << 0 (1) */
  VISIBLE: 1 << 0,

  /** 1 << 1 (2) */
  SHADOW: 1 << 1,

  /** 1 << 2 (4) */
  SHOW_ICON: 1 << 2,
} as const;

type DisplayFlagValue = BitFlag & {
  readonly __displayFlagBrand: symbol;
};
type DisplayFlagType = {
  readonly [K in keyof typeof DisplayFlagInternal]: DisplayFlagValue;
};

export const DisplayFlag = DisplayFlagInternal as DisplayFlagType;
export type DisplayFlag = DisplayFlagType[keyof DisplayFlagType];

export const DisplayFlagZero = 0 as BitFlags<DisplayFlag>;

----
enums\flags\DoorSlotFlag.ts
import { DoorSlot } from "../DoorSlot";

/**
 * For `GridEntityType.DOOR` (16).
 *
 * This is represented as an object instead of an enum due to limitations with TypeScript enums. (We
 * want this type to be a child of the `BitFlag` type.)
 *
 * @enum
 * @notExported
 * @rename DoorSlotFlag
 */
const DoorSlotFlagInternal = {
  /** 1 << 0 (1) */
  LEFT_0: 1 << DoorSlot.LEFT_0,

  /** 1 << 1 (2) */
  UP_0: 1 << DoorSlot.UP_0,

  /** 1 << 2 (4) */
  RIGHT_0: 1 << DoorSlot.RIGHT_0,

  /** 1 << 3 (8) */
  DOWN_0: 1 << DoorSlot.DOWN_0,

  /** 1 << 4 (16) */
  LEFT_1: 1 << DoorSlot.LEFT_1,

  /** 1 << 5 (32) */
  UP_1: 1 << DoorSlot.UP_1,

  /** 1 << 6 (64) */
  RIGHT_1: 1 << DoorSlot.RIGHT_1,

  /** 1 << 7 (128) */
  DOWN_1: 1 << DoorSlot.DOWN_1,
} as const;

type DoorSlotFlagValue = BitFlag & {
  readonly __doorSlotFlagBrand: symbol;
};
type DoorSlotFlagType = {
  readonly [K in keyof typeof DoorSlotFlagInternal]: DoorSlotFlagValue;
};

export const DoorSlotFlag = DoorSlotFlagInternal as DoorSlotFlagType;
export type DoorSlotFlag = DoorSlotFlagType[keyof DoorSlotFlagType];

export const DoorSlotFlagZero = 0 as BitFlags<DoorSlotFlag>;

----
enums\flags\EntityFlag.ts
/**
 * This is represented as an object instead of an enum due to limitations with TypeScript enums. (We
 * want this type to be a child of the `BitFlag` type.)
 *
 * @enum
 * @notExported
 * @rename EntityFlag
 */
const EntityFlagInternal = {
  /**
   * Prevents status effects from applying to the entity (e.g. freeze, poison, slow, charm,
   * confusion, fear, burn, etc.).
   *
   * 1 << 0 (1)
   */
  NO_STATUS_EFFECTS: 1 << 0,

  /**
   * Do not interpolate the position.
   *
   * 1 << 1 (2)
   */
  NO_INTERPOLATE: 1 << 1,

  /**
   * The "Appear" animation will be played after the entity is initialized.
   *
   * 1 << 2 (4)
   */
  APPEAR: 1 << 2,

  /**
   * Meant for entities that have a sprite loaded that represent a floor texture. Entities with this
   * flag will be removed after their first render. (Removing the entity is desirable because we
   * would not want it to override other things that render to the floor, like bomb explosions.) You
   * can use `EntityFlag.NO_REMOVE_ON_TEX_RENDER` to disable this behavior.
   *
   * 1 << 3 (8)
   */
  RENDER_FLOOR: 1 << 3,

  /**
   * Will not be a target of NPCs or familiars.
   *
   * 1 << 4 (16)
   */
  NO_TARGET: 1 << 4,

  /** 1 << 5 (32) */
  FREEZE: 1 << 5,

  /** 1 << 6 (64) */
  POISON: 1 << 6,

  /** 1 << 7 (128) */
  SLOW: 1 << 7,

  /** 1 << 8 (256) */
  CHARM: 1 << 8,

  /** 1 << 9 (512) */
  CONFUSION: 1 << 9,

  /** 1 << 10 (1024) */
  MIDAS_FREEZE: 1 << 10,

  /**
   * Fleeing in fear (from e.g. Mom's Pad).
   *
   * 1 << 11 (2048)
   */
  FEAR: 1 << 11,

  /**
   * Caused by Fire Mind tears. Works like poison except with a red color effect.
   *
   * 1 << 12 (4096)
   */
  BURN: 1 << 12,

  /**
   * Meant for entities that have a sprite loaded that represent a wall texture. Entities with this
   * flag will be removed after their first render. (Removing the entity is desirable because we
   * would not want it to override other things that render to the wall, like bomb explosions.) You
   * can use `EntityFlag.NO_REMOVE_ON_TEX_RENDER` to disable this behavior.
   *
   * 1 << 13 (8192)
   */
  RENDER_WALL: 1 << 13,

  /**
   * The entity is updating at 60 frames per second and this is an odd frame.
   *
   * 1 << 14 (16384)
   */
  INTERPOLATION_UPDATE: 1 << 14,

  /**
   * Indicates that the entity is in a side-scrolling room and is within a gravity zone.
   *
   * 1 << 15 (32768)
   */
  APPLY_GRAVITY: 1 << 15,

  /** 1 << 16 (65536) */
  NO_BLOOD_SPLASH: 1 << 16,

  /**
   * See `EntityFlag.FLAG_RENDER_FLOOR` and `EntityFlag.FLAG_RENDER_WALL`.
   *
   * 1 << 17 (131072)
   */
  NO_REMOVE_ON_TEX_RENDER: 1 << 17,

  /** 1 << 18 (262144) */
  NO_DEATH_TRIGGER: 1 << 18,

  /**
   * This shares the same value as `FLAG_LASER_POP` and `FLAG_ITEM_SHOULD_DUPLICATE`, but has a
   * different meaning depending on the entity type.
   *
   * 1 << 19 (524288)
   */
  NO_SPIKE_DAMAGE: 1 << 19,

  /**
   * This shares the same value as `FLAG_NO_SPIKE_DAMAGE` and `FLAG_ITEM_SHOULD_DUPLICATE`, but has
   * a different meaning depending on the entity type.
   *
   * 1 << 19 (524288)
   */
  LASER_POP: 1 << 19,

  /**
   * A collectible affected by Damocles. The flag indicates that it will be duplicated at the end of
   * the current frame.
   *
   * This shares the same value as `FLAG_NO_SPIKE_DAMAGE` and `FLAG_LASER_POP`, but has a different
   * meaning depending on the entity type.
   *
   * 1 << 19 (524288)
   */
  ITEM_SHOULD_DUPLICATE: 1 << 19,

  /**
   * Some bosses (like Lamb or Mother) can die but they will still appear to be active in the room
   * (`IsActiveEnemy`). You can check this flag in those cases.
   *
   * 1 << 20 (1048576)
   */
  BOSS_DEATH_TRIGGERED: 1 << 20,

  /** 1 << 21 (2097152) */
  DONT_OVERWRITE: 1 << 21,

  /** 1 << 22 (4194304) */
  SPAWN_STICKY_SPIDERS: 1 << 22,

  /** 1 << 23 (8388608) */
  SPAWN_BLACK_HP: 1 << 23,

  /** 1 << 24 (16777216) */
  SHRINK: 1 << 24,

  /** 1 << 25 (33554432) */
  NO_FLASH_ON_DAMAGE: 1 << 25,

  /** 1 << 26 (67108864) */
  NO_KNOCKBACK: 1 << 26,

  /** 1 << 27 (134217728) */
  SLIPPERY_PHYSICS: 1 << 27,

  /** 1 << 28 (268435456) */
  ADD_JAR_FLY: 1 << 28,

  /** 1 << 29 (536870912) */
  FRIENDLY: 1 << 29,

  /** 1 << 30 (1073741824) */
  NO_PHYSICS_KNOCKBACK: 1 << 30,

  /** 1 << 31 (2147483648) */
  DONT_COUNT_BOSS_HP: 1 << 31,

  /** 1 << 32 (4294967296) */
  NO_SPRITE_UPDATE: 1 << 32,

  /** 1 << 33 */
  CONTAGIOUS: 1 << 33,

  /**
   * Used by the Mom's Razor collectible.
   *
   * 1 << 34
   */
  BLEED_OUT: 1 << 34,

  /**
   * Hides the HP bar generated by the Spider Mod collectible.
   *
   * 1 << 35
   */
  HIDE_HP_BAR: 1 << 35,

  /** 1 << 36 */
  NO_DAMAGE_BLINK: 1 << 36,

  /**
   * The entity will persist between rooms.
   *
   * 1 << 37
   */
  PERSISTENT: 1 << 37,

  /** 1 << 38 */
  BACKDROP_DETAIL: 1 << 38,

  /** 1 << 39 */
  AMBUSH: 1 << 39,

  /** 1 << 40 */
  GLITCH: 1 << 40,

  /** 1 << 41 */
  SPIN: 1 << 41,

  /** 1 << 42 */
  NO_REWARD: 1 << 42,

  /** 1 << 43 */
  REDUCE_GIBS: 1 << 43,

  /** 1 << 44 */
  TRANSITION_UPDATE: 1 << 44,

  /** 1 << 45 */
  NO_PLAYER_CONTROL: 1 << 45,

  /**
   * Makes the entity excluded from the results of the `Isaac.FindByType` method. Additionally, the
   * entity will not fire the `ENTITY_TAKE_DMG` callback.
   *
   * 1 << 46
   */
  NO_QUERY: 1 << 46,

  /** 1 << 47 */
  KNOCKED_BACK: 1 << 47,

  /** 1 << 48 */
  APPLY_IMPACT_DAMAGE: 1 << 48,

  /** 1 << 49 */
  ICE_FROZEN: 1 << 49,

  /** 1 << 50 */
  ICE: 1 << 50,

  /** 1 << 51 */
  MAGNETIZED: 1 << 51,

  /** 1 << 52 */
  BAITED: 1 << 52,

  /** 1 << 53 */
  KILL_SWITCH: 1 << 53,

  /** 1 << 54 */
  WEAKNESS: 1 << 54,

  /** 1 << 55 */
  EXTRA_GORE: 1 << 55,

  /** 1 << 56 */
  BRIMSTONE_MARKED: 1 << 56,

  /** 1 << 57 */
  HELD: 1 << 57,

  /** 1 << 58 */
  THROWN: 1 << 58,

  /** 1 << 59 */
  FRIENDLY_BALL: 1 << 59,
} as const;

type EntityFlagValue = BitFlag & {
  readonly __entityFlagBrand: symbol;
};
type EntityFlagType = {
  readonly [K in keyof typeof EntityFlagInternal]: EntityFlagValue;
};

export const EntityFlag = EntityFlagInternal as EntityFlagType;
export type EntityFlag = EntityFlagType[keyof EntityFlagType];

export const EntityFlagZero = 0 as BitFlags<EntityFlag>;

----
enums\flags\EntityPartition.ts
/**
 * This is represented as an object instead of an enum due to limitations with TypeScript enums. (We
 * want this type to be a child of the `BitFlag` type.)
 *
 * @enum
 * @notExported
 * @rename EntityPartition
 */
const EntityPartitionInternal = {
  /** 1 << 0 (1) */
  FAMILIAR: 1 << 0,

  /** 1 << 1 (2) */
  BULLET: 1 << 1,

  /** 1 << 2 (4) */
  TEAR: 1 << 2,

  /** 1 << 3 (8) */
  ENEMY: 1 << 3,

  /** 1 << 4 (16) */
  PICKUP: 1 << 4,

  /** 1 << 5 (32) */
  PLAYER: 1 << 5,

  /**
   * 1 << 6 (64)
   *
   * @deprecated The `Isaac.FindInRadius` method will only work with entities that have collision.
   *             Since effects do not have collision, they will never be returned. Thus, this enum
   *             is useless.
   */
  // eslint-disable-next-line deprecation/deprecation
  EFFECT: 1 << 6,
} as const;

type EntityPartitionValue = BitFlag & {
  readonly __entityPartitionBrand: symbol;
};
type EntityPartitionType = {
  readonly [K in keyof typeof EntityPartitionInternal]: EntityPartitionValue;
};

export const EntityPartition = EntityPartitionInternal as EntityPartitionType;
export type EntityPartition = EntityPartitionType[keyof EntityPartitionType];

export const EntityPartitionZero = 0 as BitFlags<EntityPartition>;

----
enums\flags\ItemConfigTag.ts
/**
 * Matches the ItemConfig.TAG_ members of the ItemConfig class. In IsaacScript, we re-implement this
 * as an object instead, since it is cleaner.
 *
 * This is represented as an object instead of an enum due to limitations with TypeScript enums. (We
 * want this type to be a child of the `BitFlag` type.)
 *
 * @enum
 * @notExported
 * @rename ItemConfigTag
 */
const ItemConfigTagInternal = {
  /**
   * Dead things (for the Parasite unlock).
   *
   * Equal to "dead" in "items_metadata.xml".
   *
   * 1 << 0 (1)
   */
  DEAD: 1 << 0,

  /**
   * Syringes (for Little Baggy and the Spun transformation).
   *
   * Equal to "syringe" in "items_metadata.xml".
   *
   * 1 << 1 (2)
   */
  SYRINGE: 1 << 1,

  /**
   * Mom's things (for Mom's Contact and the Yes Mother transformation).
   *
   * Equal to "mom" in "items_metadata.xml".
   *
   * 1 << 2 (4)
   */
  MOM: 1 << 2,

  /**
   * Technology items (for the Technology Zero unlock).
   *
   * Equal to "tech" in "items_metadata.xml".
   *
   * 1 << 3 (8)
   */
  TECH: 1 << 3,

  /**
   * Battery items (for the Jumper Cables unlock).
   *
   * Equal to "battery" in "items_metadata.xml".
   *
   * 1 << 4 (16)
   */
  BATTERY: 1 << 4,

  /**
   * Guppy items (Guppy transformation).
   *
   * Equal to "guppy" in "items_metadata.xml".
   *
   * 1 << 5 (32)
   */
  GUPPY: 1 << 5,

  /**
   * Fly items (Beelzebub transformation).
   *
   * Equal to "fly" in "items_metadata.xml".
   *
   * 1 << 6 (64)
   */
  FLY: 1 << 6,

  /**
   * Bob items (Bob transformation).
   *
   * Equal to "bob" in "items_metadata.xml".
   *
   * 1 << 7 (128)
   */
  BOB: 1 << 7,

  /**
   * Mushroom items (Fun Guy transformation).
   *
   * Equal to "mushroom" in "items_metadata.xml".
   *
   * 1 << 8 (256)
   */
  MUSHROOM: 1 << 8,

  /**
   * Baby items (Conjoined transformation).
   *
   * Equal to "mushroom" in "items_metadata.xml".
   *
   * 1 << 9 (512)
   */
  BABY: 1 << 9,

  /**
   * Angel items (Seraphim transformation).
   *
   * Equal to "angel" in "items_metadata.xml".
   *
   * 1 << 10 (1024)
   */
  ANGEL: 1 << 10,

  /**
   * Devil items (Leviathan transformation).
   *
   * Equal to "devil" in "items_metadata.xml".
   *
   * 1 << 11 (2048)
   */
  DEVIL: 1 << 11,

  /**
   * Poop items (Oh Shit transformation).
   *
   * Equal to "poop" in "items_metadata.xml".
   *
   * 1 << 12 (4096)
   */
  POOP: 1 << 12,

  /**
   * Book items (Book Worm transformation).
   *
   * Equal to "book" in "items_metadata.xml".
   *
   * 1 << 13 (8192)
   */
  BOOK: 1 << 13,

  /**
   * Spider items (Spider Baby transformation).
   *
   * Equal to "spider" in "items_metadata.xml".
   *
   * 1 << 14 (16384)
   */
  SPIDER: 1 << 14,

  /**
   * Quest item (cannot be rerolled or randomly obtained).
   *
   * Equal to "quest" in "items_metadata.xml".
   *
   * 1 << 15 (32768)
   */
  QUEST: 1 << 15,

  /**
   * Can be spawned by Monster Manual.
   *
   * Equal to "monstermanual" in "items_metadata.xml".
   *
   * 1 << 16 (65536)
   */
  MONSTER_MANUAL: 1 << 16,

  /**
   * Cannot appear in Greed Mode.
   *
   * Equal to "nogreed" in "items_metadata.xml".
   *
   * 1 << 17 (131072)
   */
  NO_GREED: 1 << 17,

  /**
   * Food item (for Binge Eater).
   *
   * Equal to "food" in "items_metadata.xml".
   *
   * 1 << 18 (262144)
   */
  FOOD: 1 << 18,

  /**
   * Tears up item (for Lachryphagy unlock detection).
   *
   * Equal to "tearsup" in "items_metadata.xml".
   *
   * 1 << 19 (524288)
   */
  TEARS_UP: 1 << 19,

  /**
   * Whitelisted item for Tainted Lost.
   *
   * Equal to "offensive" in "items_metadata.xml".
   *
   * 1 << 20 (1048576)
   */
  OFFENSIVE: 1 << 20,

  /**
   * Blacklisted item for Keeper & Tainted Keeper.
   *
   * Equal to "nokeeper" in "items_metadata.xml".
   *
   * 1 << 21 (2097152)
   */
  NO_KEEPER: 1 << 21,

  /**
   * Blacklisted item for The Lost's Birthright.
   *
   * Equal to "nolostbr" in "items_metadata.xml".
   *
   * 1 << 22 (4194304)
   */
  NO_LOST_BR: 1 << 22,

  /**
   * Star themed items (for the Planetarium unlock).
   *
   * Equal to "stars" in "items_metadata.xml".
   *
   * 1 << 23 (8388608)
   */
  STARS: 1 << 23,

  /**
   * Summonable items (for Tainted Bethany).
   *
   * Equal to "summonable" in "items_metadata.xml".
   *
   * 1 << 24 (16777216)
   */
  SUMMONABLE: 1 << 24,

  /**
   * Can't be obtained in Cantripped challenge.
   *
   * Equal to "nocantrip" in "items_metadata.xml".
   *
   * 1 << 25 (33554432)
   */
  NO_CANTRIP: 1 << 25,

  /**
   * Active items that have wisps attached to them (automatically set).
   *
   * Not equal to any particular tag in "items_metadata.xml". Instead, this is set for all of the
   * items in the "wisps.xml" file.
   *
   * 1 << 26 (67108864)
   */
  WISP: 1 << 26,

  /**
   * Unique familiars that cannot be duplicated.
   *
   * Equal to "uniquefamiliar" in "items_metadata.xml".
   *
   * 1 << 27 (134217728)
   */
  UNIQUE_FAMILIAR: 1 << 27,

  /**
   * Items that should not be obtainable in challenges.
   *
   * Equal to "nochallenge" in "items_metadata.xml".
   *
   * 1 << 28 (268435456)
   */
  NO_CHALLENGE: 1 << 28,

  /**
   * Items that should not be obtainable in daily runs.
   *
   * Equal to "nodaily" in "items_metadata.xml".
   *
   * 1 << 29 (536870912)
   */
  NO_DAILY: 1 << 29,

  /**
   * Items that should be shared between Tainted Lazarus' forms.
   *
   * This is different from `LAZ_SHARED_GLOBAL` in that it does apply stat changes from the item for
   * both characters.
   *
   * Equal to "lazarusshared" in "items_metadata.xml".
   *
   * 1 << 30 (1073741824)
   */
  LAZ_SHARED: 1 << 30,

  /**
   * Items that should be shared between Tainted Lazarus' forms but only through global checks (such
   * as `PlayerManager::HasCollectible`).
   *
   * This is different from `LAZ_SHARED` in that it does not apply stat changes from the item for
   * both characters.
   *
   * Equal to "lazarussharedglobal" in "items_metadata.xml".
   *
   * 1 << 31 (2147483648)
   */
  LAZ_SHARED_GLOBAL: 1 << 31,

  /**
   * Items that will not be a random starting item for Eden and Tainted Eden.
   *
   * Equal to "noeden" in "items_metadata.xml".
   *
   * 1 << 32 (4294967296)
   */
  NO_EDEN: 1 << 32,
} as const;

type ItemConfigTagValue = BitFlag & {
  readonly __itemConfigTagBrand: symbol;
};
type ItemConfigTagType = {
  readonly [K in keyof typeof ItemConfigTagInternal]: ItemConfigTagValue;
};

export const ItemConfigTag = ItemConfigTagInternal as ItemConfigTagType;
export type ItemConfigTag = ItemConfigTagType[keyof ItemConfigTagType];

export const ItemConfigTagZero = 0 as BitFlags<ItemConfigTag>;

----
enums\flags\LevelCurse.ts
import { CurseID } from "../CurseID";

/**
 * This is represented as an object instead of an enum due to limitations with TypeScript enums. (We
 * want this type to be a child of the `BitFlag` type.)
 *
 * @enum
 * @notExported
 * @rename LevelCurse
 */
const LevelCurseInternal = {
  /** 1 << -1 (0) */
  NONE: 0,

  /**
   * 1 << 0 (1)
   *
   * Corresponds to `CurseID.DARKNESS` (1).
   */
  DARKNESS: getLevelCurse(CurseID.DARKNESS),

  /**
   * 1 << 1 (2)
   *
   * Corresponds to `CurseID.LABYRINTH` (2).
   */
  LABYRINTH: getLevelCurse(CurseID.LABYRINTH),

  /**
   * 1 << 2 (4)
   *
   * Corresponds to `CurseID.LOST` (3).
   */
  LOST: getLevelCurse(CurseID.LOST),

  /**
   * 1 << 3 (8)
   *
   * Corresponds to `CurseID.UNKNOWN` (4).
   */
  UNKNOWN: getLevelCurse(CurseID.UNKNOWN),

  /**
   * 1 << 4 (16)
   *
   * Corresponds to `CurseID.CURSED` (5).
   */
  CURSED: getLevelCurse(CurseID.CURSED),

  /**
   * 1 << 5 (32)
   *
   * Corresponds to `CurseID.MAZE` (6).
   */
  MAZE: getLevelCurse(CurseID.MAZE),

  /**
   * 1 << 6 (64)
   *
   * Corresponds to `CurseID.BLIND` (7).
   */
  BLIND: getLevelCurse(CurseID.BLIND),

  /**
   * 1 << 7 (128)
   *
   * Corresponds to `CurseID.GIANT` (8).
   */
  GIANT: getLevelCurse(CurseID.GIANT),
} as const;

type LevelCurseValue = BitFlag & {
  readonly __levelCurseBrand: symbol;
};
type LevelCurseType = {
  readonly [K in keyof typeof LevelCurseInternal]: LevelCurseValue;
};

export const LevelCurse = LevelCurseInternal as LevelCurseType;
export type LevelCurse = LevelCurseType[keyof LevelCurseType];

export const LevelCurseZero = 0 as BitFlags<LevelCurse>;

/**
 * In the "enums.lua" file, the values of the `LevelCurse` enum are hardcoded. We compute them here
 * to have cleaner code.
 */
function getLevelCurse(curseID: int): int {
  return 1 << (curseID - 1);
}

----
enums\flags\ProjectileFlag.ts
/**
 * For `EntityType.PROJECTILE` (9).
 *
 * This enum was renamed from "ProjectileFlags" to be consistent with the other flag enums.
 *
 * This is represented as an object instead of an enum due to limitations with TypeScript enums. (We
 * want this type to be a child of the `BitFlag` type.)
 *
 * @enum
 * @notExported
 * @rename ProjectileFlag
 */
const ProjectileFlagInternal = {
  /** 1 << 0 (1) */
  SMART: 1 << 0,

  /** 1 << 1 (2) */
  EXPLODE: 1 << 1,

  /** 1 << 2 (4) */
  ACID_GREEN: 1 << 2,

  /** 1 << 3 (8) */
  GOO: 1 << 3,

  /** 1 << 4 (16) */
  GHOST: 1 << 4,

  /** 1 << 5 (32) */
  WIGGLE: 1 << 5,

  /** 1 << 6 (64) */
  BOOMERANG: 1 << 6,

  /** 1 << 7 (1280 */
  HIT_ENEMIES: 1 << 7,

  /** 1 << 8 (256) */
  ACID_RED: 1 << 8,

  /** 1 << 9 (512) */
  GREED: 1 << 9,

  /** 1 << 10 (1024) */
  RED_CREEP: 1 << 10,

  /** 1 << 11 (2048) */
  ORBIT_CW: 1 << 11,

  /** 1 << 12 (4096) */
  ORBIT_CCW: 1 << 12,

  /** 1 << 13 (8192) */
  NO_WALL_COLLIDE: 1 << 13,

  /** 1 << 14 (16384) */
  CREEP_BROWN: 1 << 14,

  /** 1 << 15 (32768) */
  FIRE: 1 << 15,

  /** 1 << 16 (65536) */
  BURST: 1 << 16,

  /** 1 << 17 (131072) */
  ANY_HEIGHT_ENTITY_HIT: 1 << 17,

  /** 1 << 18 (262144) */
  CURVE_LEFT: 1 << 18,

  /** 1 << 19 (524288) */
  CURVE_RIGHT: 1 << 19,

  /** 1 << 20 (1048576) */
  TURN_HORIZONTAL: 1 << 20,

  /** 1 << 21 (2097152) */
  SINE_VELOCITY: 1 << 21,

  /** 1 << 22 (4194304) */
  MEGA_WIGGLE: 1 << 22,

  /** 1 << 23 (8388608) */
  SAWTOOTH_WIGGLE: 1 << 23,

  /** 1 << 24 (16777216) */
  SLOWED: 1 << 24,

  /** 1 << 25 (33554432) */
  TRIANGLE: 1 << 25,

  /** 1 << 26 (67108864) */
  MOVE_TO_PARENT: 1 << 26,

  /** 1 << 27 (134217728) */
  ACCELERATE: 1 << 27,

  /** 1 << 28 (268435456) */
  DECELERATE: 1 << 28,

  /** 1 << 29 (536870912) */
  BURST3: 1 << 29,

  /** 1 << 30 (1073741824) */
  CONTINUUM: 1 << 30,

  /** 1 << 31 (2147483648) */
  CANT_HIT_PLAYER: 1 << 31,

  /** 1 << 32 (4294967296) */
  CHANGE_FLAGS_AFTER_TIMEOUT: 1 << 32,

  /** 1 << 33 */
  CHANGE_VELOCITY_AFTER_TIMEOUT: 1 << 33,

  /** 1 << 34 */
  STASIS: 1 << 34,

  /** 1 << 35 */
  FIRE_WAVE: 1 << 35,

  /** 1 << 36 */
  FIRE_WAVE_X: 1 << 36,

  /** 1 << 37 */
  ACCELERATE_EX: 1 << 37,

  /** 1 << 38 */
  BURST8: 1 << 38,

  /** 1 << 39 */
  FIRE_SPAWN: 1 << 39,

  /** 1 << 40 */
  ANTI_GRAVITY: 1 << 40,

  /** 1 << 41 */
  TRACTOR_BEAM: 1 << 41,

  /** 1 << 42 */
  BOUNCE: 1 << 42,

  /** 1 << 43 */
  BOUNCE_FLOOR: 1 << 43,

  /** 1 << 44 */
  SHIELDED: 1 << 44,

  /** 1 << 45 */
  BLUE_FIRE_SPAWN: 1 << 45,

  /** 1 << 46 */
  LASER_SHOT: 1 << 46,

  /** 1 << 47 */
  GODHEAD: 1 << 47,

  /** 1 << 48 */
  SMART_PERFECT: 1 << 48,

  /** 1 << 49 */
  BURST_SPLIT: 1 << 49,

  /** 1 << 50 */
  WIGGLE_ROTGUT: 1 << 50,

  /** 1 << 51 */
  FREEZE: 1 << 51,

  /** 1 << 52 */
  ACCELERATE_TO_POSITION: 1 << 52,

  /**
   * The cluster of tears that Mother shoots.
   *
   * 1 << 53
   */
  BROCCOLI: 1 << 53,

  /** 1 << 54 */
  BACK_SPLIT: 1 << 54,

  /** 1 << 55 */
  SIDE_WAVE: 1 << 55,

  /** 1 << 56 */
  ORBIT_PARENT: 1 << 56,

  /** 1 << 57 */
  FADEOUT: 1 << 57,
} as const;

type ProjectileFlagValue = BitFlag & {
  readonly __projectileFlagBrand: symbol;
};
type ProjectileFlagType = {
  readonly [K in keyof typeof ProjectileFlagInternal]: ProjectileFlagValue;
};

export const ProjectileFlag = ProjectileFlagInternal as ProjectileFlagType;
export type ProjectileFlag = ProjectileFlagType[keyof ProjectileFlagType];

export const ProjectileFlagZero = 0 as BitFlags<ProjectileFlag>;

----
enums\flags\RoomDescriptorFlag.ts
/**
 * Matches the `RoomDescriptor.FLAG_*` members of the `RoomDescriptor` class. In IsaacScript, we
 * reimplement this as an object instead, since it is cleaner.
 *
 * This is represented as an object instead of an enum due to limitations with TypeScript enums. (We
 * want this type to be a child of the `BitFlag` type.)
 *
 * @enum
 * @notExported
 * @rename RoomDescriptorFlag
 */
const RoomDescriptorFlagInternal = {
  /**
   * Room is clear, don't spawn enemies when visiting.
   *
   * 1 << 0 (1)
   */
  CLEAR: 1 << 0,

  /**
   * All pressure plates have been triggered in this room. This won't be set if there are no trigger
   * pressure plates in the first place.
   *
   * 1 << 1 (2)
   */
  PRESSURE_PLATES_TRIGGERED: 1 << 1,

  /**
   * A Sacrifice Room has paid out.
   *
   * 1 << 2 (4)
   */
  SACRIFICE_DONE: 1 << 2,

  /**
   * A Challenge Room has finished.
   *
   * 1 << 3 (8)
   */
  CHALLENGE_DONE: 1 << 3,

  /**
   * Load Greed/Krampus instead of the room specified by the type & variant.
   *
   * 1 << 4 (16)
   */
  SURPRISE_MINIBOSS: 1 << 4,

  /**
   * Pits in this room contain water.
   *
   * 1 << 5 (32)
   */
  HAS_WATER: 1 << 5,

  /**
   * Play alternate boss music in this room.
   *
   * 1 << 6 (64)
   */
  ALT_BOSS_MUSIC: 1 << 6,

  /**
   * Don't pay out with a reward when clearing this room. Used for traps that lock the player in the
   * room when triggered.
   *
   * 1 << 7 (128)
   */
  NO_REWARD: 1 << 7,

  /**
   * Was flooded by an item (i.e. Flush).
   *
   * 1 << 8 (256)
   */
  FLOODED: 1 << 8,

  /**
   * Complete darkness.
   *
   * 1 << 9 (512)
   */
  PITCH_BLACK: 1 << 9,

  /**
   * Room spawned by Red Key.
   *
   * 1 << 10 (1024)
   */
  RED_ROOM: 1 << 10,

  /**
   * Treasure room transformed by Devil's Crown.
   *
   * 1 << 11 (2048)
   */
  DEVIL_TREASURE: 1 << 11,

  /**
   * Use an alternate backdrop. (This is used by some floors such as Dross and Ashpit.)
   *
   * 1 << 12 (4096)
   */
  USE_ALTERNATE_BACKDROP: 1 << 12,

  /**
   * The room is covered in cursed mist; the player is temporarily reduced to base items and stats.
   *
   * 1 << 13 (8192)
   */
  CURSED_MIST: 1 << 13,

  /**
   * Mama Mega has activated in this room.
   *
   * 1 << 14 (16384)
   */
  MAMA_MEGA: 1 << 14,

  /**
   * Don't generate walls (for Beast arena).
   *
   * 1 << 15 (32768)
   */
  NO_WALLS: 1 << 15,

  /**
   * Rotgut's heart was killed, immediately play Rotgut's death animation when reentering this room.
   *
   * 1 << 16 (65536)
   */
  ROTGUT_CLEARED: 1 << 16,

  /**
   * A portal spawned by Lil Portal now links to this room; don't create more portals that link to
   * it.
   *
   * 1 << 17 (131072)
   */
  PORTAL_LINKED: 1 << 17,

  /**
   * If walking into this room through a door, redirect to a Blue Womb room instead. (This is used
   * by Blue Key.)
   *
   * 1 << 18 (262144)
   */
  BLUE_REDIRECT: 1 << 18,
} as const;

type RoomDescriptorFlagValue = BitFlag & {
  readonly __roomDescriptorFlagBrand: symbol;
};
type RoomDescriptorFlagType = {
  readonly [K in keyof typeof RoomDescriptorFlagInternal]: RoomDescriptorFlagValue;
};

export const RoomDescriptorFlag =
  RoomDescriptorFlagInternal as RoomDescriptorFlagType;
export type RoomDescriptorFlag =
  RoomDescriptorFlagType[keyof RoomDescriptorFlagType];

export const RoomDescriptorFlagZero = 0 as BitFlags<RoomDescriptorFlag>;

----
enums\flags\TargetFlag.ts
/**
 * This is represented as an object instead of an enum due to limitations with TypeScript enums. (We
 * want this type to be a child of the `BitFlag` type.)
 *
 * @enum
 * @notExported
 * @rename TargetFlag
 */
const TargetFlagInternal = {
  /**
   * Allow switching to a better target even if we already have one.
   *
   * 1 << 0 (1)
   */
  ALLOW_SWITCHING: 1 << 0,

  /**
   * Do not prioritize enemies that are close to the familiar's owner.
   *
   * 1 << 1 (2)
   */
  DONT_PRIORITIZE_ENEMIES_CLOSE_TO_PLAYER: 1 << 1,

  /**
   * Prioritize enemies with higher HP.
   *
   * 1 << 2 (4)
   */
  PRIORITIZE_ENEMIES_WITH_HIGH_HP: 1 << 2,

  /**
   * Prioritize enemies with higher HP.
   *
   * 1 << 3 (8)
   */
  PRIORITIZE_ENEMIES_WITH_LOW_HP: 1 << 3,

  /**
   * Give a lower priority to our current target. (This makes it more likely for the familiar to
   * switch between targets.)
   *
   * 1 << 4 (16)
   */
  GIVE_LOWER_PRIORITY_TO_CURRENT_TARGET: 1 << 4,
} as const;

type TargetFlagValue = BitFlag & {
  readonly __targetFlagBrand: symbol;
};
type TargetFlagType = {
  readonly [K in keyof typeof TargetFlagInternal]: TargetFlagValue;
};

export const TargetFlag = TargetFlagInternal as TargetFlagType;
export type TargetFlag = TargetFlagType[keyof TargetFlagType];

export const TargetFlagZero = 0 as BitFlags<TargetFlag>;

----
enums\flags\TearFlag.ts
/**
 * For `EntityType.TEAR` (2).
 *
 * This enum was renamed from "TearFlags" to be consistent with the other flag enums.
 *
 * This is represented as an object instead of an enum due to limitations with TypeScript enums. (We
 * want this type to be a child of the `BitFlag` type. Furthermore, enums cannot be instantiated
 * with `BitSet128` objects.)
 *
 * Generally, the `TearVariant` affects the graphics of the tear, while the `TearFlag` affects the
 * gameplay mechanic. For example, the Euthanasia collectible grants a chance for needle tears that
 * explode. `TearVariant.NEEDLE` makes the tear look like a needle, and the exploding effect comes
 * from `TearFlag.NEEDLE`.
 *
 * However, there are some exceptions. For example, Sharp Key makes Isaac shoot key tears that deal
 * extra damage. Both the graphical effect and the extra damage are granted by
 * `TearVariant.KEY_BLOOD`.
 *
 * @enum
 * @notExported
 * @rename TearFlag
 */
const TearFlagInternal = {
  /**
   * Default tear (no special effects).
   *
   * 1 << -1 (0)
   */
  NORMAL: BitSet128(0, 0),

  /**
   * Goes through obstacles. Used by Ouija Board.
   *
   * 1 << 0 (1)
   */
  SPECTRAL: getTearFlag(0),

  /**
   * Goes through enemies. Used by Cupid's Arrow.
   *
   * 1 << 1 (2)
   */
  PIERCING: getTearFlag(1),

  /**
   * Used by Spoon Bender.
   *
   * 1 << 2 (4)
   */
  HOMING: getTearFlag(2),

  /**
   * Slows enemies on contact. Used by Spider Bite.
   *
   * 1 << 3 (8)
   */
  SLOW: getTearFlag(3),

  /**
   * Used by The Common Cold.
   *
   * 1 << 4 (16)
   */
  POISON: getTearFlag(4),

  /**
   * Freezes enemies in place. (For the ice effect, see `TearFlag.TEAR_ICE`.) Used by Mom's
   * Contacts.
   *
   * 1 << 5 (32)
   */
  FREEZE: getTearFlag(5),

  /**
   * Splits into two different tears on collision. Used by The Parasite.
   *
   * 1 << 6 (64)
   */
  SPLIT: getTearFlag(6),

  /**
   * The tear increases in size and damage the longer it travels. Used by Lump of Coal.
   *
   * 1 << 7 (128)
   */
  GROW: getTearFlag(7),

  /**
   * Returns backwards after traveling for a little while. Used by My Reflection.
   *
   * 1 << 8 (256)
   */
  BOOMERANG: getTearFlag(8),

  /**
   * Keeps going past enemies that it kills (with less damage). Used by Polyphemus.
   *
   * 1 << 9 (512)
   */
  PERSISTENT: getTearFlag(9),

  /**
   * Used by the Wiggle Worm trinket.
   *
   * 1 << 10 (1024)
   */
  WIGGLE: getTearFlag(10),

  /**
   * Created a blue fly on hit. Used by The Mulligan.
   *
   * 1 << 11 (2048)
   */
  MULLIGAN: getTearFlag(11),

  /**
   * Explodes on hit. Used by Ipecac.
   *
   * 1 << 12 (4096)
   */
  EXPLOSIVE: getTearFlag(12),

  /**
   * Used by Mom's Eyeshadow.
   *
   * 1 << 13 (8192)
   */
  CHARM: getTearFlag(13),

  /**
   * Used by Iron Bar.
   *
   * 1 << 14 (16384)
   */
  CONFUSION: getTearFlag(14),

  /**
   * Enemies killed have a 33% chance to drop a heart. Used by Tainted Magdalene.
   *
   * 1 << 15 (32768)
   */
  HP_DROP: getTearFlag(15),

  /**
   * Tears orbit around the player. Used by Tiny Planet.
   *
   * 1 << 16 (65536)
   */
  ORBIT: getTearFlag(16),

  /**
   * Floats in place until the player releases the fire button. Used by Anti-Gravity.
   *
   * 1 << 17 (131072)
   */
  WAIT: getTearFlag(17),

  /**
   * Splits into four different tears on collision. Used by Cricket's Body.
   *
   * 1 << 18 (262144)
   */
  QUAD_SPLIT: getTearFlag(18),

  /**
   * Bounces off of enemies, walls, rocks, and so on. Used by Rubber Cement.
   *
   * 1 << 19 (524288)
   */
  BOUNCE: getTearFlag(19),

  /**
   * Used by Mom's Perfume.
   *
   * 1 << 20 (1048576)
   */
  FEAR: getTearFlag(20),

  /**
   * The tear shrinks the longer it travels. Used by Proptosis.
   *
   * 1 << 21 (2097152)
   */
  SHRINK: getTearFlag(21),

  /**
   * Used by Fire Mind.
   *
   * 1 << 22 (4194304)
   */
  BURN: getTearFlag(22),

  /**
   * Attracts enemies and pickups. Used by Strange Attractor.
   *
   * 1 << 23 (8388608)
   */
  ATTRACTOR: getTearFlag(23),

  /**
   * Pushes enemies back further than normal.
   *
   * 1 << 24 (16777216)
   */
  KNOCKBACK: getTearFlag(24),

  /**
   * Used by Pulse Worm.
   *
   * 1 << 25 (33554432)
   */
  PULSE: getTearFlag(25),

  /**
   * Used by Ring Worm.
   *
   * 1 << 26 (67108864)
   */
  SPIRAL: getTearFlag(26),

  /**
   * Used by Flat Worm.
   *
   * 1 << 27 (134217728)
   */
  FLAT: getTearFlag(27),

  /**
   * Makes tears explode out of the bomb. Used by Sad Bombs.
   *
   * 1 << 28 (268435456)
   */
  SAD_BOMB: getTearFlag(28),

  /**
   * Damages everything in the room when it explodes. Used by Butt Bombs.
   *
   * 1 << 29 (536870912)
   */
  BUTT_BOMB: getTearFlag(29),

  /**
   * Used by Hook Worm.
   *
   * 1 << 30 (1073741824)
   */
  SQUARE: getTearFlag(30),

  /**
   * Creates an aura around the tear. Used by Godhead.
   *
   * 1 << 31 (2147483648)
   */
  GLOW: getTearFlag(31),

  /**
   * Slows enemies and colors them black. Used by Lil Gish.
   *
   * 1 << 32 (4294967296)
   */
  GISH: getTearFlag(32),

  /**
   * Spawns green creep on hit. Used by Mysterious Liquid.
   *
   * 1 << 33
   */
  MYSTERIOUS_LIQUID_CREEP: getTearFlag(33),

  /**
   * Deletes projectiles that it collides with. Used by Lost Contact.
   *
   * 1 << 34
   */
  SHIELDED: getTearFlag(34),

  /**
   * Spawns a pickup upon exploding. Used by Glitter Bombs.
   *
   * 1 << 35
   */
  GLITTER_BOMB: getTearFlag(35),

  /**
   * Splits into 5 little bombs upon exploding. Used by Scatter Bombs.
   *
   * 1 << 36
   */
  SCATTER_BOMB: getTearFlag(36),

  /**
   * Sticks to enemies and continues to deal damage. Used by Explosivo and Sticky Bombs.
   *
   * 1 << 37
   */
  STICKY: getTearFlag(37),

  /**
   * Pass through walls to loop around the screen. Used by Continuum.
   *
   * 1 << 38
   */
  CONTINUUM: getTearFlag(38),

  /**
   * Creates a light beam on hit. Used by Holy Light.
   *
   * 1 << 39
   */
  LIGHT_FROM_HEAVEN: getTearFlag(39),

  /**
   * Spawns a coin on hit. Used by Bumbo.
   *
   * 1 << 40
   */
  COIN_DROP: getTearFlag(40),

  /**
   * Enemies killed will spawn a black heart.
   *
   * 1 << 41
   */
  BLACK_HP_DROP: getTearFlag(41),

  /**
   * Follows the parent player's beam. Used by Tractor Beam.
   *
   * 1 << 42
   */
  TRACTOR_BEAM: getTearFlag(42),

  /**
   * Shrink enemies on hit. Used by God's Flesh.
   *
   * 1 << 43
   */
  GODS_FLESH: getTearFlag(43),

  /**
   * Have a chance to spawn a coin on hit.
   *
   * 1 << 44
   */
  GREED_COIN: getTearFlag(44),

  /**
   * Causes a large explosion in the shape of a cross. Used by Bomber Boy.
   *
   * 1 << 45
   */
  CROSS_BOMB: getTearFlag(45),

  /**
   * Used by Ouroboros Worm.
   *
   * 1 << 46
   */
  BIG_SPIRAL: getTearFlag(46),

  /**
   * Used by Glaucoma.
   *
   * 1 << 47
   */
  PERMANENT_CONFUSION: getTearFlag(47),

  /**
   * Sticks to enemies and does damage over time. Used by Sinus Infection.
   *
   * 1 << 48
   */
  BOOGER: getTearFlag(48),

  /**
   * Spawns creep on hit and spawns blue flies or spiders. Used by Parasitoid.
   *
   * 1 << 49
   */
  EGG: getTearFlag(49),

  /**
   * Can open doors or break grid entities. Used by Sulfuric Acid.
   *
   * 1 << 50
   */
  ACID: getTearFlag(50),

  /**
   * Splits into two tears. Used by Compound Fracture.
   *
   * 1 << 51
   */
  BONE: getTearFlag(51),

  /**
   * Piercing. When passing through an enemy, gains homing and does double damage. Used by Eye of
   * Belial.
   *
   * 1 << 52
   */
  BELIAL: getTearFlag(52),

  /**
   * Enemies turn gold and drop coins on death. Used by Midas' Touch.
   *
   * 1 << 53
   */
  MIDAS: getTearFlag(53),

  /**
   * Used by Euthanasia.
   *
   * 1 << 54
   */
  NEEDLE: getTearFlag(54),

  /**
   * Causes electricity to ripple around the room, damaging enemies. Used by Jacob's Ladder.
   *
   * 1 << 55
   */
  JACOBS: getTearFlag(55),

  /**
   * Void tears. Instantly kills enemies. Used by Little Horn.
   *
   * 1 << 56
   */
  HORN: getTearFlag(56),

  /**
   * Electricity arcs between tears. Used by Technology Zero.
   *
   * 1 << 57
   */
  LASER: getTearFlag(57),

  /**
   * Tears stay in the air and bump into each other. Used by Pop!
   *
   * 1 << 58
   */
  POP: getTearFlag(58),

  /**
   * Tears combine when they collide into each other. Used by Lachryphagy.
   *
   * 1 << 59
   */
  ABSORB: getTearFlag(59),

  /**
   * Lasers are generated on top of the tear. Used by Trisagion.
   *
   * 1 << 60
   */
  LASER_SHOT: getTearFlag(60),

  /**
   * Continually bounces as it travels. Used by Flat Stone.
   *
   * 1 << 61
   */
  HYDRO_BOUNCE: getTearFlag(61),

  /**
   * Arcing shots that split into smaller tears on impact. Used by Haemolacria.
   *
   * 1 << 62
   */
  BURST_SPLIT: getTearFlag(62),

  /**
   * Spawns green creep. Used by Bob's Bladder.
   *
   * 1 << 63
   */
  CREEP_TRAIL: getTearFlag(63),

  /**
   * Knockback tears. Used by Knockout Drops.
   *
   * 1 << 64
   */
  PUNCH: getTearFlag(64),

  /**
   * Enemies become frozen on death. (For the freeze-in-place effect, see `TearFlag.FREEZE`.)
   *
   * 1 << 65
   */
  ICE: getTearFlag(65),

  /**
   * Enemies being magnetized and pull other things towards them. Used by Lodestone.
   *
   * 1 << 66
   */
  MAGNETIZE: getTearFlag(66),

  /**
   * Marks enemies. Marked enemies will attack and damage each other, as well as have reduced
   * movement speed. Used by Rotten Tomato.
   *
   * 1 << 67
   */
  BAIT: getTearFlag(67),

  /**
   * Velocity can be adjusted by the player while in the air. Used by Eye of the Occult.
   *
   * 1 << 68
   */
  OCCULT: getTearFlag(68),

  /**
   * Tears orbit in a narrow and stable orbit. Used by Saturnus.
   *
   * 1 << 69
   */
  ORBIT_ADVANCED: getTearFlag(69),

  /**
   * Chance to break rocks and open doors. Deals extra damage to rock-type enemies.
   *
   * 1 << 70
   */
  ROCK: getTearFlag(70),

  /**
   * Tears turn and go horizontally when moving past an enemy. Used by Brain Worm.
   *
   * 1 << 71
   */
  TURN_HORIZONTAL: getTearFlag(71),

  /**
   * Spawns red creep.
   *
   * 1 << 72
   */
  BLOOD_BOMB: getTearFlag(72),

  /**
   * Enemies are turned into poop.
   *
   * 1 << 73
   */
  ECOLI: getTearFlag(73),

  /**
   * Enemies have a chance to drop a coin on death. Used by The Hanged Man?
   *
   * 1 << 74
   */
  COIN_DROP_DEATH: getTearFlag(74),

  /**
   * Explosion creates a Brimstone laser cross pattern.
   *
   * 1 << 75
   */
  BRIMSTONE_BOMB: getTearFlag(75),

  /**
   * Creates a black hole on impact.
   *
   * 1 << 76
   */
  RIFT: getTearFlag(76),

  /**
   * Sticks to enemies and multiplies on enemy death.
   *
   * 1 << 77
   */
  SPORE: getTearFlag(77),

  /**
   * Spawns a ghost upon explosion.
   *
   * 1 << 78
   */
  GHOST_BOMB: getTearFlag(78),

  /**
   * Killed enemies will drop a random tarot card.
   *
   * 1 << 79
   */
  CARD_DROP_DEATH: getTearFlag(79),

  /**
   * Killed enemies will drop a random rune.
   *
   * 1 << 80
   */
  RUNE_DROP_DEATH: getTearFlag(80),

  /**
   * Enemies will teleport to a different part of the room on hit.
   *
   * 1 << 81
   */
  TELEPORT: getTearFlag(81),

  /**
   * Used on tears fired on the G-Fuel seed to keep them lingering on a single spot before dropping
   * to the ground. (This is only present on some of the weapon types.)
   *
   * 1 << 82
   */
  TEAR_DECELERATE: getTearFlag(82),

  /**
   * Used on tears fired on the G-Fuel seed to make them accelerate over time. (This is only present
   * on some of the weapon types.)
   *
   * 1 << 83
   */
  TEAR_ACCELERATE: getTearFlag(83),

  /**
   * This is a reserved flag and cannot be randomly picked.
   *
   * Similar to `TearFlag.BOUNCE` but only bounces off walls, not enemies.
   *
   * 1 << 104
   */
  BOUNCE_WALLS_ONLY: getTearFlag(104),

  /**
   * This is a reserved flag and cannot be randomly picked.
   *
   * Cannot deal damage to grid entities. This is used by Saturnus to prevent unfair damage in some
   * rooms.
   *
   * 1 << 105
   */
  NO_GRID_DAMAGE: getTearFlag(105),

  /**
   * This is a reserved flag and cannot be randomly picked.
   *
   * Deals extra damage from behind and inflicts bleeding.
   *
   * 1 << 106
   */
  BACKSTAB: getTearFlag(106),

  /**
   * This is a reserved flag and cannot be randomly picked.
   *
   * Fetuses whack their target with a sword and perform spin attacks.
   *
   * 1 << 107
   */
  FETUS_SWORD: getTearFlag(107),

  /**
   * This is a reserved flag and cannot be randomly picked.
   *
   * Fetuses whack their target with a bone club instead of ramming into them.
   *
   * 1 << 108
   */
  FETUS_BONE: getTearFlag(108),

  /**
   * This is a reserved flag and cannot be randomly picked.
   *
   * Fetuses carry a knife.
   *
   * 1 << 109
   */
  FETUS_KNIFE: getTearFlag(109),

  /**
   * This is a reserved flag and cannot be randomly picked.
   *
   * Fetuses have a Tech X ring around them.
   *
   * 1 << 110
   */
  FETUS_TECH_X: getTearFlag(110),

  /**
   * This is a reserved flag and cannot be randomly picked.
   *
   * Fetuses keep their distance and occasionally shoot tech lasers at their target.
   *
   * 1 << 111
   */
  FETUS_TECH: getTearFlag(111),

  /**
   * This is a reserved flag and cannot be randomly picked.
   *
   * Fetuses shoot a brimstone beam at the first enemy they hit.
   *
   * 1 << 112
   */
  FETUS_BRIMSTONE: getTearFlag(112),

  /**
   * This is a reserved flag and cannot be randomly picked.
   *
   * Fetuses drop a bomb on their first impact with an enemy.
   *
   * 1 << 113
   */
  FETUS_BOMBER: getTearFlag(113),

  /**
   * This is a reserved flag and cannot be randomly picked.
   *
   * The base flag for C-Section fetuses.
   *
   * 1 << 114
   */
  FETUS: getTearFlag(114),

  /**
   * This is a reserved flag and cannot be randomly picked.
   *
   * 1 << 115
   */
  REROLL_ROCK_WISP: getTearFlag(115),

  /**
   * This is a reserved flag and cannot be randomly picked.
   *
   * 1 << 116
   */
  MOM_STOMP_WISP: getTearFlag(116),

  /**
   * This is a reserved flag and cannot be randomly picked.
   *
   * 1 << 117
   */
  ENEMY_TO_WISP: getTearFlag(117),

  /**
   * Chance to reroll the enemy on hit. Used by D10 wisps.
   *
   * This is a reserved flag and cannot be randomly picked.
   *
   * 1 << 118
   */
  REROLL_ENEMY: getTearFlag(118),

  /**
   * Causes giant explosions that create pits. Used by Giga Bombs.
   *
   * This is a reserved flag and cannot be randomly picked.
   *
   * 1 << 119
   */
  GIGA_BOMB: getTearFlag(119),

  /**
   * Enemies explode into more gibs on death than normal. Used by Berserk!
   *
   * This is a reserved flag and cannot be randomly picked.
   *
   * 1 << 120
   */
  EXTRA_GORE: getTearFlag(120),

  /**
   * Lasers cycle between colors, causing a rainbow effect.
   *
   * This is a reserved flag and cannot be randomly picked.
   *
   * 1 << 121
   */
  RAINBOW: getTearFlag(121),

  /**
   * Bombs can be detonated by Remote Detonator.
   *
   * This is a reserved flag and cannot be randomly picked.
   *
   * 1 << 122
   */
  DETONATE: getTearFlag(122),

  /**
   * Tears stick to each other and form a chain that can be swung around. Used by Akeldama.
   *
   * This is a reserved flag and cannot be randomly picked.
   *
   * 1 << 123
   */
  CHAIN: getTearFlag(123),

  /**
   * Black aura effect. Used by Dark Matter.
   *
   * This is a reserved flag and cannot be randomly picked.
   *
   * 1 << 124
   */
  DARK_MATTER: getTearFlag(124),

  /**
   * Bombs dropped while having a Golden Bomb will have this flag.
   *
   * This is a reserved flag and cannot be randomly picked.
   *
   * 1 << 125
   */
  GOLDEN_BOMB: getTearFlag(125),

  /**
   * Bombs dropped while having Fast Bombs will have this flag.
   *
   * This is a reserved flag and cannot be randomly picked.
   *
   * 1 << 126
   */
  FAST_BOMB: getTearFlag(126),

  /**
   * A single tear controlled by the player with the shooting keys. Used by The Ludovico Technique.
   *
   * This is a reserved flag and cannot be randomly picked.
   *
   * 1 << 127
   */
  LUDOVICO: getTearFlag(127),
} as const;

type TearFlagValue = BitFlag128 & {
  readonly __tearFlagBrand: symbol;
};
type TearFlagType = {
  readonly [K in keyof typeof TearFlagInternal]: TearFlagValue;
};

export const TearFlag = TearFlagInternal as TearFlagType;
export type TearFlag = TearFlagType[keyof TearFlagType];

export const TearFlagZero = TearFlag.NORMAL;

/** Identical to the `TEARFLAG` function in "enums.lua". */
function getTearFlag(shift: int): BitSet128 {
  return shift >= 64
    ? BitSet128(0, 1 << (shift - 64))
    : BitSet128(1 << shift, 0);
}

----
enums\flags\UseFlag.ts
/**
 * This is represented as an object instead of an enum due to limitations with TypeScript enums. (We
 * want this type to be a child of the `BitFlag` type.)
 *
 * @enum
 * @notExported
 * @rename UseFlag
 */
const UseFlagInternal = {
  /**
   * Don't play use animations.
   *
   * 1 << 0 (1)
   */
  NO_ANIMATION: 1 << 0,

  /**
   * Don't add costume.
   *
   * 1 << 1 (2)
   */
  NO_COSTUME: 1 << 1,

  /**
   * Effect was triggered by an active item owned by the player.
   *
   * 1 << 2 (4)
   */
  OWNED: 1 << 2,

  /**
   * Allow the effect to trigger on non-main players (i.e. coop babies).
   *
   * 1 << 3 (8)
   */
  ALLOW_NON_MAIN_PLAYERS: 1 << 3,

  /**
   * D4 only: Reroll the player's active item.
   *
   * 1 << 4 (16)
   */
  REMOVE_ACTIVE: 1 << 4,

  /**
   * Effect was triggered a second time by Car Battery (or Tarot Cloth for cards).
   *
   * 1 << 5 (32)
   */
  CAR_BATTERY: 1 << 5,

  /**
   * Effect was triggered by Void.
   *
   * 1 << 6 (64)
   */
  VOID: 1 << 6,

  /**
   * Effect was mimicked by an active item (Blank Card, Placebo).
   *
   * 1 << 7 (128)
   */
  MIMIC: 1 << 7,

  /**
   * Never play announcer voice.
   *
   * 1 << 8 (256)
   */
  NO_ANNOUNCER_VOICE: 1 << 8,

  /**
   * This allows an item to spawn wisps when called from another item usage as the wisps generator
   * checks for `NO_ANIMATION`, so usually you want to use this with `NO_ANIMATION` call.
   *
   * 1 << 9 (512)
   */
  ALLOW_WISP_SPAWN: 1 << 9,

  /**
   * If set, forces UseActiveItem to use the CustomVarData argument instead of the active item's
   * stored VarData.
   *
   * 1 << 10 (1024)
   */
  CUSTOM_VARDATA: 1 << 10,

  /**
   * Don't display text in the HUD. (This is currently only used by Echo Chamber.)
   *
   * 1 << 11 (2048)
   */
  NO_HUD: 1 << 11,
} as const;

type UseFlagValue = BitFlag & {
  readonly __useFlagBrand: symbol;
};
type UseFlagType = {
  readonly [K in keyof typeof UseFlagInternal]: UseFlagValue;
};

export const UseFlag = UseFlagInternal as UseFlagType;
export type UseFlag = UseFlagType[keyof UseFlagType];

export const UseFlagZero = 0 as BitFlags<UseFlag>;

----
enums\mods\EncyclopediaItemPoolType.ts
export enum EncyclopediaItemPoolType {
  POOL_TREASURE = 1,
  POOL_SHOP = 2,
  POOL_BOSS = 3,
  POOL_DEVIL = 4,
  POOL_ANGEL = 5,
  POOL_SECRET = 6,
  POOL_ENCYCLOPEDIARARY = 7, // cspell:ignore POOL_ENCYCLOPEDIARARY
  POOL_SHELL_GAME = 8,
  POOL_GOLDEN_CHEST = 9,
  POOL_RED_CHEST = 10,
  POOL_BEGGAR = 11,
  POOL_DEMON_BEGGAR = 12,
  POOL_CURSE = 13,
  POOL_KEY_MASTER = 14,
  POOL_BATTERY_BUM = 15,
  POOL_MOMS_CHEST = 16,

  POOL_GREED_TREASURE = 17,
  POOL_GREED_BOSS = 18,
  POOL_GREED_SHOP = 19,
  POOL_GREED_DEVIL = 20,
  POOL_GREED_ANGEL = 21,
  POOL_GREED_CURSE = 22,
  POOL_GREED_SECRET = 23,

  POOL_CRANE_GAME = 24,
  POOL_ULTRA_SECRET = 25,
  POOL_BOMB_BUM = 26,
  POOL_PLANETARIUM = 27,
  POOL_OLD_CHEST = 28,
  POOL_BABY_SHOP = 29,
  POOL_WOODEN_CHEST = 30,
  POOL_ROTTEN_BEGGAR = 31,
}

----
enums\mods\ModConfigMenuOptionType.ts
export enum ModConfigMenuOptionType {
  TEXT = 1,
  SPACE = 2,
  SCROLL = 3,
  BOOLEAN = 4,
  NUMBER = 5,
  KEY_BIND_KEYBOARD = 6,
  KEY_BIND_CONTROLLER = 7,
  TITLE = 8,
}

----
enums\mods\StageAPIEnums.ts
// cspell:ignore STAGEAPI GRIDENTITY

export enum StageAPICallback {
  POST_CHANGE_ROOM_GFX = "POST_CHANGE_ROOM_GFX",

  /** Return false to invalidate a room layout; return integer to specify new weight. */
  POST_CHECK_VALID_ROOM = "POST_CHECK_VALID_ROOM",

  /**
   * Takes CustomDoorName as first callback parameter, and will only run if parameter not supplied
   * or matches current door.
   */
  POST_CUSTOM_DOOR_UPDATE = "POST_CUSTOM_DOOR_UPDATE",

  /**
   * Takes CustomGridTypeName as first callback parameter, and will only run if parameter not
   * supplied or matches current grid.
   */
  POST_CUSTOM_GRID_PROJECTILE_HELPER_UPDATE = "POST_CUSTOM_GRID_PROJECTILE_HELPER_UPDATE",

  /**
   * Takes CustomGridTypeName as first callback parameter, and will only run if parameter not
   * supplied or matches current grid.
   */
  POST_CUSTOM_GRID_PROJECTILE_UPDATE = "POST_CUSTOM_GRID_PROJECTILE_UPDATE",

  /**
   * Takes CustomGridTypeName as first callback parameter, and will only run if parameter not
   * supplied or matches current grid.
   */
  POST_CUSTOM_GRID_REMOVE = "POST_CUSTOM_GRID_REMOVE",

  /**
   * Takes CustomGridTypeName as first callback parameter, and will only run if parameter not
   * supplied or matches current grid.
   */
  POST_CUSTOM_GRID_UPDATE = "POST_CUSTOM_GRID_UPDATE",

  /**
   * Calls when the number of grids changes or grids are reprocessed. This is when room grid
   * graphics are changed.
   */
  POST_GRID_UPDATE = "POST_GRID_UPDATE",

  /**
   * Called when an overridden grid reaches its break state and is considered broken.
   *
   * @param justBrokenGridSpawns Contains all deleted spawns from the grid.
   *
   * Breaks on first non-undefined return.
   */
  POST_OVERRIDDEN_GRID_BREAK = "POST_OVERRIDDEN_GRID_BREAK",

  /**
   * Called when a room initializes. Can occur at two times, when a room is initially entered or
   * when a room is loaded from save data. Takes no return values.
   */
  POST_ROOM_INIT = "POST_ROOM_INIT",

  /** Called when a room is loaded. Takes no return value. */
  POST_ROOM_LOAD = "POST_ROOM_LOAD",

  /**
   * Takes CustomDoorName as first callback parameter, and will only run if parameter not supplied
   * or matches current door.
   */
  POST_SPAWN_CUSTOM_DOOR = "POST_SPAWN_CUSTOM_DOOR",

  /**
   * Takes CustomGridTypeName as first callback parameter, and will only run if parameter not
   * supplied or matches current grid.
   */
  POST_SPAWN_CUSTOM_GRID = "POST_SPAWN_CUSTOM_GRID",

  /**
   * All loading and processing of new room generation and old room loading is done, but the gfx has
   * not changed yet.
   */
  POST_STAGEAPI_NEW_ROOM = "POST_STAGEAPI_NEW_ROOM",

  /**
   * Allows returning justGenerated and currentRoom. Run after normal room generation but before
   * reloading old rooms.
   */
  POST_STAGEAPI_NEW_ROOM_GENERATION = "POST_STAGEAPI_NEW_ROOM_GENERATION",

  /** If a boss is returned, uses it instead. */
  PRE_BOSS_SELECT = "PRE_BOSS_SELECT",

  /** Allows returning room gfx to use in place of the stage's. */
  PRE_CHANGE_ROOM_GFX = "PRE_CHANGE_ROOM_GFX",

  /**
   * Takes 1 return value. If a table, uses it as the current room layout. Otherwise, chooses from
   * `roomsList` with seeded RNG. Breaks on first return.
   *
   * Called both on initial room load and when continuing game, before INIT.
   */
  PRE_ROOM_LAYOUT_CHOOSE = "PRE_ROOM_LAYOUT_CHOOSE",

  /**
   * - Takes 4 return values, AddEntities, EntityList, StillAddRandom, and NoBreak.
   * - If the first value is false, cancels selecting the list.
   * - AddEntities and EntityList are lists of EntityData tables, described below.
   * - Usually StageAPI will pick one entity from the EntityList to add to the AddEntities table at
   *   random, but that can be changed with this callback.
   * - If StillAddRandom is true, StageAPI will still add a random entity from the entityList to
   *   addEntities, alongside ones you returned.
   */
  PRE_SELECT_ENTITY_LIST = "PRE_SELECT_ENTITY_LIST",

  /**
   * Takes 1 return value. If false, cancels selecting the list. If GridData, selects it to spawn.
   * With no value, picks at random.
   */
  PRE_SELECT_GRIDENTITY_LIST = "PRE_SELECT_GRIDENTITY_LIST",

  /** Return a stage to go to instead of currentStage.NextStage or none. */
  PRE_SELECT_NEXT_STAGE = "PRE_SELECT_NEXT_STAGE",

  /**
   * Takes 1 return value. If false, cancels spawning the entity info. If a table, uses it as the
   * entity info. Any return value breaks out of future callbacks.
   */
  PRE_SPAWN_ENTITY = "PRE_SPAWN_ENTITY",

  /**
   * Takes 1 return value. If false, cancels spawning the entity list. If a table, uses it as the
   * entity list. Any return value breaks out of future callbacks. Every entity in the final entity
   * list is spawned. Note that this entity list contains EntityInfo tables rather than EntityData,
   * which contain persistent room-specific data. Both detailed below.
   */
  PRE_SPAWN_ENTITY_LIST = "PRE_SPAWN_ENTITY_LIST",

  /**
   * Takes 1 return value. If `false`, cancels spawning the grid. If a table, uses it as the grid
   * data.
   *
   * Any return value breaks out of future callbacks.
   */
  PRE_SPAWN_GRID = "PRE_SPAWN_GRID",

  /**
   * Runs before most but not all stageapi room functionality. Guaranteed to run before any room
   * loads.
   */
  PRE_STAGEAPI_NEW_ROOM = "PRE_STAGEAPI_NEW_ROOM",

  /**
   * Called before the custom room transition would render, for effects that should render before
   * it.
   */
  PRE_TRANSITION_RENDER = "PRE_TRANSITION_RENDER",

  /** Allows returning grid gfx to use in place of the stage's. */
  PRE_UPDATE_GRID_GFX = "PRE_UPDATE_GRID_GFX",
}

export enum StageAPILayoutButtonVariant {
  ROOM_CLEAR = 0,
  REWARD = 1,
  GREED = 2,
  KILL = 9,
  RAIL = 3,
}

export enum StageAPILayoutCornyPoopSubtype {
  NORMAL = 0,
  NON_REPLACEABLE = 1,
}

export enum StageAPILayoutGridType {
  ROCK = 1000,
  ROCK_ALT = 1002,
  ROCK_BOMB = 1001,
  ROCK_SPIKE = 1010,
  ROCK_GOLD = 1011,
  MARKED_SKULL = 1008,
  BLOCK_METAL = 1900,
  BLOCK_METAL_TALL = 1901,
  BLOCK_INVISIBLE = 1999,
  BLOCK_KEY = 4000,
  PIT = 3000,
  TNT = 1300,
  TNT_PUSHABLE = 292,
  SPIKES = 1930,
  SPIKES_ON_OFF = 1931,
  COBWEB = 1940,
  BUTTON = 4500,
  POOP = 1500,
  POOP_CORNY = 1495,
  POOP_RED = 1490,
  POOP_GOLD = 1496,
  POOP_RAINBOW = 1494,
  POOP_BLACK = 1497,
  POOP_HOLY = 1498,
  POOP_CHARMING = 1501,
  GRAVITY = 10_000,
  PITFALL = 291,
  PROP_A = 10,
  PROP_B = 20,
  PROP_C = 30,
}

export enum StageAPILayoutPitfallVariant {
  NORMAL = 0,
  SUCTION = 1,
  TELEPORT = 2,
}

export enum StageAPILayoutPoopSubtype {
  NORMAL = 0,
  NON_REPLACEABLE = 1,
}

export enum StageAPILayoutRockSubtype {
  NORMAL = 0,
  NON_REPLACEABLE = 1,
}

export enum StageAPILayoutSpikesOnOffVariant {
  NORMAL = 0,
  DOWN_1_FIFTH = 1,
  DOWN_2_FIFTHS = 2,
  DOWN_3_FIFTHS = 3,
  DOWN_4_FIFTHS = 4,
  DOWN_5_FIFTHS = 5,
  UP_1_FIFTH = 6,
  UP_2_FIFTHS = 7,
  UP_3_FIFTHS = 8,
  UP_4_FIFTHS = 9,
  UP_5_FIFTHS = 10,
}

export enum StageAPIPickupRandomGroupVariant {
  ANY = 0,
  NOT_CHEST_ITEM = 1,
  NOT_ITEM = 2,
  NOT_CHEST_ITEM_COIN = 3,
  NOT_CHEST_ITEM_TRINKET = 4,
}

----
index.ts
export * from "./enums/ActiveSlot";
export * from "./enums/BackdropType";
export * from "./enums/BrokenWatchState";
export * from "./enums/ButtonAction";
export * from "./enums/CallbackPriority";
export * from "./enums/Challenge";
export * from "./enums/ChampionColor";
export * from "./enums/CollectibleAnimation";
export * from "./enums/CollectiblePedestalType";
export * from "./enums/CollectibleSpriteLayer";
export * from "./enums/Controller";
export * from "./enums/ControllerIndex";
export * from "./enums/CopyableIsaacAPIClassType";
export * from "./enums/CurseID";
export * from "./enums/DebugCommand";
export * from "./enums/Difficulty";
export * from "./enums/Dimension";
export * from "./enums/Direction";
export * from "./enums/DoorSlot";
export * from "./enums/Ending";
export * from "./enums/EntityCollisionClass";
export * from "./enums/EntityGridCollisionClass";
export * from "./enums/EntityType";
export * from "./enums/FadeoutTarget";
export * from "./enums/GameStateFlag";
export * from "./enums/GridCollisionClass";
export * from "./enums/GridEntityType";
export * from "./enums/GridEntityXMLType";
export * from "./enums/GridPath";
export * from "./enums/GridRoom";
export * from "./enums/InputHook";
export * from "./enums/ItemConfigCardType";
export * from "./enums/ItemConfigChargeType";
export * from "./enums/ItemConfigPillEffectClass";
export * from "./enums/ItemConfigPillEffectType";
export * from "./enums/ItemPoolType";
export * from "./enums/ItemType";
export * from "./enums/Keyboard";
export * from "./enums/LanguageAbbreviation";
export * from "./enums/LaserOffset";
export * from "./enums/LevelStage";
export * from "./enums/LevelStateFlag";
export * from "./enums/LineCheckMode";
export * from "./enums/ModCallback";
export * from "./enums/ModCallbackRepentogon";
export * from "./enums/Mouse";
export * from "./enums/Music";
export * from "./enums/NPCID";
export * from "./enums/NPCState";
export * from "./enums/NullItemID";
export * from "./enums/PickupPrice";
export * from "./enums/PillEffect";
export * from "./enums/PlayerForm";
export * from "./enums/PlayerItemAnimation";
export * from "./enums/PlayerSpriteLayer";
export * from "./enums/PocketItemSlot";
export * from "./enums/PoopSpellType";
export * from "./enums/ProjectilesMode";
export * from "./enums/RenderMode";
export * from "./enums/RoomDescriptorDisplayType";
export * from "./enums/RoomDifficulty";
export * from "./enums/RoomShape";
export * from "./enums/RoomTransitionAnim";
export * from "./enums/RoomType";
export * from "./enums/SeedEffect";
export * from "./enums/SkinColor";
export * from "./enums/SortingLayer";
export * from "./enums/SoundEffect";
export * from "./enums/StageID";
export * from "./enums/StageTransition";
export * from "./enums/StageType";
export * from "./enums/TrinketSlot";
export * from "./enums/WeaponType";
export * from "./enums/collections/gridEntityStates";
export * from "./enums/collections/gridEntityVariants";
export * from "./enums/collections/npcStates";
export * from "./enums/collections/roomSubTypes";
export * from "./enums/collections/subTypes";
export * from "./enums/collections/variants";
export * from "./enums/flags/ActionTrigger";
export * from "./enums/flags/CacheFlag";
export * from "./enums/flags/DamageFlag";
export * from "./enums/flags/DisplayFlag";
export * from "./enums/flags/DoorSlotFlag";
export * from "./enums/flags/EntityFlag";
export * from "./enums/flags/EntityPartition";
export * from "./enums/flags/ItemConfigTag";
export * from "./enums/flags/LevelCurse";
export * from "./enums/flags/ProjectileFlag";
export * from "./enums/flags/RoomDescriptorFlag";
export * from "./enums/flags/TargetFlag";
export * from "./enums/flags/TearFlag";
export * from "./enums/flags/UseFlag";
export * from "./enums/mods/EncyclopediaItemPoolType";
export * from "./enums/mods/ModConfigMenuOptionType";
export * from "./enums/mods/StageAPIEnums";

----
types\classes\BitSet128.d.ts
import type { CopyableIsaacAPIClassType } from "../../enums/CopyableIsaacAPIClassType";

declare global {
  /**
   * A class used to represent a 128-bit number. This is used because Lua only has 64-bit numbers
   * and C++ uses 128-bit numbers for certain things.
   *
   * @param lowBits The 64-bit number that represents the lower half of the number.
   * @param highBits The 64-bit number that represents the upper half of the number.
   */
  function BitSet128(this: void, lowBits?: int, highBits?: int): BitSet128;

  interface BitSet128 extends IsaacAPIClass {
    /** The 64-bit number that represents the lower half of the number. */
    l: int;

    /** The 64-bit number that represents the upper half of the number. */
    h: int;

    /**
     * These methods are used to transpile:
     *
     * ```ts
     * tearFlags.bor(TearFlag.TEAR_SPECTRAL)
     * ```
     *
     * To:
     *
     * ```lua
     * tearFlags | TearFlag.TEAR_SPECTRAL
     * ```
     *
     * https://typescripttolua.github.io/docs/advanced/language-extensions/#operator-map-types
     */

    band: LuaBitwiseAndMethod<BitSet128, BitSet128>;
    bnot: LuaBitwiseNotMethod<BitSet128>;
    bor: LuaBitwiseOrMethod<BitSet128, BitSet128>;
    bshl: LuaBitwiseLeftShiftMethod<BitSet128, BitSet128>;
    bshr: LuaBitwiseRightShiftMethod<BitSet128, BitSet128>;

    /** An identifier that does not exist at run-time. */
    __kind: CopyableIsaacAPIClassType.BIT_SET_128;
  }
}

----
types\classes\CardConfigList.d.ts
declare interface CardConfigList extends IsaacAPIClass {
  /** @deprecated This method is bugged and returns useless `userdata`. */
  Get: (idx: int) => LuaUserdata;

  readonly Size: int;
}

----
types\classes\Color.d.ts
import type { CopyableIsaacAPIClassType } from "../../enums/CopyableIsaacAPIClassType";

declare global {
  /**
   * @param r Range is from 0-1.
   * @param g Range is from 0-1.
   * @param b Range is from 0-1.
   * @param a Default is 1. Range is from 0-1.
   * @param ro Default is 0. Range is from 0-1.
   * @param go Default is 0. Range is from 0-1.
   * @param bo Default is 0. Range is from 0-1.
   */
  function Color(
    this: void,
    r: float,
    g: float,
    b: float,
    a?: float,
    ro?: int,
    go?: int,
    bo?: int,
  ): Color;

  interface Color extends IsaacAPIClass {
    Reset: () => void;
    SetColorize: (red: float, green: float, blue: float, amount: float) => void;
    SetOffset: (
      redOffset: float,
      greenOffset: float,
      blueOffset: float,
    ) => void;
    SetTint: (
      redTint: float,
      greenTint: float,
      blueTint: float,
      alphaTint: float,
    ) => void;

    /** Range is from 0-1. */
    A: float;

    /** Range is from 0-1. */
    B: float;

    /** Range is from 0-1. */
    BO: float;

    /** Range is from 0-1. */
    G: float;

    /** Range is from 0-1. */
    GO: float;

    /** Range is from 0-1. */
    R: float;

    /** Range is from 0-1. */
    RO: float;

    /** An identifier that does not exist at run-time. */
    __kind: CopyableIsaacAPIClassType.COLOR;
  }

  /** @noSelf */
  namespace Color {
    function Lerp(m1: Color, m2: Color, t: float): Color;

    // The `Default` preset is not implemented, since it is unsafe. See the `ColorDefault` constant.
  }
}

----
types\classes\EffectList.d.ts
declare interface EffectList extends IsaacAPIClass {
  Get: (idx: int) => TemporaryEffect | undefined;

  Size: int;
}

----
types\classes\Entity.d.ts
import type { BossID } from "../../enums/collections/roomSubTypes";
import type { SlotVariant } from "../../enums/collections/variants";
import type { EntityCollisionClass } from "../../enums/EntityCollisionClass";
import type { EntityGridCollisionClass } from "../../enums/EntityGridCollisionClass";
import type { EntityType } from "../../enums/EntityType";
import type { DamageFlag } from "../../enums/flags/DamageFlag";
import type { EntityFlag } from "../../enums/flags/EntityFlag";
import type { SortingLayer } from "../../enums/SortingLayer";

declare global {
  interface Entity extends IsaacAPIClass {
    /**
     * Adds a burn effect to the entity.
     *
     * @param source Required. If you do not want the effect to have a source, pass
     *               `EntityRef(undefined)`.
     * @param duration The number of frames that the effect should apply for. The minimum is 2
     *                 frames.
     * @param damage The damage taken per tick. Each damage tick is 20 frames apart.
     */
    AddBurn: (source: EntityRef, duration: int, damage: float) => void;

    /**
     * Adds a charmed effect to the entity.
     *
     * @param source Required. If you do not want the effect to have a source, pass
     *               `EntityRef(undefined)`.
     * @param duration The number of frames that the effect should apply for. If set to -1, the
     *                 effect will be permanent and the entity will follow you to different rooms.
     */
    AddCharmed: (source: EntityRef, duration: int) => void;

    /**
     * Adds a confusion effect to the entity.
     *
     * @param source Required. If you do not want the effect to have a source, pass
     *               `EntityRef(undefined)`.
     * @param duration The number of frames that the effect should apply for. The maximum is 150.
     * @param ignoreBosses
     */
    AddConfusion: (
      source: EntityRef,
      duration: int,
      ignoreBosses: boolean,
    ) => void;

    /**
     * Adds one or more `EntityFlag` to the entity. Flags are used to add specific effects like
     * being friendly or being shrunk.
     */
    AddEntityFlags: (entityFlags: EntityFlag | BitFlags<EntityFlag>) => void;

    /**
     * Adds a fear effect to the entity.
     *
     * @param source Required. If you do not want the effect to have a source, pass
     *               `EntityRef(undefined)`.
     * @param duration The number of frames that the effect should apply for. The maximum is 150.
     */
    AddFear: (source: EntityRef, duration: int) => void;

    /**
     * Adds a freeze effect to the entity.
     *
     * @param source Required. If you do not want the effect to have a source, pass
     *               `EntityRef(undefined)`.
     * @param duration The number of frames that the effect should apply for. The maximum is 150.
     */
    AddFreeze: (source: EntityRef, duration: int) => void;

    /** Heals the entity. */
    AddHealth: (hitPoints: float) => void;

    /**
     * Turns the entity into a gold statue. Effectively, this means that they cannot move, cannot
     * attack, and drop coins when killed.
     *
     * @param source Required. If you do not want the effect to have a source, pass
     *               `EntityRef(undefined)`.
     * @param duration The number of frames that the effect should apply for. The maximum is 150.
     *                 (However, if a value higher than 150 is passed, the freeze will be reduced to
     *                 150 frames, but the gold color will persist for the full duration.)
     */
    AddMidasFreeze: (source: EntityRef, duration: int) => void;

    /**
     * Adds a poison effect to the entity.
     *
     * @param source Required. If you do not want the effect to have a source, pass
     *               `EntityRef(undefined)`.
     * @param duration The number of frames that the effect should apply for. The minimum is 2
     *                 frames. The maximum is 150.
     * @param damage The damage taken per tick. Each damage tick is 20 frames apart.
     */
    AddPoison: (source: EntityRef, duration: int, damage: float) => void;

    /**
     * Adds a shrink effect to the entity.
     *
     * @param source Required. If you do not want the effect to have a source, pass
     *               `EntityRef(undefined)`.
     * @param duration The number of frames that the effect should apply for.
     */
    AddShrink: (source: EntityRef, duration: int) => void;

    /**
     * Adds a slowing effect to the entity.
     *
     * @param source Required. If you do not want the effect to have a source, pass
     *               `EntityRef(undefined)`.
     * @param duration The number of frames that the effect should apply for.
     * @param slowValue This is the multiplier applied to the entity's movement speed. For example,
     *                  a value of 0.5 would slow down the entity by 50%.
     * @param slowColor
     */
    AddSlowing: (
      source: EntityRef,
      duration: int,
      slowValue: float,
      slowColor: Color,
    ) => void;

    AddVelocity: (velocity: Vector) => void;
    BloodExplode: () => void;

    // `CanShutDoors` is deliberately not implemented here because it conflicts with
    // `EntityNPC.CanShutDoors`.

    /** Removes one or more `EntityFlag` from the entity. */
    ClearEntityFlags: (entityFlags: EntityFlag | BitFlags<EntityFlag>) => void;

    /**
     * Returns true if the entity is currently colliding with a valid `GridEntity`, as dictated by
     * its `Entity.GridCollisionClass`.
     */
    CollidesWithGrid: () => boolean;

    Die: () => void;

    /**
     * Checks whether the entity is still spawned in the current room.
     *
     * This is mostly useful in situations where you are unwrapping an `EntityPtr` and the
     * corresponding entity may or may not have been killed in the interim period.
     */
    Exists: () => boolean;

    /**
     * Note that `BossID` is not equal to `EntityType`; see the `BossID` enum.
     *
     * Returns 0 if the entity is not a boss. It will also return 0 if this a custom boss without a
     * "bossID" attribute set in the "entities2.xml" file.
     */
    GetBossID: () => BossID | 0;

    GetColor: () => Readonly<Color>;

    /**
     * Returns a Lua table that contains mod-related data associated with the entity. Initially,
     * this will always be an empty table. Any values stored in the table by mods will persist until
     * the entity is despawned.
     *
     * Since this table can contain anything, the type is annotated as `Record<string, unknown>`. In
     * order to get type safety, you will want to probably want to use a type assertion on the data
     * to convert it to a more specific interface that represents your specific data.
     *
     * For more information, see the tutorial on the IsaacScript website:
     * https://isaacscript.github.io/main/using-get-data/
     */
    GetData: () => Record<string, unknown>;

    GetDropRNG: () => RNG;
    GetEntityFlags: () => EntityFlag | BitFlags<EntityFlag>;

    /**
     * Returns the last child of this entity. This is useful for certain segmented enemies so you
     * can go all the way to the bottom "tail" entity in one method call.
     */
    GetLastChild: () => Entity;

    /**
     * Returns the last parent of this entity. This is useful for certain segmented enemies so you
     * can go all the way to the top "head" entity in one method call.
     */
    GetLastParent: () => Entity;

    GetSprite: () => Sprite;
    HasCommonParentWithEntity: (other: Entity) => boolean;
    HasEntityFlags: (entityFlags: EntityFlag | BitFlags<EntityFlag>) => boolean;
    HasFullHealth: () => boolean;
    HasMortalDamage: () => boolean;

    /**
     * @deprecated Consider using the `isActiveEnemy` helper function from `isaacscript-common`
     *             instead, since it will correctly handle friendly entities, Grimaces, Ultra Greed,
     *             and Mother.
     */
    IsActiveEnemy: (includeDead: boolean) => boolean;

    IsBoss: () => boolean;
    IsDead: () => boolean;
    IsEnemy: () => boolean;
    IsFlying: () => boolean;
    IsFrame: (frame: int, offset: int) => boolean;
    IsInvincible: () => boolean;
    IsVisible: () => boolean;

    /** Returns true for enemies that can be damaged. */
    IsVulnerableEnemy: () => boolean;

    Kill: () => void;
    MultiplyFriction: (value: float) => void;
    PostRender: () => void;
    Remove: () => void;
    RemoveStatusEffects: () => void;
    Render: (offset: Vector) => void;
    RenderShadowLayer: (offset: Vector) => boolean;

    /**
     * @param color
     * @param duration
     * @param priority
     * @param fadeout Default value is false.
     * @param share Default value is false.
     */
    SetColor: (
      color: Color,
      duration: int,
      priority: int,
      fadeout?: boolean,
      share?: boolean,
    ) => void;

    SetSize: (
      size: float,
      sizeMulti: Vector,
      numGridCollisionPoints: int,
    ) => void;
    SetSpriteFrame: (animation: string, frameNum: int) => void;
    SetSpriteOverlayFrame: (animation: string, frameNum: int) => void;

    /**
     * The game adds taken damage to a damage buffer, which gets applied in the next frame.
     * Therefore, this method will not decrement the entity's HP immediately. Rather, it is only
     * updated on the next frame (even if `countdownFrames` is equal to 0).
     *
     * @param amount
     * @param damageFlags
     * @param source Required. If you do not want the effect to have a source, pass
     *               `EntityRef(undefined)`.
     * @param countdownFrames
     */
    TakeDamage: (
      amount: float,
      damageFlags: DamageFlag | BitFlags<DamageFlag>,
      source: EntityRef,
      countdownFrames: int,
    ) => boolean;

    /**
     * Casts an `Entity` into an `EntityBomb`, which has bomb-specific methods and properties. If
     * the associated entity is not a bomb, then this method will return undefined.
     */
    ToBomb: () => EntityBomb | undefined;

    /**
     * Casts an `Entity` into an `EntityEffect`, which has effect-specific methods and properties.
     * If the associated entity is not a effect, then this method will return undefined.
     */
    ToEffect: () => EntityEffect | undefined;

    /**
     * Casts an `Entity` into an `EntityFamiliar`, which has familiar-specific methods and
     * properties. If the associated entity is not a familiar, then this method will return
     * undefined.
     */
    ToFamiliar: () => EntityFamiliar | undefined;

    /**
     * Casts an `Entity` into an `EntityKnife`, which has knife-specific methods and properties. If
     * the associated entity is not a knife, then this method will return undefined.
     */
    ToKnife: () => EntityKnife | undefined;

    /**
     * Casts an `Entity` into an `EntityLaser`, which has laser-specific methods and properties. If
     * the associated entity is not a laser, then this method will return undefined.
     */
    ToLaser: () => EntityLaser | undefined;

    /**
     * Casts an `Entity` into an `EntityNPC`, which has NPC-specific methods and properties. If the
     * associated entity is not an NPC, then this method will return undefined.
     */
    ToNPC: () => EntityNPC | undefined;

    /**
     * Casts an `Entity` into an `EntityPickup`, which has pickup-specific methods and properties.
     * If the associated entity is not a pickup, then this method will return undefined.
     */
    ToPickup: () => EntityPickup | undefined;

    /**
     * Casts an `Entity` into an `EntityPlayer`, which has player-specific methods and properties.
     * If the associated entity is not a player, then this method will return undefined.
     */
    ToPlayer: () => EntityPlayer | undefined;

    /**
     * Casts an `Entity` into an `EntityProjectile`, which has projectile-specific methods and
     * properties. If the associated entity is not a projectile, then this method will return
     * undefined.
     */
    ToProjectile: () => EntityProjectile | undefined;

    /**
     * Casts an `Entity` into an `EntityTear`, which has tear-specific methods and properties. If
     * the associated entity is not a tear, then this method will return undefined.
     */
    ToTear: () => EntityTear | undefined;

    /**
     * Runs the post-update logic for the entity for a single frame, which will cause the associated
     * callback to fire. Mods usually never need to call this function, as it can cause bugs when
     * post-update logic is ran more than once a frame.
     */
    Update: () => void;

    Child?: Entity;
    CollisionDamage: float;

    // `Color` is deliberately not implemented in favor of `GetColor` and `SetColor`.

    DepthOffset: float;
    readonly DropSeed: Seed;
    EntityCollisionClass: EntityCollisionClass;
    FlipX: boolean;
    readonly FrameCount: int;
    Friction: float;
    GridCollisionClass: EntityGridCollisionClass;
    HitPoints: float;
    readonly Index: int;
    readonly InitSeed: Seed;
    Mass: float;
    MaxHitPoints: float;
    Parent?: Entity;
    Position: Vector;
    PositionOffset: Readonly<Vector>;
    RenderZOffset: int;
    Size: float;
    SizeMulti: Vector;
    SortingLayer: SortingLayer;

    /**
     * The room grid index where the entity spawned upon first entering the room.
     *
     * Entities that are spawned after the initial room generation will have a `SpawnGridIndex` of
     * -1.
     */
    readonly SpawnGridIndex: int;

    SpawnerEntity?: Entity;
    SpawnerType: EntityType;
    SpawnerVariant: int;

    /**
     * The color of the gibs when the entity dies.
     *
     * This field is read-only, so if you want to change it, you have to replace the entire thing
     * with a new `Color` object.
     */
    SplatColor: Readonly<Color>;

    SpriteOffset: Vector;
    SpriteRotation: float;

    /**
     * The multiplier for the size of the entity's sprite. This can be used to also scale the shadow
     * of the entity.
     *
     * For `EntityPlayer` specifically, this is a player "size" stat. Only change this in the
     * `EVALUATE_CACHE` callback corresponding to `CacheFlag.SIZE`.
     */
    SpriteScale: Vector;

    SubType: int;
    Target?: Entity;
    TargetPosition: Readonly<Vector>;
    readonly Type: EntityType;
    Variant: int;
    Velocity: Vector;
    Visible: boolean;
  }

  /** For `EntityType.SLOT` (6). */
  interface EntitySlot extends Entity {
    Type: EntityType.SLOT;
    Variant: SlotVariant;
  }
}

----
types\classes\EntityBomb.d.ts
import type { BombVariant } from "../../enums/collections/variants";
import type { TearFlag } from "../../enums/flags/TearFlag";

declare global {
  interface EntityBomb extends Entity {
    AddTearFlags: (flags: TearFlag | BitFlags<TearFlag>) => void;
    ClearTearFlags: (flags: TearFlag | BitFlags<TearFlag>) => void;
    HasTearFlags: (flags: TearFlag | BitFlags<TearFlag>) => boolean;

    SetExplosionCountdown: (countdown: int) => void;

    ExplosionDamage: float;

    /** There is no separate `BombFlag` enum, so bombs use `TearFlag`. */
    Flags: BitFlags<TearFlag>;

    IsFetus: boolean;
    RadiusMultiplier: float;
    Variant: BombVariant;
  }
}

----
types\classes\EntityEffect.d.ts
import type { EffectVariant } from "../../enums/collections/variants";
import type { EntityType } from "../../enums/EntityType";

declare global {
  interface EntityEffect extends Entity {
    FollowParent: (parent: Entity) => void;
    SetDamageSource: (entityType: EntityType) => void;
    SetRadii: (min: float, max: float) => void;
    SetTimeout: (timeout: int) => void;

    DamageSource: EntityType;
    FallingAcceleration: float;
    FallingSpeed: float;
    IsFollowing: boolean;
    LifeSpan: int;
    MaxRadius: float;
    MinRadius: float;
    ParentOffset: Vector;
    Rotation: float;
    Scale: float;
    State: int;
    Timeout: int;
    Variant: EffectVariant;
    m_Height: float;
  }

  /** @noSelf */
  namespace EntityEffect {
    function IsPlayerCreep(variant: int): boolean;
  }
}

----
types\classes\EntityFamiliar.d.ts
import type { FamiliarVariant } from "../../enums/collections/variants";
import type { Direction } from "../../enums/Direction";
import type { TargetFlag } from "../../enums/flags/TargetFlag";

declare global {
  interface EntityFamiliar extends Entity {
    AddCoins: (value: int) => void;
    AddHearts: (hearts: int) => void;
    AddKeys: (keys: int) => void;
    AddToDelayed: () => void;
    AddToFollowers: () => void;
    AddToOrbit: (layer: int) => void;
    FireProjectile: (direction: Vector) => EntityTear;
    FollowParent: () => void;
    FollowPosition: (position: Vector) => void;
    GetOrbitPosition: (position: Vector) => Vector;
    IsDelayed: () => boolean;
    IsFollower: () => boolean;
    MoveDelayed: (numFrames: int) => void;
    MoveDiagonally: (speed: float) => void;

    /**
     * @param maxDistance
     * @param frameInterval Default is 13.
     * @param flags Default is 0. See the `TargetFlag` enum for more information.
     * @param coneDir Default is `Vector(0, 0)`. If not equal to a zero vector, the function will
     *                search for targets in a cone pointing in this direction.
     * @param coneAngle Default is 15. If `coneDir` is not a zero vector, the function will set the
     *                  half angle of the search cone in degrees. (For example, 45 results in a
     *                  search angle of 90 degrees.)
     */
    PickEnemyTarget: (
      maxDistance: float,
      frameInterval?: int,
      flags?: TargetFlag | BitFlags<TargetFlag>,
      coneDir?: Vector,
      coneAngle?: float,
    ) => void;

    PlayChargeAnim: (direction: Direction) => void;
    PlayFloatAnim: (direction: Direction) => void;
    PlayShootAnim: (direction: Direction) => void;
    RecalculateOrbitOffset: (layer: int, add: boolean) => int;
    RemoveFromDelayed: () => void;
    RemoveFromFollowers: () => void;
    RemoveFromOrbit: () => void;
    Shoot: () => void;

    Coins: int;
    FireCooldown: int;
    HeadFrameDelay: int;
    Hearts: int;
    Keys: int;
    LastDirection: Direction;
    MoveDirection: Direction;
    OrbitAngleOffset: float;
    OrbitDistance: Vector;

    /** -1 by default. Has values >= 0 for familiars that are orbitals. */
    OrbitLayer: int;

    OrbitSpeed: float;

    /**
     * This is the player object that "owns" this familiar. All familiars are associated with an
     * `EntityPlayer`. If the `Player` attribute is set to undefined, the game will crash.
     */
    Player: EntityPlayer;

    RoomClearCount: int;
    ShootDirection: Direction;
    State: int;
    Variant: FamiliarVariant;
  }

  /** @noSelf */
  namespace EntityFamiliar {
    function GetOrbitDistance(layer: int): Vector;
  }
}

----
types\classes\EntityKnife.d.ts
import type { KnifeVariant } from "../../enums/collections/variants";
import type { TearFlag } from "../../enums/flags/TearFlag";

declare global {
  interface EntityKnife extends Entity {
    AddTearFlags: (flags: TearFlag | BitFlags<TearFlag>) => void;
    ClearTearFlags: (flags: TearFlag | BitFlags<TearFlag>) => void;
    GetKnifeDistance: () => float;
    GetKnifeVelocity: () => float;
    GetRenderZ: () => int;
    HasTearFlags: (flags: TearFlag | BitFlags<TearFlag>) => boolean;
    IsFlying: () => boolean;
    Reset: () => void;
    SetPathFollowSpeed: (speed: float) => void;
    Shoot: (charge: float, range: float) => void;

    Charge: float;
    MaxDistance: float;
    PathFollowSpeed: float;
    PathOffset: float;
    Rotation: float;
    RotationOffset: float;
    Scale: float;
    TearFlags: BitFlags<TearFlag>;
    Variant: KnifeVariant;
  }
}

----
types\classes\EntityLaser.d.ts
import type { LaserVariant } from "../../enums/collections/variants";
import type { TearFlag } from "../../enums/flags/TearFlag";

declare global {
  interface EntityLaser extends Entity {
    AddTearFlags: (flags: TearFlag | BitFlags<TearFlag>) => void;
    ClearTearFlags: (flags: TearFlag | BitFlags<TearFlag>) => void;
    GetEndPoint: () => Readonly<Vector>;

    // GetNonOptimizedSamples is not implemented.

    GetRenderZ: () => int;

    // GetSamples is not implemented.

    HasTearFlags: (flags: TearFlag | BitFlags<TearFlag>) => boolean;
    IsCircleLaser: () => boolean;
    IsSampleLaser: () => boolean;

    SetActiveRotation: (
      delay: int,
      angleDegrees: float,
      rotationSpeed: float,
      timeoutComplete: boolean,
    ) => void;

    SetBlackHpDropChance: (chance: float) => void;

    // SetHomingType is not implemented.

    SetMaxDistance: (distance: float) => void;
    SetMultidimensionalTouched: (value: boolean) => void;
    SetOneHit: (value: boolean) => void;
    SetTimeout: (value: int) => void;

    Angle: float;
    AngleDegrees: float;
    BlackHpDropChance: float;
    BounceLaser: Entity;
    CurveStrength: float;
    DisableFollowParent: boolean;
    EndPoint: Vector;
    FirstUpdate: boolean;
    GridHit: boolean;

    // HomingLaser is not implemented.

    // HomingType is not implemented.

    IsActiveRotating: boolean;
    LaserLength: float;
    LastAngleDegrees: float;
    MaxDistance: float;
    OneHit: boolean;
    ParentOffset: Vector;
    Radius: float;
    RotationDegrees: float;
    RotationDelay: int;
    RotationSpd: float;

    // SampleLaser is not implemented; use `EntityLaser.IsSampleLaser` instead.

    Shrink: boolean;
    StartAngleDegrees: float;
    TearFlags: BitFlags<TearFlag>;
    Timeout: int;
    Variant: LaserVariant;
  }

  /** @noSelf */
  namespace EntityLaser {
    function CalculateEndPoint(
      start: Vector,
      dir: Vector,
      positionOffset: Vector,
      parent: Entity,
      margin: float,
    ): Vector;

    function ShootAngle(
      variant: LaserVariant,
      sourcePos: Vector,
      angleDegrees: float,
      timeout: int,
      posOffset: Vector,
      source: Entity,
    ): EntityLaser;
  }
}

----
types\classes\EntityList.d.ts
declare interface EntityList extends IsaacAPIClass {
  Get: (idx: int) => Entity | undefined;

  readonly Size: int;
}

----
types\classes\EntityNPC.d.ts
import type { ChampionColor } from "../../enums/ChampionColor";
import type { EntityType } from "../../enums/EntityType";
import type { NPCState } from "../../enums/NPCState";
import type { ProjectilesMode } from "../../enums/ProjectilesMode";
import type { SoundEffect } from "../../enums/SoundEffect";

declare global {
  interface EntityNPC extends Entity {
    AnimWalkFrame: (
      horizontalAnim: string,
      verticalAnim: string,
      speedThreshold: float,
    ) => void;

    CalcTargetPosition: (distanceLimit: float) => Vector;
    CanBeDamagedFromVelocity: (velocity: Vector) => boolean;
    CanReroll: () => boolean;

    FireBossProjectiles: (
      numProjectiles: int,
      targetPos: Vector,
      trajectoryModifier: float,
      projectileParams: ProjectileParams,
    ) => EntityProjectile;

    FireProjectiles: (
      position: Vector,
      velocity: Vector,
      projectilesMode: ProjectilesMode,
      projectileParams: ProjectileParams,
    ) => void;

    GetAliveEnemyCount: () => int;
    GetBossColorIdx: () => int;
    GetChampionColorIdx: () => ChampionColor;
    GetPlayerTarget: () => Entity;
    IsBoss: () => boolean;
    IsChampion: () => boolean;
    KillUnique: () => void;

    /**
     * @param seed
     * @param championColor The type of champion to turn this enemy into. (-1 results in a random
     *                      champion type.) Default is -1.
     * @param init Set to true when called while initializing the enemy, false otherwise. Default is
     *             false.
     */
    MakeChampion: (
      seed: Seed,
      championColorIdx?: ChampionColor,
      init?: boolean,
    ) => void;

    MakeSplat: (size: float) => EntityEffect;

    /**
     * Change the NPC into another one.
     *
     * @param entityType
     * @param variant
     * @param subType
     * @param championColorIdx Pass -1 to morph into a non-champion.
     */
    Morph: (
      entityType: EntityType,
      variant: int,
      subType: int,
      championColorIdx: ChampionColor | -1,
    ) => boolean;

    PlaySound: (
      soundEffect: SoundEffect,
      volume: float,
      frameDelay: int,
      loop: boolean,
      pitch: float,
    ) => void;

    QueryNPCsGroup: (groupIdx: int) => EntityList;

    QueryNPCsSpawnerType: (
      spawnerType: EntityType,
      entityType: EntityType,
      onlyEnemies: boolean,
    ) => EntityList;

    QueryNPCsType: (entityType: EntityNPC, variant: int) => EntityList;
    ResetPathFinderTarget: () => void;

    /**
     * The `EntityNPC.CanShutDoors` field conflicts with the `Entity.CanShutDoors` method, but the
     * latter is deliberately not implemented so that we can utilize this field.
     */
    CanShutDoors: boolean;

    readonly ChildNPC: Readonly<EntityNPC>;
    EntityRef: Entity;
    GroupIdx: int;
    I1: int;
    I2: int;
    readonly ParentNPC: Readonly<EntityNPC>;
    Pathfinder: PathFinder;
    ProjectileCooldown: int;
    ProjectileDelay: int;
    Scale: float;
    State: NPCState;

    StateFrame: int;
    V1: Vector;
    V2: Vector;
  }

  /** @noSelf */
  namespace EntityNPC {
    /**
     * Helper function to spawn an enemy spider. Use this in situations where you want the spider to
     * "jump" out of something.
     *
     * This method returns a read-only version of the `EntityNPC` class. If you need to mutate the
     * properties of the spider, then you can spawn it with `Isaac.Spawn` or `Game.Spawn` instead.
     * Alternatively, you can re-acquire the entity after it has already been spawned.
     *
     * @param position
     * @param spawner
     * @param targetPos
     * @param big If false, will spawn `EntityType.SPIDER` (85). If true, will spawn
     *            `EntityType.BIG_SPIDER` (94).
     * @param yOffset
     */
    function ThrowSpider(
      position: Vector,
      spawner: Entity | undefined,
      targetPos: Vector,
      big: boolean,
      yOffset: float,
    ): Readonly<EntityNPC>;
  }
}

----
types\classes\EntityPickup.d.ts
import type {
  BatterySubType,
  BombSubType,
  CardType,
  CoinSubType,
  CollectibleType,
  HeartSubType,
  KeySubType,
  PickupNullSubType,
  PillColor,
  PoopPickupSubType,
  SackSubType,
  TrinketType,
} from "../../enums/collections/subTypes";
import type { PickupVariant } from "../../enums/collections/variants";
import type { EntityType } from "../../enums/EntityType";

declare global {
  interface EntityPickup extends Entity {
    AppearFast: () => void;
    CanReroll: () => boolean;
    GetCoinValue: () => int;
    IsShopItem: () => boolean;

    /**
     * @param entityType
     * @param variant
     * @param subType
     * @param keepPrice Default is false.
     * @param keepSeed If set to true, keeps the initial RNG seed of the pickup instead of rerolling
     *                 it. Default is false.
     * @param ignoreModifiers If set to true, ignores item effects that might turn this pickup into
     *                        something other than the specified variant and subtype. Default is
     *                        false.
     */
    Morph: (
      entityType: EntityType,
      variant: int,
      subType: int,
      keepPrice?: boolean,
      keepSeed?: boolean,
      ignoreModifiers?: boolean,
    ) => void;

    PlayDropSound: () => void;
    PlayPickupSound: () => void;

    /** @param player Default is undefined. */
    TryOpenChest: (player?: EntityPlayer) => boolean;

    AutoUpdatePrice: boolean;
    Charge: int;

    /**
     * Any non-zero value causes the item to form an option group with any other item with the same
     * OptionsPickupIndex value.
     *
     * When an item belonging to an option group is picked up, all other items belonging to the same
     * group disappear.
     *
     * 0 is the default value and means the item doesn't belong to any group.
     */
    OptionsPickupIndex: int;

    /**
     * The price can be from 0 to 99 or a special negative value. Special kinds of prices (like
     * Devil Deal prices) are represented by the `PickupPrice` enum (which contain negative values).
     */
    Price: int;

    /**
     * If in a shop, this value describes which slot the item is for sale in. For example, if the
     * shop has 6 things for sale, the pickups in the room will have shop item IDs of 0, 1, 2, 3, 4,
     * and 5.
     *
     * When spawning a new collectible item, `ShopItemId` will be 0 by default. This has a side
     * effect of making the D6 roll the collectible into a red heart. By setting shop item id to -1,
     * it will fix this behavior such that the collectible will properly roll into another
     * collectible. However, non-collectible pickups may reroll into collectibles through a D20 or
     * similar.
     *
     * By setting shop item id to -2, automatic prices will be devil deal prices. Otherwise this is
     * identical to -1.
     *
     * Other negative values act identically to -1.
     */
    ShopItemId: int;

    State: int;
    Timeout: int;
    Touched: boolean;
    Variant: PickupVariant;

    /**
     * Used with collectibles to enforce a period of time where the player will not automatically
     * pick up the collectible. New collectibles spawn with a `Wait` value of 20 (which corresponds
     * to 20 game frames). The value will automatically decrement as game frames pass.
     *
     * It is unknown whether this value is used for pickups other than collectibles.
     */
    Wait: int;
  }

  /** For `PickupVariant.NULL` (0). */
  interface EntityPickupNull extends EntityPickup {
    SubType: PickupNullSubType;
    Variant: PickupVariant.NULL;
  }

  /** For `PickupVariant.HEART` (10). */
  interface EntityPickupHeart extends EntityPickup {
    SubType: HeartSubType;
    Variant: PickupVariant.HEART;
  }

  /** For `PickupVariant.COIN` (20). */
  interface EntityPickupCoin extends EntityPickup {
    SubType: CoinSubType;
    Variant: PickupVariant.COIN;
  }

  /** For `PickupVariant.KEY` (30). */
  interface EntityPickupKey extends EntityPickup {
    SubType: KeySubType;
    Variant: PickupVariant.KEY;
  }

  /** For `PickupVariant.BOMB` (40). */
  interface EntityPickupBomb extends EntityPickup {
    SubType: BombSubType;
    Variant: PickupVariant.BOMB;
  }

  /** For `PickupVariant.POOP` (42). */
  interface EntityPickupPoop extends EntityPickup {
    SubType: PoopPickupSubType;
    Variant: PickupVariant.POOP;
  }

  /** For `PickupVariant.SACK` (69). */
  interface EntityPickupSack extends EntityPickup {
    SubType: SackSubType;
    Variant: PickupVariant.SACK;
  }

  /** For `PickupVariant.PILL` (70). */
  interface EntityPickupPill extends EntityPickup {
    SubType: PillColor;
    Variant: PickupVariant.PILL;
  }

  /** For `PickupVariant.LIL_BATTERY` (90). */
  interface EntityPickupBattery extends EntityPickup {
    SubType: BatterySubType;
    Variant: PickupVariant.LIL_BATTERY;
  }

  /** For `PickupVariant.COLLECTIBLE` (100). */
  interface EntityPickupCollectible extends EntityPickup {
    SubType: CollectibleType;
    Variant: PickupVariant.COLLECTIBLE;
  }

  /** For `PickupVariant.CARD` (300). */
  interface EntityPickupCard extends EntityPickup {
    SubType: CardType;
    Variant: PickupVariant.CARD;
  }

  /** For `PickupVariant.TRINKET` (350). */
  interface EntityPickupTrinket extends EntityPickup {
    SubType: TrinketType;
    Variant: PickupVariant.TRINKET;
  }
}

----
types\classes\EntityPlayer.d.ts
import type { ActiveSlot } from "../../enums/ActiveSlot";
import type { CollectibleAnimation } from "../../enums/CollectibleAnimation";
import type {
  BabySubType,
  CardType,
  CollectibleType,
  DipFamiliarSubType,
  PillColor,
  PlayerType,
  TrinketType,
} from "../../enums/collections/subTypes";
import type {
  BombVariant,
  FamiliarVariant,
  PlayerVariant,
} from "../../enums/collections/variants";
import type { ControllerIndex } from "../../enums/ControllerIndex";
import type { Direction } from "../../enums/Direction";
import type { CacheFlag } from "../../enums/flags/CacheFlag";
import type { DamageFlag } from "../../enums/flags/DamageFlag";
import type { TearFlag } from "../../enums/flags/TearFlag";
import type { UseFlag } from "../../enums/flags/UseFlag";
import type { LaserOffset } from "../../enums/LaserOffset";
import type { NullItemID } from "../../enums/NullItemID";
import type { PillEffect } from "../../enums/PillEffect";
import type { PlayerForm } from "../../enums/PlayerForm";
import type { PlayerItemAnimation } from "../../enums/PlayerItemAnimation";
import type { PocketItemSlot } from "../../enums/PocketItemSlot";
import type { PoopSpellType } from "../../enums/PoopSpellType";
import type { SkinColor } from "../../enums/SkinColor";
import type { TrinketSlot } from "../../enums/TrinketSlot";
import type { WeaponType } from "../../enums/WeaponType";

declare global {
  interface EntityPlayer extends Entity {
    /** 1 unit is half a heart. Remove them with negative numbers. */
    AddBlackHearts: (blackHearts: int) => void;

    /** Adds Tainted Bethany's blood charges. Only works on Tainted Bethany. */
    AddBloodCharge: (num: int) => void;

    /**
     * @param amount
     * @param position
     * @param target This argument is not optional. If you want to spawn a fly without a target,
     *               then you must explicitly pass undefined.
     */
    AddBlueFlies: (
      amount: int,
      position: Vector,
      target: Entity | undefined,
    ) => Entity;

    AddBlueSpider: (position: Vector) => Entity;

    /** Remove them with negative numbers. */
    AddBombs: (amount: int) => void;

    /** Remove them with negative numbers. */
    AddBoneHearts: (hearts: int) => void;

    /** Remove them with negative numbers. */
    AddBrokenHearts: (hearts: int) => void;

    /**
     * Used to specify the kinds of stats that should be evaluated the next time the
     * `EntityPlayer.EvaluateCache` method is run.
     */
    AddCacheFlags: (cacheFlags: CacheFlag | BitFlags<CacheFlag>) => void;

    AddCard: (cardType: CardType) => void;

    /** Remove them with negative numbers. */
    AddCoins: (amount: int) => void;

    /**
     * Note that adding a collectible to `ActiveSlot.POCKET` or `ActiveSlot.POCKET_SINGLE_USE` will
     * not work properly. For those cases, use `EntityPlayer.SetPocketActiveItem` instead.
     *
     * @param collectibleType
     * @param charge Default is 0.
     * @param firstTimePickingUp Setting this to false will not spawn or add consumables for the
     *                           item and will not cause it to count towards transformations.
     *                           Default is true.
     * @param activeSlot Sets the active slot this collectible should be added to. Default is
     *                   `ActiveSlot.SLOT_PRIMARY`.
     * @param varData Sets the variable data for this collectible (this is used to store extra data
     *                for some active items like the number of uses for Jar of Wisps). Default is 0.
     */
    AddCollectible: (
      collectibleType: CollectibleType,
      charge?: int,
      firstTimePickingUp?: boolean,
      activeSlot?: ActiveSlot.PRIMARY | ActiveSlot.SECONDARY,
      varData?: int,
    ) => void;

    AddControlsCooldown: (cooldown: int) => void;
    AddCostume: (
      itemConfigItem: ItemConfigItem,
      itemStateOnly: boolean,
    ) => void;

    /**
     * Disables all item effects, similar to what happens in the abandoned mineshaft in Mines II.
     * This also temporarily removes consumables and pocket items.
     */
    AddCurseMistEffect: () => void;

    AddDeadEyeCharge: () => void;
    AddDollarBillEffect: () => void;

    /** Remove them with negative numbers. */
    AddEternalHearts: (eternalHearts: int) => void;

    /** Spawns a friendly dip from Dirty Mind. */
    AddFriendlyDip: (
      subType: DipFamiliarSubType,
      position: Vector,
    ) => EntityFamiliar;

    /**
     * Turns the given number of bombs into giga bombs.
     *
     * This does not actually increase the number of bombs held. To actually add bombs, the
     * `EntityPlayer.AddBombs` method should be called first.
     *
     * @param num
     */
    AddGigaBombs: (num: int) => void;

    /** Remove them with negative numbers. */
    AddGoldenBomb: () => void;

    AddGoldenHearts: (hearts: int) => void;
    AddGoldenKey: () => void;

    /**
     * Adds red hearts to the player if there are any empty heart containers. 1 unit is half a
     * heart. Remove health with negative numbers.
     */
    AddHearts: (hearts: int) => void;

    /**
     * Spawns a Lemegeton wisp.
     *
     * @param subType The ID of the passive item to mimic.
     * @param position
     * @param adjustOrbitLayer Default is false.
     */
    AddItemWisp: (
      subType: int,
      position: Vector,
      adjustOrbitLayer?: boolean,
    ) => EntityFamiliar;

    AddJarFlies: (flies: int) => void;
    AddJarHearts: (hearts: int) => void;

    /** Remove them with negative numbers. */
    AddKeys: (amount: int) => void;

    /**
     * Adds heart containers to the player. 2 units is a full heart container.
     *
     * Remove them with negative numbers.
     */
    AddMaxHearts: (maxHearts: int, ignoreKeeper: boolean) => void;

    /**
     * Spawns a mini Isaac from Giant Cell.
     *
     * @param position
     * @param playAnim If false, skips the appear animation for the familiars.
     */
    AddMinisaac: (position: Vector, playAnim?: boolean) => EntityFamiliar;

    AddNullCostume: (nullItemID: NullItemID) => void;
    AddPill: (pillColor: PillColor) => void;
    AddPlayerFormCostume: (playerForm: PlayerForm) => void;

    /** Adds (or removes) poop consumables from the player. */
    AddPoopMana: (num: int) => void;

    AddPrettyFly: () => void;

    /**
     * Remove them with negative numbers.
     *
     * Note that this method is not actually equivalent to picking up a rotten heart, since it will
     * only grant one rotten heart to Tainted Magdalene (whereas picking up a rotten heart would
     * grant two).
     *
     * @param hearts Rotten hearts must be specified in a multiple of 2. For example,
     *               `AddRottenHearts(4)` will add 2 rotten hearts.
     */
    AddRottenHearts: (hearts: int) => void;

    /** Adds Bethany's soul heart charges. Only works on Bethany. */
    AddSoulCharge: (num: int) => void;

    /** 1 unit is half a heart. Remove them with negative numbers. */
    AddSoulHearts: (soulHearts: int) => void;

    /** Spawns a defensive fly from The Swarm. */
    AddSwarmFlyOrbital: (position: Vector) => EntityFamiliar;

    /**
     * - If the player does not have any open trinket slots, this function will do nothing.
     * - If the player has an open trinket slot but already has a trinket, the new trinket will go
     *   to the first slot and the existing trinket will get pushed back to the second slot.
     * - If you provide an argument of 0 or an otherwise invalid trinket ID, the game will crash.
     *
     * @param trinketType
     * @param firstTimePickingUp Setting this to false will not spawn or add pickups for the item
     *                           and will not cause it to count towards transformations. Default is
     *                           true.
     */
    AddTrinket: (
      trinketType: TrinketType,
      firstTimePickingUp?: boolean,
    ) => void;

    /**
     * Spawns a Book of Virtues wisp.
     *
     * @param subType The ID of the active item to spawn a wisp from. Wisps with a special ID (for
     *                example "s0" in wisps.xml) can be spawned with the subtype 65536 + X where X
     *                is the number after the "s".
     * @param position
     * @param adjustOrbitLayer If true, allows wisps to spawn outside of their usual orbit if their
     *                         assigned orbit is full. Default is false.
     * @param dontUpdate If true, the spawned wisp will not update immediately. This allows certain
     *                   properties to be set on the first frame before the wisp is fully
     *                   initialized. Default is false.
     */
    AddWisp: (
      subType: int,
      position: Vector,
      adjustOrbitLayer?: boolean,
      dontUpdate?: boolean,
    ) => EntityFamiliar;

    /**
     * Play the animation that is normally played at the beginning of a stage (where Isaac is laying
     * down).
     */
    AnimateAppear: () => void;

    /**
     * @param cardType
     * @param playerItemAnimation Default is "Pickup".
     */
    AnimateCard: (
      cardType: CardType,
      playerItemAnimation?: PlayerItemAnimation,
    ) => void;

    /**
     * @param collectibleType
     * @param playerItemAnimation Default is "Pickup".
     * @param collectibleAnimation Default is "PlayerPickupSparkle".
     */
    AnimateCollectible: (
      collectibleType: CollectibleType,
      playerItemAnimation?: PlayerItemAnimation,
      collectibleAnimation?: CollectibleAnimation,
    ) => void;

    /** Plays the "thumbs up" animation. Also plays `SoundEffect.THUMBS_UP`. */
    AnimateHappy: () => void;

    /** Play the animation where Isaac steps into a beam of light (e.g. at the end of Womb 2). */
    AnimateLightTravel: () => void;

    /**
     * Plays a pickup animation using any supplied Sprite object.
     *
     * @param sprite
     * @param hideShadow Default is false. This should be usually set to true when rendering a
     *                   sprite with a custom shadow layer.
     * @param animation Default is "Pickup".
     */
    AnimatePickup: (
      sprite: Sprite,
      hideShadow?: boolean,
      animation?: string,
    ) => void;

    /**
     * @param pillColor
     * @param playerItemAnimation Default is "Pickup".
     */
    AnimatePill: (
      pillColor: PillColor,
      playerItemAnimation?: PlayerItemAnimation,
    ) => void;

    AnimatePitfallIn: () => void;
    AnimatePitfallOut: () => void;

    /**
     * Play the animation where Isaac holds his head in his hands. Also plays
     * `SoundEffect.SOUND_THUMBS_DOWN`.
     */
    AnimateSad: () => void;

    AnimateTeleport: (up: boolean) => void;
    AnimateTrapdoor: () => void;

    /**
     * @param trinketType
     * @param playerItemAnimation Default is "Pickup".
     * @param spriteAnimation Default is "PlayerPickupSparkle".
     */
    AnimateTrinket: (
      trinketType: TrinketType,
      playerItemAnimation?: PlayerItemAnimation,
      spriteAnimation?: string,
    ) => void;

    AreControlsEnabled: () => boolean;
    AreOpposingShootDirectionsPressed: () => boolean;

    /** @param collectibleType Default is `CollectibleType.NULL`. */
    CanAddCollectible: (collectibleType?: CollectibleType) => boolean;

    /** Returns true if the player can pick up black hearts, false otherwise. */
    CanPickBlackHearts: () => boolean;

    /** Returns true if the player can pick up bone hearts, false otherwise. */
    CanPickBoneHearts: () => boolean;

    /** Returns true if the player can pick up golden hearts, false otherwise. */
    CanPickGoldenHearts: () => boolean;

    /** Returns true if the player can pick up red hearts, false otherwise. */
    CanPickRedHearts: () => boolean;

    /** Returns true if the player can pick up rotten hearts, false otherwise. */
    CanPickRottenHearts: () => boolean;

    /** Returns true if the player can pick up soul hearts, false otherwise. */
    CanPickSoulHearts: () => boolean;

    CanPickupItem: () => boolean;
    CanShoot: () => boolean;

    /**
     * When the player presses the different shoot buttons, Isaac will normally turn his head to
     * face the direction that he is supposed to shoot in. This returns true if head will react to
     * shooting, false otherwise.
     */
    CanTurnHead: () => boolean;

    /**
     * Changes the current character of the player. This will attempt to merge forms when called on
     * characters like Jacob and Esau. This does not work correctly when changing from/to certain
     * characters (i.e. Tainted Isaac).
     *
     * If you attempt to change to an invalid character, the game will crash.
     */
    ChangePlayerType: (character: PlayerType) => void;

    /**
     * Spawns the appropriate amount of familiars associated with a custom collectible.
     *
     * - If the target count specified is less than the current amount of familiars, it will spawn
     *   more until the target count is met.
     * - If the target count specified is than the current amount of familiars, it will despawn
     *   familiars until the target count is met.
     *
     * Note that this function is bugged in that it will not increment the provided RNG. This is bad
     * because if you provide the player's collectible RNG as the argument for `rng`, all of the
     * resulting spawned familiars will have the same `InitSeed`. Since `InitSeed` is the main way
     * to identify unique familiars, it is important that each familiar has a unique `InitSeed`.
     * Thus, a brand new RNG object should always be passed to the `EntityPlayer.CheckFamiliar`
     * method so that each new spawned familiar will have a new, random `InitSeed`. Subsequently,
     * you should handle random familiar events not with an RNG object based on the familiar's
     * `InitSeed`, but with a data structure that maps familiar `InitSeed` to RNG objects that are
     * initialized based on the seed from the `EntityPlayer.GetCollectibleRNG` method.
     *
     * It is recommended to avoid using this method directly and use the `checkFamiliar` or
     * `checkFamiliarFromCollectible` helper functions from the IsaacScript standard library
     * instead.
     *
     * @param familiarVariant In most cases, use the familiar variant for your custom familiar.
     * @param targetCount The expected amount of this `FamiliarVariant` that this `EntityPlayer`
     *                    should have. This argument can simply be how many of an item that the
     *                    current EntityPlayer owns. However, if you want your familiar to synergize
     *                    with Monster Manual and Box of Friends, then this argument should be
     *                    `EntityPlayer.GetCollectibleNum(collectibleType) +
     *                    EntityPlayer.GetEffects().GetCollectibleEffectNum(collectibleType)`.
     * @param rng Always use a brand new RNG object. (See the previous explanation on why you should
     *            not use the RNG from the `EntityPlayer.GetCollectibleRNG` method.)
     * @param sourceItemConfigItem The `ItemConfigItem` that this familiar was created by. Default
     *                             is undefined. This should always be specified so that Sacrificial
     *                             Altar will work properly. (It informs the game which collectible
     *                             should be removed if the familiar is tagged with the
     *                             "cansacrifice" entity tag.) This can be obtained with:
     *                             `Isaac.GetItemConfig().GetCollectible(collectibleType)`
     * @param familiarSubType The subtype of the familiar to check. Default is -1, which matches
     *                        every sub-type.
     */
    CheckFamiliar: (
      familiarVariant: FamiliarVariant,
      targetCount: int,
      rng: RNG,
      sourceItemConfigItem?: ItemConfigItem,
      familiarSubType?: int,
    ) => void;

    ClearCostumes: () => void;
    ClearDeadEyeCharge: () => void;

    /** Called automatically by the game when the player exits a room. */
    ClearTemporaryEffects: () => void;

    /**
     * Sets the charge of the active item to 0 without triggering the active item effect.
     *
     * @param activeSlot Default is `ActiveSlot.SLOT_PRIMARY`.
     */
    DischargeActiveItem: (activeSlot?: ActiveSlot) => void;

    DoZitEffect: (direction: Vector) => void;
    DonateLuck: (luck: int) => void;
    DropPocketItem: (pocketItemSlot: PocketItemSlot, position: Vector) => void;

    /** If the player does not currently have a trinket, this function will be a no-op. */
    DropTrinket: (dropPos: Vector, replaceTick: boolean) => void;

    /**
     * Triggers the `EVALUATE_CACHE` callback. Before calling this function, you need to set the
     * appropriate cache flags by using the `EntityPlayer.AddCacheFlag` method.
     */
    EvaluateItems: () => void;

    /**
     * @param position
     * @param velocity
     * @param source Default is undefined.
     */
    FireBomb: (
      position: Vector,
      velocity: Vector,
      source?: Entity,
    ) => EntityBomb;

    /**
     * @param direction
     * @param source Default is undefined.
     * @param damageMultiplier Default is 1.
     */
    FireBrimstone: (
      direction: Vector,
      source?: Entity,
      damageMultiplier?: float,
    ) => EntityLaser;

    FireDelayedBrimstone: (angle: float, parent: Entity) => EntityLaser;

    /**
     * @param parent
     * @param rotationOffset Default is 0.
     * @param cantOverwrite Default is false.
     * @param subType Default is 0.
     * @param variant Default is 0.
     */
    FireKnife: (
      parent: Entity,
      rotationOffset?: float,
      cantOverwrite?: boolean,
      subType?: int,
      variant?: int,
    ) => EntityKnife;

    /**
     * @param position
     * @param velocity
     * @param canBeEye Default is true.
     * @param noTractorBeam Default is false.
     * @param canTriggerStreakEnd Default is true.
     * @param source Default is undefined.
     * @param damageMultiplier Default is 1.
     */
    FireTear: (
      position: Vector,
      velocity: Vector,
      canBeEye?: boolean,
      noTractorBeam?: boolean,
      canTriggerStreakEnd?: boolean,
      source?: Entity,
      damageMultiplier?: float,
    ) => EntityTear;

    /**
     * @param position
     * @param laserOffset
     * @param direction
     * @param leftEye
     * @param oneHit Default is false.
     * @param source Default is undefined.
     * @param damageMultiplier Default is 1.
     */
    FireTechLaser: (
      position: Vector,
      laserOffset: LaserOffset,
      direction: Vector,
      leftEye: boolean,
      oneHit?: boolean,
      source?: Entity,
      damageMultiplier?: float,
    ) => EntityLaser;

    /**
     * @param position
     * @param direction
     * @param radius
     * @param source Default is undefined.
     * @param damageMultiplier Default is 1.
     */
    FireTechXLaser: (
      position: Vector,
      direction: Vector,
      radius: float,
      source?: Entity,
      damageMultiplier?: float,
    ) => EntityLaser;

    FlushQueueItem: () => boolean;

    /**
     * @param activeSlot Default is `ActiveSlot.SLOT_PRIMARY`.
     * @param force If set, items will always be charged even if they normally cannot be recharged
     *              by batteries.
     */
    FullCharge: (activeSlot?: ActiveSlot, force?: boolean) => boolean;

    /** @param activeSlot Default is `ActiveSlot.SLOT_PRIMARY`. */
    GetActiveCharge: (activeSlot?: ActiveSlot) => int;

    /**
     * Returns `CollectibleType.NULL` (0) if no item is held.
     *
     * @param activeSlot Default is `ActiveSlot.SLOT_PRIMARY`.
     */
    GetActiveItem: (activeSlot?: ActiveSlot) => CollectibleType;

    /**
     * Returns 0 if there is no active item in the specified slot.
     *
     * @param activeSlot Default is ActiveSlot.SLOT_PRIMARY.
     */
    GetActiveSubCharge: (activeSlot?: ActiveSlot) => int;

    GetActiveWeaponEntity: () => Entity;
    GetAimDirection: () => Readonly<Vector>;
    GetBabySkin: () => BabySubType;

    /** @param activeSlot Default is ActiveSlot.SLOT_PRIMARY. */
    GetBatteryCharge: (activeSlot?: ActiveSlot) => int;

    /** Returns the bit mask for which soul hearts are black hearts. */
    GetBlackHearts: () => int;

    /**
     * Gets Tainted Bethany's blood charges. Returns 0 on characters other than Tainted Bethany. (It
     * is unknown how this method is different from `EntityPlayer.GetEffectiveBloodCharge`.)
     */
    GetBloodCharge: () => int;

    GetBodyColor: () => SkinColor;

    /** There is no separate `BombFlag` enum, so bombs use `TearFlag`. */
    GetBombFlags: () => BitFlags<TearFlag>;

    GetBombVariant: (
      tearFlags: TearFlag | BitFlags<TearFlag>,
      forceSmallBomb: boolean,
    ) => BombVariant;

    /**
     * Returns the amount of bone hearts that the player has. This is not doubled like the
     * `EntityPlayer.GetMaxHearts` method is, so if e.g. the player has 3 bone hearts, this will
     * return 3.
     */
    GetBoneHearts: () => int;

    /**
     * Returns the amount of broken hearts that the player has. This is not doubled like the
     * `EntityPlayer.GetMaxHearts` method is, so if e.g. the player has 3 broken hearts, this will
     * return 3.
     */
    GetBrokenHearts: () => int;

    /** Returns `CardType.NULL` (0) if there is no card. */
    GetCard: (pocketItemSlot: PocketItemSlot) => CardType;

    GetCardRNG: (cardType: CardType) => RNG;

    /**
     * Returns the total amount of collectibles that the player has. For example, if the player has
     * 1 Sad Onion and 2 Inner Eyes, then this function will return 3.
     */
    GetCollectibleCount: () => int;

    /**
     * @param collectibleType
     * @param onlyCountTrueItems If set to true, the function only counts collectibles that the
     *                           player actually owns and ignores things like Lilith's Incubus,
     *                           items granted by 3 Dollar Bill, and so forth.
     */
    GetCollectibleNum: (
      collectibleType: CollectibleType,
      onlyCountTrueItems?: boolean,
    ) => int;

    GetCollectibleRNG: (collectibleType: CollectibleType) => RNG;

    GetCostumeNullPos: (
      nullFrameName: string,
      headScale: boolean,
      direction: Vector,
    ) => Vector;

    /**
     * When the player is hit, they will flash a different color and receive invulnerability frames.
     * This method returns the amount of invulnerability frames. Normally, the player will receive
     * 60 invulnerability frames when dealt a half-heart of damage or 120 invulnerability frames
     * when dealt a full heart of damage. Additionally, the Blind Rage trinket can affect how
     * invulnerability frames are granted.
     *
     * Note that the frames returned by this function are render frames, not game frames.
     */
    GetDamageCooldown: () => int;

    /**
     * Gets Tainted Bethany's blood charges. Returns 0 on characters other than Tainted Bethany. (It
     * is unknown how this method is different from `EntityPlayer.GetBloodCharge`.)
     */
    GetEffectiveBloodCharge: () => int;

    /**
     * Returns the amount of red hearts the player can have in their normal heart containers and
     * bone heart containers. 1 unit is half a red heart. For example, if you have 3 red heart
     * containers and 1 bone heart container, then this function would return 8 (i.e. 6 + 2).
     */
    GetEffectiveMaxHearts: () => int;

    /**
     * Gets Bethany's soul heart charges. Returns 0 on characters other than Bethany. (It is unknown
     * how this function is different from `EntityPlayer.GetSoulCharge`.)
     */
    GetEffectiveSoulCharge: () => int;

    GetEffects: () => TemporaryEffects;
    GetEternalHearts: () => int;
    GetExtraLives: () => int;
    GetFireDirection: () => Direction;
    GetFlyingOffset: () => Vector;
    GetGoldenHearts: () => int;
    GetGreedDonationBreakChance: () => float;
    GetHeadColor: () => SkinColor;
    GetHeadDirection: () => Direction;

    /**
     * Returns the maximum heart containers that the provided player can have. Normally, this is 12,
     * but it can change depending on the character (e.g. Keeper) and other things (e.g. Mother's
     * Kiss).
     *
     * This function automatically accounts for Broken Hearts. For example, if Isaac has one broken
     * heart, this function will return 22 instead of 24.
     */
    GetHeartLimit: () => int;

    /**
     * Returns the amount of red hearts the player has inside their heart containers and bone
     * hearts. 1 unit is half a heart.
     */
    GetHearts: () => int;

    GetItemState: () => int;
    GetJarFlies: () => int;
    GetJarHearts: () => int;
    GetLaserOffset: (laserOffset: LaserOffset, direction: Vector) => Vector;
    GetLastActionTriggers: () => int;
    GetLastDamageFlags: () => BitFlags<DamageFlag>;
    GetLastDamageSource: () => Readonly<EntityRef>;
    GetLastDirection: () => Readonly<Vector>;

    /**
     * - When called on Jacob or Esau, returns Jacob.
     * - When called on Tainted Forgotten or Tainted Forgotten's Soul, returns Tainted Forgotten.
     * - When called on any other character, returns that character.
     */
    GetMainTwin: () => EntityPlayer;

    /**
     * Returns the amount of heart containers that the player has. 1 unit is half a heart container.
     */
    GetMaxHearts: () => int;

    /**
     * Returns the maximum number of pocket items + pocket actives that the player can currently
     * hold.
     *
     * - Usually, this will return 1.
     * - If the player has Polydactyly, Starter Deck, or Little Baggy, it will increment the number
     *   by 1.
     * - If the player has a pocket active item, it will increment the number by 1.
     * - If the player has a dice from the Dice Bag trinket, it will increment the number by 1.
     * - The maximum number this can return is 4.
     */
    GetMaxPocketItems: () => int;

    /** Returns the max amount of poop consumables that can be held by the player. */
    GetMaxPoopMana: () => int;

    /**
     * Returns the maximum number of trinkets that the player can currently hold. Usually, this will
     * return 1, but the player can hold up to 2 trinkets under certain conditions (e.g. having
     * Mom's Purse).
     */
    GetMaxTrinkets: () => int;

    /**
     * Returns the current passive item mimicked by Modeling Clay or CollectibleType.NULL if no
     * effect is being mimicked.
     */
    GetModelingClayEffect: () => CollectibleType;

    GetMovementDirection: () => Direction;
    GetMovementInput: () => Vector;
    GetMovementJoystick: () => Vector;
    GetMovementVector: () => Readonly<Vector>;

    // `GetMultiShotParams` used to be used for the `GetMultiShotPositionVelocity` method, but since
    // that method is now removed, `GetMultiShotParams` has no purpose.

    /**
     * Normally, this function returns the player. However, in some cases, NPCs can be redirected to
     * attack another target, in which case this function will return the alternate target (e.g.
     * after using Best Friend).
     */
    GetNPCTarget: () => Entity;

    /**
     * Returns the character name, like "Isaac" or "Cain". Note that this will return the localized
     * version of the character's name, e.g. "Magdalena" for Magdalene in Spanish.
     */
    GetName: () => string;

    GetNumBlueFlies: () => int;
    GetNumBlueSpiders: () => int;
    GetNumBombs: () => int;
    GetNumCoins: () => int;

    /** Returns the number of giga bombs held. */
    GetNumGigaBombs: () => int;

    GetNumKeys: () => int;

    /**
     * - When called on Jacob, returns Esau.
     * - When called on Esau, returns Jacob.
     * - When called on Tainted Forgotten, returns Tainted Forgotten's Soul.
     * - When called on Tainted Forgotten's Soul, returns Tainted Forgotten.
     * - When called on any other character, returns undefined.
     */
    GetOtherTwin: () => EntityPlayer | undefined;

    /** Returns `PillColor.NULL` (0) if there is no pill. */
    GetPill: (pocketItemSlot: PocketItemSlot) => PillColor;

    GetPillRNG: (pillEffect: PillEffect) => RNG;

    /** The player type is the sub-type of the player. This is equal to what character they are. */
    GetPlayerType: () => PlayerType;

    // GetPocketItem is not implemented.

    /** Returns how many poop consumables the player is currently holding. */
    GetPoopMana: () => int;

    /** Returns the poop spell at the given position in the player's spell queue. */
    GetPoopSpell: (position: int) => PoopSpellType;

    /**
     * Returns the joystick direction that drives player movement, taking into account certain
     * modifiers like disabled controls and seed effects.
     */
    GetRecentMovementVector: () => Readonly<Vector>;

    /**
     * This returns the number of rotten hearts.
     *
     * Unlike other heart functions, it returns the actual number of rotten hearts. For example,
     * this returns 2 if the player has 2 rotten hearts.
     */
    GetRottenHearts: () => int;

    GetShootingInput: () => Vector;
    GetShootingJoystick: () => Vector;
    GetSmoothBodyRotation: () => float;

    /**
     * Gets Bethany's soul heart charges. Returns 0 on characters other than Bethany. (It is unknown
     * how this function is different from `EntityPlayer.GetEffectiveSoulCharge`.)
     */
    GetSoulCharge: () => int;

    /**
     * 1 unit is half a heart. Black hearts count toward this total.
     *
     * Remove them with negative numbers.
     */
    GetSoulHearts: () => int;

    /**
     * - When on The Forgotten, returns the sub-player object for The Soul.
     * - When on The Soul, returns the sub-player object for The Forgotten.
     * - Otherwise, returns undefined.
     * - This will always return undefined if you call it on a sub-player. To get the "parent"
     *   player, use the `getSubPlayerParent` helper function.
     */
    GetSubPlayer: () => EntitySubPlayer | undefined;

    /**
     * Used for tear parameters that are calculated on hit (e.g. Tough Love, Common Cold).
     *
     * @param weaponType
     * @param damageScale Default is 1.
     * @param tearDisplacement Default is 1.
     * @param source Default is undefined.
     */
    GetTearHitParams: (
      weaponType: WeaponType,
      damageScale?: float,
      tearDisplacement?: int,
      source?: Entity,
    ) => TearParams;

    GetTearMovementInheritance: (shotDirection: Vector) => Vector;
    GetTearPoisonDamage: () => float;
    GetTearRangeModifier: () => int;
    GetTotalDamageTaken: () => int;
    GetTractorBeam: () => Entity;

    /** Returns `TrinketType.NULL` (0) if there is no trinket. */
    GetTrinket: (trinketSlot: TrinketSlot) => TrinketType;

    /**
     * This is the number of times that the trinket effect is applied.
     *
     * Returns 0 if the player does not have the particular trinket.
     */
    GetTrinketMultiplier: (trinketType: TrinketType) => int;

    GetTrinketRNG: (trinketType: TrinketType) => RNG;
    GetVelocityBeforeUpdate: () => Readonly<Vector>;
    GetZodiacEffect: () => ZodiacCollectibleType;

    /**
     * @param collectibleType
     * @param ignoreModifiers If set to true, only counts collectibles the player actually owns and
     *                        ignores effects granted by items like Zodiac, 3 Dollar Bill and
     *                        Lemegeton. Default is false.
     */
    HasCollectible: (
      collectibleType: CollectibleType,
      ignoreModifiers?: boolean,
    ) => boolean;

    /** Returns true if the player's item effects are currently being disabled. */
    HasCurseMistEffect: () => boolean;

    /** Returns true if all of the player's red heart containers are filled. */
    HasFullHearts: () => boolean;

    /**
     * Returns true if the combined value of the player's red hearts and soul hearts is equal to or
     * greater than the value of the player's max hearts.
     */
    HasFullHeartsAndSoulHearts: () => boolean;

    HasGoldenBomb: () => boolean;
    HasGoldenKey: () => boolean;

    /** @param damageFlag Default is 0. */
    HasInvincibility: (
      damageFlag?: DamageFlag | BitFlags<DamageFlag>,
    ) => boolean;

    HasPlayerForm: (playerForm: PlayerForm) => boolean;
    HasTimedItem: () => boolean;

    /**
     * @param trinketType
     * @param ignoreModifiers If set to true, only counts trinkets the player actually holds and
     *                        ignores effects granted by other items. Default is false.
     */
    HasTrinket: (
      trinketType: TrinketType,
      ignoreModifiers?: boolean,
    ) => boolean;

    HasWeaponType: (weaponType: WeaponType) => boolean;
    InitBabySkin: () => void;
    IsBlackHeart: (heart: int) => boolean;
    IsBoneHeart: (heartSlot: int) => boolean;

    /**
     * In a multiplayer game, if a player dies, they will return as a tiny ghost. This method
     * returns true if the player is a co-op ghost.
     */
    IsCoopGhost: () => boolean;

    IsExtraAnimationFinished: () => boolean;
    IsFullSpriteRendering: () => boolean;
    IsHeldItemVisible: () => boolean;

    /** Is the player holding up an item (card/collectible/etc.)? */
    IsHoldingItem: () => boolean;

    IsItemQueueEmpty: () => boolean;
    IsP2Appearing: () => boolean;
    IsPosInSpotLight: (position: Vector) => boolean;

    /**
     * Returns true for The Soul. Otherwise, returns false.
     *
     * Additionally, this also returns true for the player object representing Dead Tainted Lazarus
     * that fires at the beginning of the run in the `POST_PLAYER_INIT` callback. (The
     * `POST_PLAYER_INIT` callback fires first for Dead Tainted Lazarus before firing for the normal
     * Tainted Lazarus.)
     */
    IsSubPlayer: () => boolean;

    /**
     * This will always return false for active items that have `chargetype="special"` set in the
     * `items.xml` file, even if they are not fully charged.
     *
     * @param activeSlot Default is `ActiveSlot.SLOT_PRIMARY`.
     */
    NeedsCharge: (activeSlot?: ActiveSlot) => boolean;

    PlayExtraAnimation: (animation: string) => void;
    QueueExtraAnimation: (animation: string) => void;

    /**
     * When the player touches a collectible item, they are not granted it immediately. Instead, the
     * item is a queue for the duration of the animation where the player holds the item above their
     * head. When the animation is finished, the item(s) in the queue will be granted. This method
     * adds a new item to the item queue. If the player is not currently playing an animation, then
     * the queued item will simply be awarded instantly.
     *
     * @param itemConfigItem
     * @param charge Default is 0.
     * @param touched Default is false.
     * @param golden Default is false.
     * @param varData Default is false.
     */
    QueueItem: (
      itemConfigItem: ItemConfigItem,
      charge?: int,
      touched?: boolean,
      golden?: boolean,
      varData?: int,
    ) => void;

    RemoveBlackHeart: (blackHeart: int) => void;
    RemoveBlueFly: () => void;
    RemoveBlueSpider: () => void;

    /**
     * @param collectibleType
     * @param ignoreModifiers Ignores collectible effects granted by other items (i.e. Void).
     *                        Default is false.
     * @param activeSlot Sets the active slot this collectible should be removed from. Default is
     *                   `ActiveSlot.SLOT_PRIMARY`.
     * @param removeFromPlayerForm If successfully removed and part of a transformation, decrease
     *                             that transformation's counter by 1. Default is true.
     */
    RemoveCollectible: (
      collectibleType: CollectibleType,
      ignoreModifiers?: boolean,
      activeSlot?: ActiveSlot,
      removeFromPlayerForm?: boolean,
    ) => void;

    RemoveCostume: (itemConfigItem: ItemConfigItem) => void;

    /**
     * Re-enables item effects, consumables, and pocket items removed by
     * `EntityPlayer.AddCurseMistEffect`.
     */
    RemoveCurseMistEffect: () => void;

    RemoveGoldenBomb: () => void;
    RemoveGoldenKey: () => void;

    /** Removes player-specific costumes like Magdalene's hair or Cain's eyepatch. */
    RemoveSkinCostume: () => void;

    RenderBody: (position: Vector) => void;
    RenderGlow: (position: Vector) => void;
    RenderHead: (position: Vector) => void;
    RenderTop: (position: Vector) => void;

    ReplaceCostumeSprite: (
      itemConfigItem: ItemConfigItem,
      spritePath: string,
      spriteID: int,
    ) => void;

    ResetDamageCooldown: () => void;
    ResetItemState: () => void;
    RespawnFamiliars: () => void;
    Revive: () => void;

    /**
     * @param charge
     * @param activeSlot Default is `ActiveSlot.SLOT_PRIMARY`.
     */
    SetActiveCharge: (charge: int, activeSlot?: ActiveSlot) => void;

    /** This sets Tainted Bethany's blood charges. Only works on Tainted Bethany. */
    SetBloodCharge: (num: int) => void;

    SetCard: (pocketItemSlot: PocketItemSlot, cardType: CardType) => void;
    SetFullHearts: () => void;
    SetMinDamageCooldown: (damageCooldown: int) => void;
    SetPill: (pocketItemSlot: PocketItemSlot, pillColor: PillColor) => void;

    /**
     * Sets the player's pocket active item to the given collectible.
     *
     * Items added to `ActiveSlot.POCKET_SINGLE_USE` will always be removed upon being used.
     *
     * Note that unlike the `EntityPlayer.AddCollectible` method, this function will remove the
     * collectible from pools by default.
     *
     * @param collectibleType
     * @param slot Can be either ActiveSlot.SLOT_POCKET or ActiveSlot.SLOT_POCKET2. Default is
     *             `ActiveSlot.SLOT_POCKET`.
     * @param keepInPools If true, the item will not be removed from the item pools. Default is
     *                    false.
     */
    SetPocketActiveItem: (
      collectibleType: CollectibleType,
      slot?: ActiveSlot.POCKET | ActiveSlot.POCKET_SINGLE_USE,
      keepInPools?: boolean,
    ) => void;

    SetShootingCooldown: (cooldown: int) => void;

    /**
     * This sets Bethany's soul heart charges.
     *
     * @param num
     */
    SetSoulCharge: (num: int) => void;

    SetTargetTrapDoor: (trapDoor: GridEntity) => void;
    ShootRedCandle: (direction: Vector) => void;
    SpawnMawOfVoid: (durationGameFrames: int) => EntityLaser;
    StopExtraAnimation: () => void;

    /** This will do nothing if the player does not have a Schoolbag. */
    SwapActiveItems: () => void;

    ThrowBlueSpider: (position: Vector, target: Vector) => Entity;

    /**
     * Spawns a friendly dip (from Dirty Mind) and throws it towards the specified target.
     *
     * @param subType
     * @param position
     * @param target If Vector.Zero, throws the spawned dip in a random direction.
     */
    ThrowFriendlyDip: (
      subType: DipFamiliarSubType,
      position: Vector,
      target: Vector,
    ) => EntityFamiliar;

    /**
     * If holding an entity, throws it in the specified direction and returns it. Otherwise, returns
     * undefined.
     *
     * @param velocity
     */
    ThrowHeldEntity: (velocity: Vector) => Entity;

    /**
     * Triggers the extra effect granted by Book of Virtues for the given active item.
     *
     * @param collectibleType Default is `CollectibleType.NULL`.
     * @param charge Default is 0.
     */
    TriggerBookOfVirtues: (
      collectibleType?: CollectibleType,
      charge?: int,
    ) => void;

    /**
     * Attempts to pick up the given entity, returns true on success.
     *
     * Currently only works with some entity types (mainly bombs and enemies).
     */
    TryHoldEntity: (entity: Entity) => boolean;

    TryHoldTrinket: (trinketType: TrinketType) => boolean;

    /**
     * This method will crash the game if you provide it an invalid collectible type, such as -1 or
     * 43. (Using 0 will not cause a crash.) Thus, it is safer to use the `RemoveCostume` method
     * instead.
     *
     * @param collectibleType
     * @param keepPersistent If set to false, this method will only remove temporary costumes.
     */
    TryRemoveCollectibleCostume: (
      collectibleType: CollectibleType,
      keepPersistent: boolean,
    ) => void;

    TryRemoveNullCostume: (nullItemID: NullItemID) => void;

    /**
     * Will remove the specified trinket, if it exists. This will also remove The Tick and smelted
     * trinkets.
     *
     * @param trinketType If you provide an argument of 0 or an otherwise invalid trinket ID, the
     *                    game will crash.
     * @returns Whether the specified trinket was removed successfully.
     */
    TryRemoveTrinket: (trinketType: TrinketType) => boolean;

    /**
     * This method will crash the game if you provide it an invalid trinket type, such as -1, 0, or
     * 500. Thus, it is safer to use the `RemoveCostume` method instead.
     */
    TryRemoveTrinketCostume: (trinketType: TrinketType) => void;

    TryUseKey: () => boolean;
    UpdateCanShoot: () => void;

    /**
     * @param collectibleType
     * @param useFlag Default is 0.
     * @param activeSlot The active slot this item was used from. (Set to -1 if this item was not
     *                   triggered by any active slot.) Default is `ActiveSlot.SLOT_PRIMARY`.
     * @param customVarData Default is 0.
     */
    UseActiveItem: ((
      collectibleType: CollectibleType,
      useFlag?: UseFlag | BitFlags<UseFlag>,
      activeSlot?: ActiveSlot | -1,
      customVarData?: int,
    ) => void) &
      ((
        collectibleType: CollectibleType,
        showAnim: boolean,
        keepActiveItem: boolean,
        allowNonMainPlayer: boolean,
        toAddCostume: boolean,
        activeSlot?: ActiveSlot | -1,
        customVarData?: int,
      ) => void);

    /**
     * @param cardType
     * @param useFlag Default is 0.
     */
    UseCard: (
      cardType: CardType,
      useFlag?: UseFlag | BitFlags<UseFlag>,
    ) => void;

    /**
     * @param pillEffect
     * @param pillColor
     * @param useFlag Default is 0.
     */
    UsePill: (
      pillEffect: PillEffect,
      pillColor: PillColor,
      useFlag?: UseFlag | BitFlags<UseFlag>,
    ) => void;

    /** Triggers one of Tainted Blue Baby's poop spells. */
    UsePoopSpell: (poopSpellType: PoopSpellType) => void;

    /**
     * This function will return true if the player has one or more extra lives or if a conditional
     * revival item will work on the next death.
     *
     * Right now, there are 3 items that grant conditional extra lives:
     *
     * - Guppy's Collar - This function will successfully predict whether the next revive from
     *   Guppy's Collar will work (50% chance).
     * - Broken Ankh - This function will successfully predict whether the next revive from Broken
     *   Ankh will work (22.22% chance).
     * - Mysterious Paper - This function will only successfully predict the revive from Missing
     *   Poster every 4 frames, because it evaluates only one of its 4 possible item effects each
     *   frame.
     */
    WillPlayerRevive: () => boolean;

    BabySkin: BabySubType;

    /** Only change this in the `EVALUATE_CACHE` callback corresponding to `CacheFlag.FLYING`. */
    CanFly: boolean;

    readonly ControllerIndex: ControllerIndex;
    ControlsCooldown: int;
    ControlsEnabled: boolean;

    /** Only change this in the `EVALUATE_CACHE` callback corresponding to `CacheFlag.DAMAGE`. */
    Damage: float;

    FireDelay: int;

    // FriendBallEnemy is not implemented.

    HeadFrameDelay: int;

    /** Internally used by IBS. Increases based on damage dealt. Range is from 0-1. */
    IBSCharge: float;

    ItemHoldCooldown: int;
    LaserColor: Color;

    /** Only change this in the `EVALUATE_CACHE` callback corresponding to `CacheFlag.LUCK`. */
    Luck: float;

    /**
     * Only change this in the `EVALUATE_CACHE` callback corresponding to `CacheFlag.FIRE_DELAY`.
     */
    MaxFireDelay: int;

    /** Only change this in the `EVALUATE_CACHE` callback corresponding to `CacheFlag.SPEED`. */
    MoveSpeed: float;

    QueuedItem: QueueItemData;

    /**
     * Internally used by Tainted Samson. Increases based on damage dealt. Range is from 0-100000.
     */
    SamsonBerserkCharge: int;

    /**
     * Only change this in the `EVALUATE_CACHE` callback corresponding to `CacheFlag.SHOT_SPEED`.
     */
    ShotSpeed: float;

    /**
     * Only change this in the `EVALUATE_CACHE` callback corresponding to `CacheFlag.TEAR_COLOR`.
     */
    TearColor: Color;

    /** Only change this in the `EVALUATE_CACHE` callback corresponding to `CacheFlag.RANGE`. */
    TearFallingAcceleration: float;

    /** Only change this in the `EVALUATE_CACHE` callback corresponding to `CacheFlag.RANGE`. */
    TearFallingSpeed: float;

    /** Only change this in the `EVALUATE_CACHE` callback corresponding to `CacheFlag.TEAR_FLAG`. */
    TearFlags: BitFlags<TearFlag>;

    /**
     * This is equal to the range stat multiplied by -1.
     *
     * Only change this in the `EVALUATE_CACHE` callback corresponding to `CacheFlag.RANGE`.
     */
    TearHeight: float;

    /**
     * This is equal to the range stat multiplied by 40.
     *
     * Only change this in the `EVALUATE_CACHE` callback corresponding to `CacheFlag.RANGE`.
     */
    TearRange: float;

    TearsOffset: Readonly<Vector>;
    Variant: PlayerVariant;
  }
}

----
types\classes\EntityProjectile.d.ts
import type { ProjectileVariant } from "../../enums/collections/variants";
import type { ProjectileFlag } from "../../enums/flags/ProjectileFlag";

declare global {
  interface EntityProjectile extends Entity {
    /** See `ChangeFlags`. */
    AddChangeFlags: (flags: ProjectileFlag | BitFlags<ProjectileFlag>) => void;

    AddFallingAccel: (value: float) => void;
    AddFallingSpeed: (value: float) => void;
    AddHeight: (value: float) => void;

    /** You can change the attributes of the projectile by adding one or more `ProjectileFlag`. */
    AddProjectileFlags: (
      flags: ProjectileFlag | BitFlags<ProjectileFlag>,
    ) => void;

    AddScale: (value: float) => void;

    ClearProjectileFlags: (
      flags: ProjectileFlag | BitFlags<ProjectileFlag>,
    ) => void;

    HasProjectileFlags: (
      flags: ProjectileFlag | BitFlags<ProjectileFlag>,
    ) => boolean;

    Acceleration: float;

    /**
     * The flags to set when the "changed" state is activated.
     *
     * See `ChangeTimeout` for an explanation of the "changed" state.
     */
    ChangeFlags: ProjectileFlag;

    /**
     * The number of frames that need to pass until the "changed" state is activated.
     *
     * Projectiles can have two states: "normal" and "changed":
     *
     * - The "normal" state is set by default.
     * - The "changed" state activates when the projectile's frame count reaches the value set in
     *   `ChangeTimeout`.
     *
     * When the "changed" state is activated, two things happen:
     *
     * - The flags are changed to what was set in `ChangeFlags`. (But this only happens if the
     *   `ProjectileFlag.CHANGE_FLAGS_AFTER_TIMEOUT` flag was set.)
     * - The velocity is changed to what was set in `ChangeVelocity`. (But this only happens if the
     *   `ProjectileFlag.CHANGE_VELOCITY_AFTER_TIMEOUT` flag was set.
     */
    ChangeTimeout: int;

    /**
     * The velocity to set when the "changed" state is activated.
     *
     * See `ChangeTimeout` for an explanation of the "changed" state.
     */
    ChangeVelocity: float;

    CurvingStrength: float;
    Damage: float;
    DepthOffset: float;
    FallingAccel: float;
    FallingSpeed: float;
    Height: float;
    HomingStrength: float;
    ProjectileFlags: BitFlags<ProjectileFlag>;
    Scale: float;
    Variant: ProjectileVariant;
    WiggleFrameOffset: int;
  }
}

----
types\classes\EntityPtr.d.ts
declare function EntityPtr(this: void, entity: Entity): EntityPtr;

declare interface EntityPtr extends IsaacAPIClass {
  SetReference: (ref: Entity) => void;

  readonly Ref?: Entity;
}

----
types\classes\EntityRef.d.ts
import type { EntityType } from "../../enums/EntityType";

declare global {
  /**
   * It is possible to pass undefined to the constructor, which will result in an `EntityRef` object
   * that has no associated entity.
   */
  function EntityRef(this: void, entity: Entity | undefined): EntityRef;

  interface EntityRef extends IsaacAPIClass {
    Entity: Entity | undefined;
    IsCharmed: boolean;
    IsFriendly: boolean;
    Position: Vector;
    SpawnerType: EntityType;
    SpawnerVariant: int;
    Type: EntityType;
    Variant: int;
  }
}

----
types\classes\EntityTear.d.ts
import type { TearVariant } from "../../enums/collections/variants";
import type { TearFlag } from "../../enums/flags/TearFlag";

declare global {
  interface EntityTear extends Entity {
    AddTearFlags: (flags: TearFlag | BitFlags<TearFlag>) => void;
    ChangeVariant: (tearVariant: TearVariant) => void;
    ClearTearFlags: (flags: TearFlag | BitFlags<TearFlag>) => void;
    HasTearFlags: (flags: TearFlag | BitFlags<TearFlag>) => boolean;
    ResetSpriteScale: () => void;
    SetDeadEyeIntensity: (intensity: float) => void;
    SetKnockbackMultiplier: (multiplier: float) => void;
    SetParentOffset: (offset: Vector) => void;
    SetWaitFrames: (value: int) => void;

    readonly BaseDamage: float;
    readonly BaseScale: float;
    Bounced: boolean;
    CanTriggerStreakEnd: boolean;
    ContinueVelocity: Vector;
    FallingAcceleration: float;
    FallingSpeed: float;
    Height: float;
    HomingFriction: float;
    KnockbackMultiplier: float;
    ParentOffset: Vector;

    /**
     * Unlike other cases of read-only `Vector` in the API, this is read-only in both the field and
     * the attributes.
     */
    readonly PosDisplacement: Readonly<Vector>;

    Rotation: float;
    Scale: float;
    StickDiff: Vector;
    StickTarget?: Entity;
    StickTimer: int;
    TearFlags: BitFlags<TearFlag>;

    /**
     * - In each run, the game keeps track of how many tears have been fired by the player in total.
     * - TearIndex represents this tear counter.
     * - It is 0-indexed, meaning that the first tear fired by the player on a run will have a
     *   `TearIndex` of 0, the second tear fired by the player on a run will have a `TearIndex` of
     *   1, and so on.
     */
    readonly TearIndex: int;

    Variant: TearVariant;
    WaitFrames: int;
  }
}

----
types\classes\EntriesList.d.ts
declare interface EntriesList extends IsaacAPIClass {
  Get: (idx: int) => RoomConfigEntry | undefined;

  Size: int;
}

----
types\classes\Font.d.ts
declare function Font(this: void): Font;

declare interface Font extends IsaacAPIClass {
  /**
   * Converts UTF8 to UTF16, then draws the string on screen.
   *
   * The `boxWidth` and `center` parameters can be used for aligning the text. Note that:
   *
   * - If `boxWidth` is zero, the text will be left-aligned and the `center` parameter will be
   *   ignored.
   * - If `boxWidth` is not zero and the `center` parameter is false, then the text will be
   *   right-aligned inside the `boxWidth` size.
   * - If `boxWidth` is not zero, and the `center` parameter is true, then the text will be centered
   *   inside the `boxWidth` size.
   *
   * @param str
   * @param positionX
   * @param positionY
   * @param renderColor
   * @param boxWidth Default is 0.
   * @param center Default is false.
   */
  DrawString: (
    str: string,
    positionX: float,
    positionY: float,
    renderColor: KColor,
    boxWidth?: int,
    center?: boolean,
  ) => void;

  /**
   * Converts UTF8 to UTF16, then draws the scaled string on the screen.
   *
   * This method is similar to the `Font.DrawString` method; see the documentation for that function
   * for more details.
   *
   * @param str
   * @param positionX
   * @param positionY
   * @param scaleX
   * @param scaleY
   * @param renderColor
   * @param boxWidth Default is 0.
   * @param center Default is false.
   */
  DrawStringScaled: (
    str: string,
    positionX: float,
    positionY: float,
    scaleX: float,
    scaleY: float,
    renderColor: KColor,
    boxWidth?: int,
    center?: boolean,
  ) => void;

  /**
   * Draws a scaled string of Unicode text on the screen.
   *
   * This method is similar to the `Font.DrawString` method; see the documentation for that function
   * for more details.
   *
   * @param str
   * @param positionX
   * @param positionY
   * @param scaleX
   * @param scaleY
   * @param renderColor
   * @param boxWidth
   * @param center
   */
  DrawStringScaledUTF8: (
    str: string,
    positionX: float,
    positionY: float,
    scaleX: float,
    scaleY: float,
    renderColor: KColor,
    boxWidth: int,
    center: boolean,
  ) => void;

  /**
   * Draws a string of Unicode text on the screen.
   *
   * This method is similar to the `Font.DrawString` method; see the documentation for that function
   * for more details.
   *
   * @param str
   * @param positionX
   * @param positionY
   * @param renderColor
   * @param boxWidth Default is 0.
   * @param center Default is false.
   */
  DrawStringUTF8: (
    str: string,
    positionX: float,
    positionY: float,
    renderColor: KColor,
    boxWidth?: int,
    center?: boolean,
  ) => void;

  /**
   * Returns the number of pixels from the absolute top of the line to the base of the characters.
   */
  GetBaselineHeight: () => int;

  /** Returns the width of a specific character. */
  GetCharacterWidth: (character: string) => int;

  /** Returns the distance in pixels between each line of text. */
  GetLineHeight: () => int;

  /** Converts a string from UTF8 to UTF16, and returns the string's width. */
  GetStringWidth: (str: string) => int;

  /** Returns the string width of a Unicode text. */
  GetStringWidthUTF8: (str: string) => int;

  IsLoaded: () => boolean;
  Load: (filePath: string) => boolean;

  /** Sets the character that will be used when a missing character is encountered by the font. */
  SetMissingCharacter: (missingCharacter: int) => void;

  /** Unloads the font from memory. */
  Unload: () => void;
}

----
types\classes\Game.d.ts
import type { BackdropType } from "../../enums/BackdropType";
import type { Challenge } from "../../enums/Challenge";
import type { EffectVariant } from "../../enums/collections/variants";
import type { Difficulty } from "../../enums/Difficulty";
import type { Dimension } from "../../enums/Dimension";
import type { Direction } from "../../enums/Direction";
import type { Ending } from "../../enums/Ending";
import type { EntityType } from "../../enums/EntityType";
import type { FadeoutTarget } from "../../enums/FadeoutTarget";
import type { DamageFlag } from "../../enums/flags/DamageFlag";
import type { TearFlag } from "../../enums/flags/TearFlag";
import type { GameStateFlag } from "../../enums/GameStateFlag";
import type { GridRoom } from "../../enums/GridRoom";
import type { LevelStage } from "../../enums/LevelStage";
import type { RoomTransitionAnim } from "../../enums/RoomTransitionAnim";
import type { StageTransition } from "../../enums/StageTransition";

declare global {
  function Game(this: void): Game;

  interface Game extends IsaacAPIClass {
    AddDevilRoomDeal: () => void;
    AddEncounteredBoss: (entityType: EntityType, variant: int) => void;
    AddPixelation: (duration: int) => void;
    AddStageWithoutDamage: () => void;
    AddStageWithoutHeartsPicked: () => void;
    AddTreasureRoomsVisited: () => void;

    /**
     * There is no separate `BombFlag` enum, so bombs use `TearFlag`.
     *
     * @param position
     * @param damage
     * @param radius
     * @param lineCheck Default is true.
     * @param source Default is undefined.
     * @param tearFlags Default is `TearFlag.TEAR_NORMAL`.
     * @param damageFlags Default is `DamageFlag.DAMAGE_EXPLOSION`.
     * @param damageSource Default is false.
     */
    BombDamage: (
      position: Vector,
      damage: float,
      radius: float,
      lineCheck?: boolean,
      source?: Entity,
      tearFlags?: TearFlag | BitFlags<TearFlag>,
      damageFlags?: DamageFlag | BitFlags<DamageFlag>,
      damageSource?: boolean,
    ) => void;

    /**
     * There is no separate `BombFlag` enum, so bombs use `TearFlag`.
     *
     * @param position
     * @param damage
     * @param tearFlags Default is `TearFlags.TEAR_NORMAL`.
     * @param color Default is `Color.Default`.
     * @param source Default is undefined.
     * @param radiusMultiplier Default is 1.
     * @param lineCheck Default is true.
     * @param damageSource Default is false.
     * @param damageFlags Default is `DamageFlag.DAMAGE_EXPLOSION`.
     */
    BombExplosionEffects: (
      position: Vector,
      damage: float,
      tearFlags?: TearFlag | BitFlags<TearFlag>,
      color?: Color,
      source?: Entity,
      radiusMultiplier?: float,
      lineCheck?: boolean,
      damageSource?: boolean,
      damageFlags?: DamageFlag | BitFlags<DamageFlag>,
    ) => void;

    /**
     * There is no separate `BombFlag` enum, so bombs use `TearFlag`.
     *
     * @param position
     * @param radius
     * @param tearFlags
     * @param source Default is undefined.
     * @param radiusMultiplier Default is 1.
     */
    BombTearflagEffects: (
      position: Vector,
      radius: float,
      tearFlags: TearFlag | BitFlags<TearFlag>,
      source?: Entity,
      radiusMultiplier?: float,
    ) => void;

    /**
     * @param position
     * @param radius
     * @param source
     * @param showEffect Optional. Default is false.
     * @param doSuperKnockback Optional. Default is false.
     */
    ButterBeanFart: (
      position: Vector,
      radius: float,
      source: Entity | undefined,
      showEffect?: boolean,
      doSuperKnockback?: boolean,
    ) => void;

    /**
     * This method is the same thing as the `Level.ChangeRoom` method, but it will update the
     * "fxlayers" of the room properly.
     *
     * ("fxlayers" stands for "effect layers". It refers to overlays, light effect from
     * Basement/Cathedral, the Dogma static background, and so on. It is specified in the
     * "fxlayers.xml" file.)
     *
     * @param roomGridIndex The room grid index of the destination room.
     * @param dimension Default is `Dimension.CURRENT`.
     */
    ChangeRoom: (roomGridIndex: int | GridRoom, dimension?: Dimension) => void;

    CharmFart: (position: Vector, radius: float, source: Entity) => void;
    ClearDonationModAngel: () => void;
    ClearDonationModGreed: () => void;
    ClearStagesWithoutDamage: () => void;
    ClearStagesWithoutHeartsPicked: () => void;
    Darken: (darkness: float, timeout: int) => void;
    DonateAngel: (donate: int) => void;
    DonateGreed: (donate: int) => void;
    End: (ending: Ending) => void;

    /**
     * @param speed A value between 0 and 1. Using a value of 0 will soft-lock the game. Using a
     *              value of 1 will instantaneously fade in.
     */
    Fadein: (speed: float) => void;

    /**
     * Using non-valid `FadeoutTarget` values will be interpreted the same as `FadeoutTarget.NONE`.
     *
     * @param speed A value between 0 and 1. Using a value of 0 will never trigger the fade out
     *              target. Using a value of 1 will instantaneously trigger the fade out target.
     * @param fadeoutTarget
     */
    Fadeout: (speed: float, fadeoutTarget: FadeoutTarget) => void;

    /**
     * @param position
     * @param radius Default is 85.
     * @param source Default is undefined.
     * @param fartScale Default is 1.
     * @param fartSubType Default is 0.
     * @param fartColor Default is `Color.Default`.
     */
    Fart: (
      position: Vector,
      radius?: float,
      source?: Entity,
      fartScale?: float,
      fartSubType?: int,
      fartColor?: Color,
    ) => void;

    FinishChallenge: () => void;

    // GetAmbush is not implemented.

    GetDarknessModifier: () => float;
    GetDevilRoomDeals: () => int;
    GetDonationModAngel: () => int;
    GetDonationModGreed: () => int;
    GetFont: () => Font;

    /**
     * Returns the amount of game frames that have passed since the run was started.
     *
     * - Game frames do not increase when the game is paused or when in the main menu.
     * - The in-game timer is based on game frames. (Subsequently, game frames are used to calculate
     *   the Boss Rush door opening and the Hush door opening.)
     * - 30 game frames equals 1 second.
     * - The game frame count is different from the count returned from the `Isaac.GetFrameCount`
     *   method; that returns the render frame count.
     * - Game frames and render frames are synchronized such two render frames will always
     *   correspond to one game frame, and the first render frame in the pair will always be odd.
     */
    GetFrameCount: () => int;

    GetGreedBossWaveNum: () => int;
    GetGreedWavesNum: () => int;

    // GetItemOverlay is not implemented.

    GetHUD: () => HUD;
    GetItemPool: () => ItemPool;

    /** @deprecated This method is bugged and returns useless `userdata`. */
    GetLastDevilRoomStage: () => LuaUserdata;

    GetLastLevelWithDamage: () => LevelStage;
    GetLastLevelWithoutHalfHp: () => LevelStage;
    GetLevel: () => Level;
    GetNearestPlayer: (position: Vector) => EntityPlayer;
    GetNumEncounteredBosses: () => int;
    GetNumPlayers: () => int;

    /** @deprecated Use the `Isaac.GetPlayer` method instead. */
    GetPlayer: (index: int) => EntityPlayer | undefined;

    GetRandomPlayer: (position: Vector, radius: float) => EntityPlayer;
    GetRoom: () => Room;
    GetScreenShakeCountdown: () => Readonly<int>;
    GetSeeds: () => Seeds;
    GetStagesWithoutDamage: () => int;
    GetStagesWithoutHeartsPicked: () => int;
    GetStateFlag: (gameStateFlag: GameStateFlag) => boolean;
    GetTargetDarkness: () => float;
    GetTreasureRoomVisitCount: () => int;
    GetVictoryLap: () => int;
    HasEncounteredBoss: (entityType: EntityType, variant: int) => boolean;
    HasHallucination: () => int;
    IsGreedMode: () => boolean;

    /**
     * Returns true if the game is paused or the console is open or a room transition animation is
     * occurring.
     */
    IsPaused: () => boolean;

    MakeShockwave: (
      position: Vector,
      amplitude: float,
      speed: float,
      duration: int,
    ) => void;

    MoveToRandomRoom: (
      includeIAmErrorRoom: boolean,
      seed: Seed,
      player: EntityPlayer,
    ) => void;

    NextVictoryLap: () => void;
    Render: () => void;
    RerollEnemy: (entity: Entity) => boolean;
    RerollLevelCollectibles: () => void;
    RerollLevelPickups: (seed: Seed) => void;
    SetLastDevilRoomStage: (levelStage: LevelStage) => void;
    SetLastLevelWithDamage: (levelStage: LevelStage) => void;
    SetLastLevelWithoutHalfHp: (levelStage: LevelStage) => void;
    SetStateFlag: (gameStateFlag: GameStateFlag, value: boolean) => void;
    ShakeScreen: (timeout: int) => void;
    ShowFortune: () => void;

    /**
     * @param frameCount
     * @param backdrop Default is a random backdrop, similar to what happens after using the
     *                 Delirious collectible.
     */
    ShowHallucination: (frameCount: int, backdropType?: BackdropType) => void;

    ShowRule: () => void;

    /**
     * Spawns a new entity with a specified seed. For spawning entities using a random seed, then
     * the `Isaac.Spawn` method should be used instead.
     *
     * In most cases, you should not be using this method directly, and instead be using the set of
     * `spawn` functions from the standard library. For example:
     *
     * - `spawn` - Will spawn anything with a convenient API.
     * - `spawnWithSeed - Will spawn anything with an API that makes it easy to specify a seed.`
     * - `spawnPickup` - Will spawn a pickup with a convenient API.
     * - `spawnPickupWithSeed - Will spawn a pickup with an API that makes it easy to specify a
     *   seed.`
     * - `spawnKey` - Will spawn a key with a convenient API.
     * - etc.
     *
     * @param entityType
     * @param variant
     * @param position
     * @param velocity The initial velocity of the entity. In most cases, you will want to pass the
     *                 `VectorZero` constant so that there is no initial velocity.
     * @param spawner Each entity stores a reference to the entity that spawned it in the
     *                `SpawnerEntity` field. (If the entity was not spawned by anything in
     *                particular, `SpawnerEntity` will be equal to undefined.) Thus, when spawning a
     *                new entity, you can specify what the `SpawnerEntity` will be by using this
     *                argument. Note that this argument is not optional. If you do not want the new
     *                entity to have a spawner, you must explicitly pass undefined.
     * @param subType
     * @param seed The integer seed for the new entity. This must be between 1 and and 4294967295.
     *             See the `Seed` type declaration for more details. (This value will typically come
     *             from an RNG object or another entity's `InitSeed`, which is why it is typed as a
     *             `Seed` instead of an `int`.)
     */
    Spawn: (
      entityType: EntityType,
      variant: int,
      position: Vector,
      velocity: Vector,
      spawner: Entity | undefined,
      subType: int,
      seed: Seed,
    ) => Entity;

    // SpawnEntityDesc is not implemented.

    /**
     * @param position
     * @param effectVariant
     * @param numParticles
     * @param speed
     * @param color Default is `Color.Default`.
     * @param height Default is 100000.
     * @param subType Default is 0.
     */
    SpawnParticles: (
      position: Vector,
      effectVariant: EffectVariant,
      numParticles: int,
      speed: float,
      color?: Color,
      height?: float,
      subType?: int,
    ) => void;

    /**
     * You have to set Level.LeaveDoor to an appropriate value before using this function.
     * Otherwise, you will be sent to the wrong room. (For teleports, set it to -1.)
     *
     * @param roomGridIndex The room grid index of the destination room.
     * @param direction
     * @param roomTransition Default is `RoomTransitionAnim.WALK`.
     * @param player Default is undefined.
     * @param dimension Default is `Dimension.CURRENT`.
     */
    StartRoomTransition: (
      roomGridIndex: int | GridRoom,
      direction: Direction,
      roomTransitionAnim?: RoomTransitionAnim,
      player?: EntityPlayer,
      dimension?: Dimension,
    ) => void;

    /** If the `player` argument is not provided, the game will crash. */
    StartStageTransition: (
      sameStage: boolean,
      stageTransition: StageTransition,
      player: EntityPlayer,
    ) => void;

    Update: () => void;

    /**
     * @param position
     * @param force Default is 10.
     * @param radius Default is 250.
     */
    UpdateStrangeAttractor: (
      position: Vector,
      force?: float,
      radius?: float,
    ) => void;

    BlueWombParTime: int;
    BossRushParTime: int;
    Challenge: Challenge;
    readonly Difficulty: Difficulty;
    ScreenShakeOffset: Readonly<Vector>;
    TimeCounter: int;
  }
}

----
types\classes\GridEntity.d.ts
import type { GridCollisionClass } from "../../enums/GridCollisionClass";
import type { GridEntityType } from "../../enums/GridEntityType";

declare global {
  interface GridEntity extends IsaacAPIClass {
    Destroy: (immediate: boolean) => boolean;
    GetGridIndex: () => int;

    /** The RNG returned is a reference (i.e. not a copy). */
    GetRNG: () => RNG;

    GetSaveState: () => GridEntityDesc;

    /** The `Sprite` returned is a reference (i.e. not a copy). */
    GetSprite: () => Sprite;

    GetType: () => GridEntityType;
    GetVariant: () => int;
    Hurt: (damage: int) => boolean;
    Init: (seed: Seed) => void;
    PostInit: () => void;
    Render: (offset: Vector) => void;

    /**
     * Note that changing the type of a grid entity does not update the corresponding sprite. Use
     * the `setGridEntityType` helper function to work around this.
     *
     * Setting the new type to `GridEntityType.NULL` (0) will have no effect.
     */
    SetType: (gridEntityType: GridEntityType) => void;

    SetVariant: (variant: int) => void;
    ToDoor: () => GridEntityDoor | undefined;
    ToPit: () => GridEntityPit | undefined;
    ToPoop: () => GridEntityPoop | undefined;
    ToPressurePlate: () => GridEntityPressurePlate | undefined;
    ToRock: () => GridEntityRock | undefined;
    ToSpikes: () => GridEntitySpikes | undefined;
    ToTNT: () => GridEntityTNT | undefined;
    Update: () => void;

    CollisionClass: GridCollisionClass;

    // Desc is not implemented since it is deprecated by the `GridEntity.GetSaveState` method.

    /**
     * The attributes of this field are technically not read-only, but changing them seems to have
     * no effect. (Printing out the values after changing them reports that they were not changed.)
     */
    readonly Position: Readonly<Vector>;

    State: int;
    VarData: int;
  }
}

----
types\classes\GridEntityDesc.d.ts
import type { GridEntityType } from "../../enums/GridEntityType";

declare global {
  interface GridEntityDesc extends IsaacAPIClass {
    Initialized: boolean;
    SpawnCount: int;
    SpawnSeed: Seed;
    State: int;
    Type: GridEntityType;
    VarData: int;
    VariableSeed: Seed;
    Variant: int;
  }
}

----
types\classes\GridEntityDoor.d.ts
import type { DoorState } from "../../enums/collections/gridEntityStates";
import type { DoorVariant } from "../../enums/collections/gridEntityVariants";
import type { Direction } from "../../enums/Direction";
import type { DoorSlot } from "../../enums/DoorSlot";
import type { RoomType } from "../../enums/RoomType";

declare global {
  /**
   * Grid entities of type `GridEntityType.DOOR` (16) can be converted to this class with the
   * `GridEntity.ToDoor` method.
   */
  interface GridEntityDoor extends GridEntity {
    Bar: () => void;
    CanBlowOpen: () => boolean;
    Close: (force: boolean) => void;
    GetSpriteOffset: () => Readonly<Vector>;
    GetVariant: () => DoorVariant;
    IsBusted: () => boolean;
    IsKeyFamiliarTarget: () => boolean;
    IsLocked: () => boolean;
    IsOpen: () => boolean;
    IsRoomType: (roomType: RoomType) => boolean;
    IsTargetRoomArcade: () => boolean;
    Open: () => void;
    SetLocked: (locked: boolean) => void;
    SetRoomTypes: (currentRoomType: RoomType, targetRoomType: RoomType) => void;
    SpawnDust: () => void;
    TryBlowOpen: (fromExplosion: boolean, source: Entity) => boolean;
    TryUnlock: (player: EntityPlayer, force: boolean) => boolean;

    Busted: boolean;
    CloseAnimation: string;
    CurrentRoomType: RoomType;
    Direction: Direction;

    /**
     * Some doors use an additional sprite that is placed on top of the door (e.g. bars, chains,
     * wooden boards, etc.).
     */
    ExtraSprite: Sprite;

    /**
     * Toggles the visibility of the extra sprite. Some doors use an additional sprite that is
     * placed on top of the door (e.g. bars, chains, wooden boards, etc.).
     */
    ExtraVisible: boolean;

    LockedAnimation: string;
    OpenAnimation: string;
    OpenLockedAnimation: string;

    // - PreviousState is not implemented since it returns useless userdata.
    // - PreviousVariant is not implemented since it returns useless userdata.

    Slot: DoorSlot;
    State: DoorState;

    /** This corresponds to the room grid index. */
    TargetRoomIndex: int;

    TargetRoomType: RoomType;
  }
}

----
types\classes\GridEntityPit.d.ts
import type { PitState } from "../../enums/collections/gridEntityStates";
import type { PitVariant } from "../../enums/collections/gridEntityVariants";

declare global {
  /**
   * Grid entities of type `GridEntityType.PIT` (7) can be converted to this class with the
   * `GridEntity.ToPit` method.
   */
  interface GridEntityPit extends GridEntity {
    GetVariant: () => PitVariant;
    MakeBridge: (bridgeSource?: GridEntity) => void;
    SetLadder: (value: boolean) => void;
    UpdateCollision: () => void;

    HasLadder: boolean;
    State: PitState;
  }
}

----
types\classes\GridEntityPoop.d.ts
import type { PoopState } from "../../enums/collections/gridEntityStates";
import type { PoopGridEntityVariant } from "../../enums/collections/gridEntityVariants";

declare global {
  /**
   * Grid entities of type `GridEntityType.POOP` (14) can be converted to this class with the
   * `GridEntity.ToPoop` method.
   */
  interface GridEntityPoop extends GridEntity {
    GetVariant: () => PoopGridEntityVariant;
    ReduceSpawnRate: () => void;
    RespawnRedPoop: () => void;

    ReducedSpawnRate: boolean;
    ReviveTimer: int;
    State: PoopState;
    StateAnimation: string;
    UnderPlayer: boolean;
  }
}

----
types\classes\GridEntityPressurePlate.d.ts
import type { PressurePlateState } from "../../enums/collections/gridEntityStates";
import type { PressurePlateVariant } from "../../enums/collections/gridEntityVariants";

declare global {
  /**
   * Grid entities of type `GridEntityType.PRESSURE_PLATE` (20) can be converted to this class with
   * the `GridEntity.ToPressurePlate` method.
   */
  interface GridEntityPressurePlate extends GridEntity {
    GetVariant: () => PressurePlateVariant;
    Reward: () => void;

    GreedModeRNG: RNG;
    NextGreedAnimation: string;
    State: PressurePlateState;
    TimerPlate: Sprite;
  }
}

----
types\classes\GridEntityRock.d.ts
import type { RockState } from "../../enums/collections/gridEntityStates";

declare global {
  /**
   * Grid entities of the following types can be converted to this class with the
   * `GridEntity.ToRock` method:
   *
   * - `GridEntityType.ROCK` (2)
   * - `GridEntityType.BLOCK` (3)
   * - `GridEntityType.ROCK_TINTED` (4)
   * - `GridEntityType.ROCK_BOMB` (5)
   * - `GridEntityType.ROCK_ALT` (6)
   * - `GridEntityType.ROCK_SUPER_SPECIAL` (22)
   * - `GridEntityType.PILLAR` (24)
   * - `GridEntityType.ROCK_SPIKED` (25)
   * - `GridEntityType.ROCK_ALT_2` (26)
   * - `GridEntityType.ROCK_GOLD` (27)
   */
  interface GridEntityRock extends GridEntity {
    GetBigRockFrame: () => int;
    GetRubbleAnim: () => string;

    // There is no `GridEntityRock.GetVariant` method because `RockVariant` only applies to
    // `GridEntityType.ROCK`, and grid entity types other than `GridEntityRock.GetVariant` can be
    // converted to the `GridEntityRock` class. See the `GridEntityType` enum for more details.

    SetBigRockFrame: (frame: int) => void;
    UpdateAnimFrame: () => void;

    Anim: string;
    FrameCnt: int;
    RubbleAnim: string;
    State: RockState;
  }
}

----
types\classes\GridEntitySpikes.d.ts
import type { SpikesOnOffState } from "../../enums/collections/gridEntityStates";

declare global {
  /**
   * Grid entities of type `GridEntityType.SPIKES` (8) and `GridEntityType.SPIKES_ON_OFF` (9) can be
   * converted to this class with the `GridEntity.ToSpikes` method.
   */
  interface GridEntitySpikes extends GridEntity {
    // There is no `GridEntitySpikes.GetVariant` method because there is no corresponding
    // `SpikesVariant`. Furthermore, multiple grid entity types can be `GridEntitySpikes` class.

    /** `State` only applies to on/off spikes. */
    State: SpikesOnOffState;

    Timeout: int;
  }
}

----
types\classes\GridEntityTNT.d.ts
import type { TNTState } from "../../enums/collections/gridEntityStates";

declare global {
  /**
   * Grid entities of type `GridEntityType.TNT` (12) can be converted to this class with the
   * `GridEntity.ToTNT` method.
   */
  interface GridEntityTNT extends GridEntity {
    // There is no `GridEntityTNT.GetVariant` method because there is no corresponding `TNTVariant`.

    FrameCnt: int;
    State: TNTState;
  }
}

----
types\classes\HUD.d.ts
import type { ActiveSlot } from "../../enums/ActiveSlot";

declare global {
  interface HUD extends IsaacAPIClass {
    /**
     * Causes the charge bar of the active item in the specified slot to blink as if it had gained
     * charges.
     *
     * @param player
     * @param slot Default is `ActiveSlot.SLOT_PRIMARY`.
     */
    FlashChargeBar: (player: EntityPlayer, slot?: ActiveSlot) => void;

    /**
     * Forces the specified active item slot to update. This might be useful for functions that
     * modify an active item slot without directly giving or removing items.
     *
     * @param player
     * @param slot Default is `ActiveSlot.SLOT_PRIMARY`.
     */
    InvalidateActiveItem: (player: EntityPlayer, slot?: ActiveSlot) => void;

    /**
     * Forces the crafting output from Bag of Crafting to update.
     *
     * @param player
     */
    InvalidateCraftingItem: (player: EntityPlayer) => void;

    IsVisible: () => boolean;
    PostUpdate: () => void;
    Render: () => void;
    SetVisible: (visible: boolean) => void;

    /**
     * Accepts an array of up to 32 strings, where each string is a line of text.
     *
     * Passing more than 7 lines will result in them not being displayed properly, since the fortune
     * paper does not dynamically stretch to accommodate the extra lines.
     *
     * @param text
     */
    ShowFortuneText: (...text: readonly string[]) => void;

    /**
     * Shows the pickup text for the specified item as if it was picked up by the specified player.
     * The overloaded method supports showing custom pickup text.
     */
    ShowItemText: ((player: EntityPlayer, item: ItemConfigItem) => void) &
      ((name: string, description?: string, paper?: boolean) => void);

    Update: () => void;
  }
}

----
types\classes\Input.d.ts
import type { ButtonAction } from "../../enums/ButtonAction";
import type { ControllerIndex } from "../../enums/ControllerIndex";
import type { Keyboard } from "../../enums/Keyboard";
import type { Mouse } from "../../enums/Mouse";

declare global {
  /**
   * The `Input` class contains a collection of methods having to do with detecting player input.
   *
   * `Input` is technically not an Isaac API class; it has a type of `table` (instead of
   * `userdata`).
   *
   * @noSelf
   */
  namespace Input {
    function GetActionValue(
      buttonAction: ButtonAction,
      controllerIndex: ControllerIndex,
    ): float;

    function GetButtonValue(
      keyboard: Keyboard,
      controllerIndex: ControllerIndex,
    ): float;

    function GetMousePosition(gameCoords: boolean): Vector;

    function IsActionPressed(
      buttonAction: ButtonAction,
      controllerIndex: ControllerIndex,
    ): boolean;

    function IsActionTriggered(
      buttonAction: ButtonAction,
      controllerIndex: ControllerIndex,
    ): boolean;

    function IsButtonPressed(
      keyboard: Keyboard,
      controllerIndex: ControllerIndex,
    ): boolean;

    function IsButtonTriggered(
      keyboard: Keyboard,
      controllerIndex: ControllerIndex,
    ): boolean;

    function IsMouseBtnPressed(mouse: Mouse): boolean;
  }
}

----
types\classes\Isaac.d.ts
import type { CallbackPriority } from "../../enums/CallbackPriority";
import type { Challenge } from "../../enums/Challenge";
import type {
  CardType,
  CollectibleType,
  PillColor,
  PlayerType,
  TrinketType,
} from "../../enums/collections/subTypes";
import type { EntityType } from "../../enums/EntityType";
import type { EntityPartition } from "../../enums/flags/EntityPartition";
import type { GridEntityType } from "../../enums/GridEntityType";
import type { Music } from "../../enums/Music";
import type { NullItemID } from "../../enums/NullItemID";
import type { PillEffect } from "../../enums/PillEffect";
import type { SoundEffect } from "../../enums/SoundEffect";

declare global {
  /**
   * The `Isaac` class contains a collection of miscellaneous general-purpose methods.
   *
   * `Isaac` is technically not an Isaac API class; it has a type of `table` (instead of
   * `userdata`).
   *
   * @noSelf
   */
  namespace Isaac {
    /** @deprecated Use the `Mod.AddCallback` method instead. */
    function AddCallback<T extends keyof AddCallbackParameters | string>(
      mod: Mod,
      modCallback: T,
      ...args: T extends keyof AddCallbackParameters
        ? AddCallbackParameters[T]
        : unknown[]
    ): void;

    function AddPillEffectToPool(pillEffect: PillEffect): PillColor;

    /** @deprecated Use the `Mod.AddPriorityCallback` method instead. */
    function AddPriorityCallback<
      T extends keyof AddCallbackParameters | string,
    >(
      mod: Mod,
      modCallback: T,
      priority: CallbackPriority | int,
      ...args: T extends keyof AddCallbackParameters
        ? AddCallbackParameters[T]
        : unknown[]
    ): void;

    /**
     * Prints a string to the debug console. (You can open the debug console with the tilde key.)
     *
     * The Lua global function of `print` is mapped to this method, so it is recommended to use
     * `print` instead of invoking this method directly.
     *
     * Note that unlike `print`, if you invoke `Isaac.ConsoleOutput` directly, the displayed message
     * will not contain a trailing newline.
     */
    function ConsoleOutput(text: string): void;

    /** Returns the number of bosses in the current room. */
    function CountBosses(): int;

    /** Returns the number of enemies in the current room. */
    function CountEnemies(): int;

    /**
     * Returns the number of entities in the current room that fulfill the specified requirements.
     *
     * @param spawner Pass undefined if you want to match entities that were not spawned by anything
     *                in particular.
     * @param entityType Required. (Specifying 0 or -1 for this parameter will always make this
     *                   method return 0.)
     * @param variant Specifying -1 will return all variants. Default is -1.
     * @param subType Specifying -1 will return all subtypes. Default is -1.
     */
    function CountEntities(
      spawner: Entity | undefined,
      entityType: EntityType,
      variant?: int,
      subType?: int,
    ): int;

    /**
     * Prints a string to the "log.txt" file. By default, the file is located at:
     *
     * ```text
     * C:\Users\%USERNAME%\Documents\My Games\Binding of Isaac Repentance\log.txt
     * ```
     */
    function DebugString(msg: string): Mod;

    /** Executes a command on the debug console. */
    function ExecuteCommand(command: string): string;

    /** Spawns an explosion at the specified location. */
    function Explode(
      position: Vector,
      source: Entity | undefined,
      damage: float,
    ): void;

    /**
     * Returns entities based on the type, variant, and subtype.
     *
     * If an entity has `EntityFlag.FLAG_NO_QUERY` then it will be excluded from the results. If you
     * need to get an entity with that flag then you should use `Isaac.GetRoomEntities` method
     * instead.
     *
     * @param entityType The entity type to match.
     * @param variant The variant to match. If -1, then everything is included. Default is -1.
     * @param subType If sub-type to match. If -1, then everything is included. Default is -1.
     * @param cache Whether to get fresh results. If you need to call this method with the same
     *              arguments two or more times on the same frame, then you should use the cache for
     *              a performance boost. Default is false.
     * @param ignoreFriendly Default is false.
     */
    function FindByType(
      entityType: EntityType,
      variant?: int,
      subType?: int,
      cache?: boolean,
      ignoreFriendly?: boolean,
    ): Entity[];

    /**
     * Returns the entities that are located in a circle around a specified position. The returned
     * entities are not sorted based on distance; they are returned in the order that they were
     * loaded.
     *
     * Beware:
     * - This function does not work in the `POST_NEW_ROOM` callback.
     * - It excludes effects, even when the effect partition is selected.
     * - It can exclude dead enemies.
     *
     * It is recommended to never use this function and instead use `Isaac.FindByType` or
     * `Isaac.GetRoomEntities`.
     *
     * @param position
     * @param radius
     * @param partitions Default is 0xFFFFFFFF.
     */
    function FindInRadius(
      position: Vector,
      radius: float,
      partitions?: BitFlags<EntityPartition> | EntityPartition,
    ): Entity[];

    function GetBuiltInCallbackState(
      modCallback: keyof AddCallbackParameters | string,
    ): boolean;

    function GetCallbacks<T extends keyof AddCallbackParameters | string>(
      modCallback: T,
      createIfMissing: boolean,
    ): Array<ModDescription<T>>;

    /**
     * This method is meant to be used when creating local enums that represent custom modded cards.
     * (We have to retrieve the sub-type of a custom card at run-time, because it is dynamically
     * calculated based on the current mods that the end-user currently has enabled.)
     *
     * It is conventional to name your local enum `CardTypeCustom` (because that corresponds to the
     * vanilla enum of `CardType`).
     *
     * Never use this method to get the sub-type of a vanilla card; use the `CardType` enum instead.
     *
     * Returns -1 if no card with the specified name was found.
     */
    function GetCardIdByName(name: string): CardType;

    /**
     * Returns the ID of the current challenge, like `Challenge.PITCH_BLACK` for the "Pitch Black"
     * challenge.
     *
     * Returns `Challenge.NULL` (0) if the current run is not a challenge.
     */
    function GetChallenge(): Challenge;

    /**
     * This method is meant to be used when creating local enums that represent custom challenges.
     * (We have to retrieve the ID of a custom challenge at run-time, because it is dynamically
     * calculated based on the current mods that the end-user currently has enabled.)
     *
     * It is conventional to name your local enum `ChallengeCustom` (because that corresponds to the
     * vanilla enum of `Challenge`).
     *
     * Never use this method to get the ID of a vanilla challenge; use the `Challenges` enum
     * instead.
     *
     * Returns -1 if the specified challenge name does not exist.
     */
    function GetChallengeIdByName(name: string): Challenge;

    /**
     * This method is meant to be used when creating local enums that represent custom costumes. (We
     * have to retrieve the ID of a custom costume at run-time, because it is dynamically calculated
     * based on the current mods that the end-user currently has enabled.)
     *
     * It is conventional to name your local enum `NullItemIDCustom` (because that corresponds to
     * the vanilla enum of `NullItemID`).
     *
     * Never use this method to get the ID of a vanilla costume; use the `NullItemID` enum instead.
     *
     * Returns -1 if no costume with the specified name was found.
     */
    function GetCostumeIdByPath(path: string): NullItemID;

    /**
     * This method is meant to be used when creating local enums that represent custom curses. (We
     * have to retrieve the ID of a custom curse at run-time, because it is dynamically calculated
     * based on the current mods that the end-user currently has enabled.)
     *
     * It is conventional to name your local enum `LevelCurseCustom` (because this corresponds to
     * the vanilla enum of `LevelCurse`).
     *
     * Never use this method to get the ID of a vanilla curse; use the `LevelCurse` enum instead.
     *
     * Returns -1 if no curse with the specified name was found.
     *
     * Note that this does not return a `LevelCurse` bit flag; it returns an integer that
     * corresponds to the ID in the "curses.xml" file. For example, the final vanilla curse is
     * "Curse of the Giant", which has an ID of 8. Thus, the first modded curse will always have an
     * ID of 9. This integer must be converted to a `LevelCurse` bit flag in order to be used with
     * the various API functions. For this reason, it is recommended to use the `getCurseIDByName`
     * helper function instead, which will return a proper `LevelCurse` bit flag.
     */
    function GetCurseIdByName(name: string): int;

    /**
     * This method is meant to be used when creating local enums that represent custom modded
     * entities. (Sometimes, entity types are automatically generated by the game and are not known
     * until run-time. Other times, it is practical to retrieve the entity type at run-time instead
     * of hard-coding it in two different places in your code-base.)
     *
     * It is conventional to name your local enum `EntityTypeCustom` (because this corresponds to
     * the vanilla enum of `EntityType`).
     *
     * Never use this method to get the entity type of a vanilla entity; use the `EntityType` enum
     * instead.
     *
     * Returns `EntityType.NULL` (0) if no entity with the specified name was found.
     */
    function GetEntityTypeByName(name: string): EntityType;

    /**
     * This method is meant to be used when creating local enums that represent custom modded
     * entities. (Sometimes, entity variants are automatically generated by the game and are not
     * known until run-time. Other times, it is practical to retrieve the entity variant at run-time
     * instead of hard-coding it in two different places in your code-base.)
     *
     * It is conventional to name your local enum `FooVariant` for a custom entity called "Foo".
     * (This corresponds to the style of the vanilla variant enums like `GaperVariant`.)
     *
     * Never use this method to get the entity type of a vanilla entity; use the corresponding
     * variant enum instead, like e.g. `GaperVariant`.
     *
     * Returns -1 if no entity with the specified name was found.
     */
    function GetEntityVariantByName(name: string): int;

    /**
     * Returns the amount of render frames that have passed since the game was open.
     *
     * - Render frames will continue to increase when the game is paused and when in the main menu.
     * - 60 render frames equals 1 second.
     * - The render frame count is different from the count returned from the `Game.GetFrameCount`
     *   method; that returns the run frame count.
     * - Game frames and render frames are synchronized such two render frames will always
     *   correspond to one game frame, and the first render frame in the pair will always be odd.
     */
    function GetFrameCount(): int;

    function GetFreeNearPosition(position: Vector, step: float): Vector;

    /** This is the only way to access the `ItemConfig` class. */
    function GetItemConfig(): ItemConfig;

    /**
     * This method is meant to be used when creating local enums that represent custom modded
     * collectibles. (We have to retrieve the sub-type of a custom collectible at run-time, because
     * it is dynamically calculated based on the current mods that the end-user currently has
     * enabled.)
     *
     * It is conventional to name your local enum `CollectibleTypeCustom` (because this corresponds
     * to the vanilla enum of `CollectibleType`).
     *
     * Never use this method to get the sub-type of a vanilla collectible; use the `CollectibleType`
     * enum instead.
     *
     * Returns -1 if no collectible with the specified name was found.
     *
     * Note that this method has a bugged name; it should actually be called
     * `GetCollectibleIdByName`.
     */
    function GetItemIdByName(name: string): CollectibleType;

    /**
     * This method is meant to be used when creating local enums that represent custom modded music.
     * (We have to retrieve the ID of custom music at run-time, because it is dynamically calculated
     * based on the current mods that the end-user currently has enabled.)
     *
     * It is conventional to name your local enum `MusicCustom` (because this corresponds to the
     * vanilla enum of `Music`).
     *
     * Never use this method to get the sub-type of vanilla music; use the `Music` enum instead.
     *
     * Returns -1 if no music with the specified name was found.
     */
    function GetMusicIdByName(name: string): Music;

    /**
     * This method is meant to be used when creating local enums that represent custom modded pills.
     * (We have to retrieve the pill effect ID of the custom pill at run-time, because it is
     * dynamically calculated based on the current mods that the end-user currently has enabled.)
     *
     * It is conventional to name your local enum `PillEffectCustom` (because this corresponds to
     * the vanilla enum of `PillEffect`).
     *
     * Never use this method to get the pill effect ID of a vanilla pill; use the `PillEffect` enum
     * instead.
     *
     * Returns -1 if no pill with the specified name was found.
     */
    function GetPillEffectByName(name: string): PillEffect;

    /**
     * Returns the `EntityPlayer` that matches the provided player ID. Player IDs start at 0 and
     * increment upwards. For example, when playing as Jacob & Esau, Jacob will have a player ID of
     * 0 and Esau will have a player ID of 1.
     *
     * If an invalid player ID is passed (such as -20 or 20), instead of throwing an error, the
     * function will assume a player index of 0.
     *
     * Even though the function is defined as always returning an `EntityPlayer` class, it can
     * actually return undefined if it is called before any player is initialized (e.g. in the main
     * menu). Thus, beware of this case.
     *
     * @param playerID Default is 0.
     */
    function GetPlayer(playerID?: int): EntityPlayer;

    /**
     * This method is meant to be used when creating local enums that represent custom modded
     * characters. (We have to retrieve the sub-type of the custom character at run-time, because it
     * is dynamically calculated based on the current mods that the end-user currently has enabled.)
     *
     * It is conventional to name your local enum `PlayerTypeCustom` (because this corresponds to
     * the vanilla enum of `PlayerType`).
     *
     * Never use this method to get the sub-type of a vanilla character; use the `PlayerType` enum
     * instead.
     *
     * Returns -1 if the specified character does not exist.
     *
     * @param name
     * @param tainted Default is false. This only works with modded characters. For example,
     *                `Isaac.GetPlayerTypeByName("Isaac", true)` will return -1.
     */
    function GetPlayerTypeByName(name: string, tainted?: boolean): PlayerType;

    /**
     * Returns a random position in the current room in world coordinates (not render coordinates).
     */
    function GetRandomPosition(): Vector;

    /**
     * This function is very expensive and is the main cause of lag in mods across the Isaac
     * ecosystem. Be careful about calling this multiple times per frame.
     *
     * If possible, use the `Isaac.FindByType` method or the `getEntities` helper function instead
     * of using this method.
     */
    function GetRoomEntities(): Entity[];

    function GetScreenHeight(): int;

    /**
     * Matches the value of "MaxRenderScale" in the "options.ini" file. If a player sets this to a
     * float, the game will floor it.
     */
    function GetScreenPointScale(): Vector;

    function GetScreenWidth(): int;

    /**
     * This method is meant to be used when creating local enums that represent custom sound
     * effects. (We have to retrieve the ID of the sound effect at run-time, because it is
     * dynamically calculated based on the current mods that the end-user currently has enabled.)
     *
     * It is conventional to name your local enum `SoundEffectCustom` (because this corresponds to
     * the vanilla enum of `SoundEffect`).
     *
     * Never use this method to get the ID of a vanilla sound effect; use the `SoundEffect` enum
     * instead.
     *
     * Returns -1 if no sound with the specified name was found.
     */
    function GetSoundIdByName(name: string): SoundEffect;

    /**
     * Returns the width of the given string in pixels based on the "terminus8" font. (This is the
     * same font used in the `Isaac.RenderText` method.)
     */
    function GetTextWidth(str: string): int;

    /**
     * Returns the current time in milliseconds since the computer's operating system was started.
     *
     * This is useful for measuring how much real time has passed independent of how many frames
     * have passed. (Frames are not a very good indicator of how much time has passed, because the
     * game locks up to load new data on every level transition and room transition.)
     *
     * For example, you could use this to implement an on-screen timer based on real-time, or to
     * benchmark the performance impact of one function over another.
     */
    function GetTime(): int;

    /**
     * This method is meant to be used when creating local enums that represent custom modded
     * trinkets. (We have to retrieve the sub-type of a custom trinket at run-time, because it is
     * dynamically calculated based on the current mods that the end-user currently has enabled.)
     *
     * It is conventional to name your local enum `TrinketTypeCustom` (because this corresponds to
     * the vanilla enum of `TrinketType`).
     *
     * Never use this method to get the sub-type of a vanilla trinket; use the `TrinketType` enum
     * instead.
     *
     * Returns -1 if the specified trinket was not found.
     */
    function GetTrinketIdByName(name: string): TrinketType;

    /**
     * Used to spawn a grid entity (e.g. a rock or a pot). Grid entities are different than normal
     * entities, as they follow different rules and are always aligned with the grid.
     *
     * Normally, this function will always return a `GridEntity`, even if the spawned grid entity
     * will not actually be placed. However, in very rare cases, it can return undefined.
     *
     * Note that in the docs, a 4th "forced" argument is listed, but this is omitted in the function
     * definition since it is bugged and has no effect.
     *
     * @param gridEntityType
     * @param variant
     * @param position
     */
    function GridSpawn(
      gridEntityType: GridEntityType,
      variant: int,
      position: Vector,
    ): GridEntity | undefined;

    /**
     * Returns true if your mod has data stored from the `Isaac.SaveModData` method.
     *
     * (This corresponds to "save#.dat" files existing in the mod's save data folder.)
     */
    function HasModData(mod: Mod): boolean;

    /**
     * Returns a string that was stored in a "save#.dat" file from the `Isaac.SaveModData` method.
     * If there is no "save#.dat" file for your mod, this function will return an empty string.
     * There are 3 "save#.dat" files, one per save slot. The number will be determined automatically
     * by the game. In Repentance, these files are located in the "data" folder next to the "mods"
     * folder.
     */
    function LoadModData(mod: Mod): string;

    /** @deprecated Use the global `RegisterMod` global function instead. */
    function RegisterMod(mod: Mod, name: string, APIVersion: int): void;

    /** @deprecated Use the `Mod.RemoveCallback` method instead. */
    function RemoveCallback(
      mod: Mod,
      modCallback: keyof AddCallbackParameters | string,
      callbackFn: () => void,
    ): void;

    /**
     * Will delete a "save#.dat" file, if it exists. For more information, see the
     * `Isaac.SaveModData` method.
     */
    function RemoveModData(mod: Mod): void;

    /**
     * @param text The text to render on the screen.
     * @param x Between 0 and around 500. (The max depends on the user's screen size.)
     * @param y Between 0 and around 350. (The max depends on the user's screen size.)
     * @param scaleX Between 0 and 1.
     * @param scaleY Between 0 and 1.
     * @param r Between 0 and 1.
     * @param g Between 0 and 1.
     * @param b Between 0 and 1.
     * @param a Between 0 and 1.
     */
    function RenderScaledText(
      text: string,
      x: float,
      y: float,
      scaleX: float,
      scaleY: float,
      r: float,
      g: float,
      b: float,
      a: float,
    ): void;

    /**
     * @param text The text to render on the screen.
     * @param x Between 0 and around 500. (The max depends on the user's screen size.)
     * @param y Between 0 and around 350. (The max depends on the user's screen size.)
     * @param r Between 0 and 1.
     * @param g Between 0 and 1.
     * @param b Between 0 and 1.
     * @param a Between 0 and 1.
     */
    function RenderText(
      text: string,
      x: float,
      y: float,
      r: float,
      g: float,
      b: float,
      a: float,
    ): void;

    /** Used to fire a custom callback. This was introduced in Repentance patch v1.7.9b. */
    function RunCallback(
      modCallback: keyof AddCallbackParameters | string,
    ): void;

    /** Used to fire a custom callback. This was introduced in Repentance patch v1.7.9b. */
    function RunCallbackWithParam(
      modCallback: keyof AddCallbackParameters | string,
      ...optionalArgs: readonly unknown[]
    ): void;

    /**
     * Stores a string in a "save#.dat" file for persistent storage across game invocations.
     *
     * There are 3 "save#.dat" files, one per save slot. The number will be determined automatically
     * by the game. In Repentance, these files are located in the "data" folder next to the "mods"
     * folder.
     */
    function SaveModData(mod: Mod, data: string): void;

    function SetBuiltInCallbackState(
      modCallback: keyof AddCallbackParameters | string,
      state: boolean,
    ): void;

    /**
     * Converts screen coordinates (i.e. window coordinates) into world coordinates (i.e. a `Vector`
     * representing an in-game position in the room).
     */
    function ScreenToWorld(position: Vector): Vector;

    function ScreenToWorldDistance(position: Vector): Vector;

    /**
     * Spawns a new entity with a randomly generated seed. For spawning entities using a specific
     * seed, then the `Game.Spawn` method should be used instead.
     *
     * In most cases, you should not be using this method directly, and instead be using the set of
     * `spawn` functions from the standard library. For example:
     *
     * - `spawn` - Will spawn anything with a convenient API.
     * - `spawnWithSeed - Will spawn anything with an API that makes it easy to specify a seed.`
     * - `spawnPickup` - Will spawn a pickup with a convenient API.
     * - `spawnPickupWithSeed - Will spawn a pickup with an API that makes it easy to specify a
     *   seed.`
     * - `spawnKey` - Will spawn a key with a convenient API.
     * - etc.
     *
     * @param entityType
     * @param variant
     * @param subType
     * @param position
     * @param velocity The initial velocity of the entity. In most cases, you will want to pass the
     *                 `VectorZero` constant so that there is no initial velocity.
     * @param spawner Each entity stores a reference to the entity that spawned it in the
     *                `SpawnerEntity` field. (If the entity was not spawned by anything in
     *                particular, `SpawnerEntity` will be equal to undefined.) Thus, when spawning a
     *                new entity, you can specify what the `SpawnerEntity` will be by using this
     *                argument. Note that this argument is not optional. If you do not want the new
     *                entity to have a spawner, you must explicitly pass undefined.
     */
    function Spawn(
      entityType: EntityType,
      variant: int,
      subType: int,
      position: Vector,
      velocity: Vector,
      spawner: Entity | undefined,
    ): Entity;

    /**
     * Converts a game Vector (i.e. `entity.Position`) to a render Vector used for drawing sprites
     * and text to the screen at fixed positions.
     *
     * For almost all cases, you will want to use the `Isaac.WorldToScreen` method instead, since
     * this will result in non-standard values for non-1x1 rooms.
     */
    function WorldToRenderPosition(position: Vector): Vector;

    /**
     * Converts a game Vector (i.e. `entity.Position`) to a screen Vector used for drawing sprites
     * and text next to an entity.
     *
     * For almost all cases, you will want to use this instead of the `Isaac.WorldToRenderPosition`
     * method since it works properly in non-1x1 rooms.
     */
    function WorldToScreen(position: Vector): Vector;

    function WorldToScreenDistance(position: Vector): Vector;
  }
}

----
types\classes\ItemConfig.d.ts
import type {
  CardType,
  CollectibleType,
  TrinketType,
} from "../../enums/collections/subTypes";
import type { NullItemID } from "../../enums/NullItemID";
import type { PillEffect } from "../../enums/PillEffect";

declare global {
  interface ItemConfig extends IsaacAPIClass {
    /** Returns undefined if the card was not found. */
    GetCard: (cardType: CardType) => Readonly<ItemConfigCard> | undefined;

    GetCards: () => Readonly<CardConfigList>;

    /** Returns undefined if the collectible type was not found. */
    GetCollectible: (
      collectibleType: CollectibleType,
    ) => Readonly<ItemConfigItemCollectible> | undefined;

    GetCollectibles: () => Readonly<ItemConfigList>;

    /** Returns undefined if the item was not found. */
    GetNullItem: (
      nullItemID: NullItemID,
    ) => Readonly<ItemConfigItemNull> | undefined;

    GetNullItems: () => Readonly<ItemConfigList>;

    /** Returns undefined if the pill effect was not found. */
    GetPillEffect: (
      pillEffect: PillEffect,
    ) => Readonly<ItemConfigPillEffect> | undefined;

    GetPillEffects: () => Readonly<PillConfigList>;

    /** Returns undefined if the trinket was not found. */
    GetTrinket: (
      trinketType: TrinketType,
    ) => Readonly<ItemConfigItemTrinket> | undefined;

    GetTrinkets: () => Readonly<ItemConfigList>;

    /**
     * In the "enums.lua" file, the ItemConfig class is extended with many members:
     *
     * - ItemConfig.CHARGE_*
     * - ItemConfig.TAG_*
     * - ItemConfig.CARDTYPE_*
     *
     * In IsaacScript, these are instead implemented as enums, since it is cleaner. See
     * `ItemConfigChargeType`, `ItemConfigTag`, and `ItemConfigCardType` respectively.
     */
  }

  /**
   * The static methods in this class can only be called by the global variable.
   *
   * e.g. `ItemConfig.Config.IsValidCollectible(1)`
   */
  namespace ItemConfig {
    /**
     * @deprecated This method does not work properly for modded items, so it should never be used.
     *             Use the `isValidCollectibleType` helper function instead.
     */
    function IsValidCollectible(collectibleType: CollectibleType): boolean;

    function ShouldAddCostumeOnPickup(): boolean;
  }
}

----
types\classes\ItemConfigCard.d.ts
import type { ItemConfigCardType } from "../../enums/ItemConfigCardType";

declare global {
  interface ItemConfigCard extends IsaacAPIClass {
    IsAvailable: () => boolean;
    IsCard: () => boolean;
    IsRune: () => boolean;

    AchievementID: int;
    AnnouncerDelay: int;
    AnnouncerVoice: int;
    CardType: ItemConfigCardType;
    Description: string;
    GreedModeAllowed: boolean;
    HudAnim: string;
    ID: int;
    MimicCharge: int;
    Name: string;

    /**
     * Corresponds to the "pickup" value in "pocketitems.xml". This determines the visual look of
     * the card when it is dropped on the ground.
     */
    PickupSubtype: int;
  }
}

----
types\classes\ItemConfigCostume.d.ts
declare interface ItemConfigCostume extends IsaacAPIClass {
  Anm2Path: string;
  HasOverlay: boolean;
  HasSkinAlt: boolean;
  ID: int;
  IsFlying: boolean;
  OverwriteColor: boolean;
  Priority: int;
  SkinColor: Color;
}

----
types\classes\ItemConfigItem.d.ts
import type {
  CollectibleType,
  TrinketType,
} from "../../enums/collections/subTypes";
import type { CacheFlag } from "../../enums/flags/CacheFlag";
import type { ItemConfigTag } from "../../enums/flags/ItemConfigTag";
import type { ItemConfigChargeType } from "../../enums/ItemConfigChargeType";
import type { ItemType } from "../../enums/ItemType";
import type { NullItemID } from "../../enums/NullItemID";

declare global {
  interface ItemConfigItem extends IsaacAPIClass {
    /**
     * Used to check if a collectible or trinket has an item tag, such as "offensive" or
     * "monstermanual". These tags can be found in the "items_metadata.xml" file.
     *
     * @param tags The composition of one or more `ItemConfigTag`.
     */
    HasTags: (tags: ItemConfigTag) => boolean;

    IsAvailable: () => boolean;
    IsCollectible: () => this is ItemConfigItemCollectible;
    IsNull: () => this is ItemConfigItemNull;
    IsTrinket: () => this is ItemConfigItemTrinket;

    AchievementID: int;
    AddBlackHearts: int;
    AddBombs: int;
    AddCoins: int;
    AddCostumeOnPickup: boolean;
    AddHearts: int;
    AddKeys: int;
    AddMaxHearts: int;
    AddSoulHearts: int;
    CacheFlags: BitFlags<CacheFlag>;
    ChargeType: ItemConfigChargeType;
    ClearEffectsOnRemove: boolean;
    readonly Costume: Readonly<ItemConfigCostume>;

    /**
     * The item's quality for the Bag of Crafting algorithm. Possible values are -1, 0, 1, 2, 3, and
     * 4. A value of -1 indicates that the item is disabled from being craftable.
     *
     * @see https://bindingofisaacrebirth.fandom.com/wiki/Bag_of_Crafting
     */
    CraftingQuality: -1 | 0 | 1 | 2 | 3 | 4;

    Description: string;
    DevilPrice: int;
    Discharged: boolean;

    /**
     * This field is misnamed. It is not the file name, but rather the full path to the PNG file for
     * this collectible/trinket. For example:
     * gfx/items/collectibles/Collectibles_001_TheSadOnion.png
     */
    GfxFileName: string;

    Hidden: boolean;

    /**
     * If it is a collectible, then this is the `CollectibleType`. If it is a trinket, then this is
     * the `TrinketType`. If it is a null item, then it is the `NullItemID`.
     */
    ID: CollectibleType | TrinketType | NullItemID;

    /**
     * The initial amount of charges that an active collectible has. In most cases, when picking up
     * an active collectible for the first time, it will be fully charged, which corresponds to an
     * `InitCharge` value of -1. However, in some cases, this may be different. For example, Eden's
     * Soul starts without any charges, so it has an `InitCharge` value of 0.
     *
     * `InitCharge` is always equal to -1 for non-active collectibles.
     */
    InitCharge: int;

    MaxCharges: int;
    MaxCooldown: int;
    Name: string;
    PassiveCache: boolean;
    PersistentEffect: boolean;

    /**
     * How good the collectible is considered to be by the game. Possible values are 0, 1, 2, 3, and
     * 4.
     *
     * @see https://bindingofisaacrebirth.fandom.com/wiki/Item_Quality
     */
    Quality: Quality;

    ShopPrice: int;
    Special: boolean;
    Tags: BitFlags<ItemConfigTag>;
    Type: ItemType;
  }

  interface ItemConfigItemCollectible extends ItemConfigItem {
    ID: CollectibleType;
  }

  interface ItemConfigItemTrinket extends ItemConfigItem {
    ID: TrinketType;
  }

  interface ItemConfigItemNull extends ItemConfigItem {
    ID: NullItemID;
  }
}

----
types\classes\ItemConfigList.d.ts
declare interface ItemConfigList extends IsaacAPIClass {
  /**
   * @deprecated This method is bugged and returns useless `userdata`. Use the
   *             `ItemConfig.GetCollectible` method instead.
   */
  Get: (idx: int) => LuaUserdata;

  Size: int;
}

----
types\classes\ItemConfigPillEffect.d.ts
declare interface ItemConfigPillEffect extends IsaacAPIClass {
  IsAvailable: () => boolean;

  AchievementID: int;
  AnnouncerDelay: int;
  AnnouncerVoice: int;
  AnnouncerVoiceSuper: int;

  // EffectClass: int; // Bugged; returns userdata.

  // EffectSubClass: int; // Bugged; returns userdata;

  GreedModeAllowed: boolean;
  ID: int;
  MimicCharge: int;
  Name: string;
}

----
types\classes\ItemPool.d.ts
import type {
  CardType,
  CollectibleType,
  PillColor,
  TrinketType,
} from "../../enums/collections/subTypes";
import type { ItemPoolType } from "../../enums/ItemPoolType";
import type { PillEffect } from "../../enums/PillEffect";
import type { RoomType } from "../../enums/RoomType";

declare global {
  interface ItemPool extends IsaacAPIClass {
    AddBibleUpgrade: (add: int, itemPoolType: ItemPoolType) => void;
    AddRoomBlacklist: (collectibleType: CollectibleType) => void;
    ForceAddPillEffect: (pillEffect: PillEffect) => PillColor;

    GetCard: (
      seed: Seed,
      playing: boolean,
      rune: boolean,
      onlyRunes: boolean,
    ) => CardType;

    /**
     * @param itemPoolType
     * @param decrease Default is false.
     * @param seed Default is `Random()`.
     * @param defaultItem Default is `CollectibleType.NULL`.
     */
    GetCollectible: (
      itemPoolType: ItemPoolType,
      decrease?: boolean,
      seed?: Seed,
      defaultItem?: CollectibleType,
    ) => CollectibleType;

    GetLastPool: () => ItemPoolType;
    GetPill: (seed: Seed) => PillColor;

    /**
     * Will return the pill effect that corresponds to the passed pill color. This will work
     * properly even if the player has not yet identified the pill color (by using one or more pills
     * of that color). It is recommended to always pass the corresponding player because if a player
     * has Lucky Foot, PHD, Virgo, or False PHD, the resolved pill effect will change from what was
     * assigned by default at the beginning of the run.
     *
     * Returns -1 if passed `PillColor.NULL` (0) or a value of 2048. Returns `PillEffect.BAD_GAS`
     * (0) if passed an invalid pill color (e.g. 15 through 2047 or 2063+).
     *
     * @param pillColor
     * @param player Default is undefined.
     */
    GetPillEffect: (
      pillColor: PillColor,
      player?: EntityPlayer,
    ) => PillEffect | -1;

    /**
     * Note that this function will return `ItemPoolType.NULL` for `RoomType.DEFAULT`, which may be
     * unexpected.
     *
     * @param roomType
     * @param seed
     */
    GetPoolForRoom: (roomType: RoomType, seed: Seed) => ItemPoolType;

    /** @param dontAdvanceRNG Default is false. */
    GetTrinket: (dontAdvanceRNG?: boolean) => TrinketType;

    IdentifyPill: (pillColor: PillColor) => void;

    /**
     * Once the player takes PHD, Virgo, or False PHD, this method will always return true, even if
     * the player has not already seen or used the pill on the run thus far. (This is because this
     * method dictates when the "???" text should be shown as the pill description, and these
     * collectibles will always show the "revealed" text.)
     */
    IsPillIdentified: (pillColor: PillColor) => boolean;

    RemoveCollectible: (collectibleType: CollectibleType) => boolean;

    /**
     * Note that if the trinket pool becomes empty, the game will refill it with all trinkets. Thus,
     * even if you remove a trinket from the trinket pool, it is possible for players to get that
     * trinket if they break the game and cycle through every other trinket.
     *
     * For this reason, if you want to permanently prevent a trinket from appearing, then you must
     * monitor for it appearing using a callback.
     */
    RemoveTrinket: (trinketType: TrinketType) => boolean;

    ResetRoomBlacklist: () => void;
    ResetTrinkets: () => void;
  }
}

----
types\classes\KColor.d.ts
import type { CopyableIsaacAPIClassType } from "../../enums/CopyableIsaacAPIClassType";

declare global {
  function KColor(this: void, r: float, g: float, b: float, a: float): KColor;

  interface KColor extends IsaacAPIClass {
    Alpha: float;
    Blue: float;
    Green: float;
    Red: float;

    /** An identifier that does not exist at run-time. */
    __kind: CopyableIsaacAPIClassType.K_COLOR;
  }

  // The `KColor` presets are deliberately not implemented, since they are unsafe. See the
  // `K_COLORS` constant.
}

----
types\classes\Level.d.ts
import type { Dimension } from "../../enums/Dimension";
import type { DoorSlot } from "../../enums/DoorSlot";
import type { LevelCurse } from "../../enums/flags/LevelCurse";
import type { GridRoom } from "../../enums/GridRoom";
import type { LevelStage } from "../../enums/LevelStage";
import type { LevelStateFlag } from "../../enums/LevelStateFlag";
import type { RoomType } from "../../enums/RoomType";
import type { StageType } from "../../enums/StageType";

declare global {
  interface Level extends IsaacAPIClass {
    AddAngelRoomChance: (chance: float) => void;

    /**
     * Entries in the "curses.xml" file enumerate from 1 instead of 0. Thus, the `LevelCurse`
     * bitmask for a new curse must be `1 << LevelCurseCustom.FOO - 1`. This value is also the
     * return value of `POST_CURSE_EVAL`.
     */
    AddCurse: (levelCurse: LevelCurse, showName: boolean) => void;

    ApplyBlueMapEffect: () => void;
    ApplyCompassEffect: (persistent: boolean) => void;
    ApplyMapEffect: () => void;

    /**
     * Returns whether a Challenge Room door will be open. You must pass this method a valid grid
     * index on the floor. It does not matter if the grid index is actually attached to the
     * Challenge Room. This method will always return false if an invalid or a negative grid index
     * is passed.
     */
    CanOpenChallengeRoom: (roomGridIndex: int | GridRoom) => boolean;

    CanSpawnDevilRoom: () => boolean;
    CanStageHaveCurseOfLabyrinth: (levelStage: LevelStage) => boolean;

    /**
     * @deprecated This method does not update the "fxlayers" properly. Use the `Game.ChangeRoom`
     *             method instead.
     * @param roomGridIndex The room grid index of the destination room.
     * @param dimension Default is `Dimension.CURRENT`.
     */
    ChangeRoom: (roomGridIndex: int | GridRoom, dimension?: Dimension) => void;

    DisableDevilRoom: () => void;
    ForceHorsemanBoss: (seed: Seed) => boolean;

    /**
     * In non-Greed Mode, returns the same thing as the `Level.GetStage` method. In Greed Mode,
     * returns the adjusted stage similar to what it would be in non-Greed Mode.
     *
     * For example:
     * - On Greed Mode Basement, `GetStage` returns 1, and `GetAbsoluteStage` returns 1.
     * - On Greed Mode Caves, `GetStage` returns 2, and `GetAbsoluteStage` returns 3.
     * - On Greed mode Depths, `GetStage` returns 3, and `GetAbsoluteStage` returns 5.
     */
    GetAbsoluteStage: () => LevelStage;

    GetAngelRoomChance: () => float;
    GetCanSeeEverything: () => boolean;
    GetCurrentRoom: () => Room;

    /**
     * Note that this returns a read-only copy of the `RoomDescriptor` object and writing to any of
     * its properties will fail. If you need to update anything in this object, use the
     * `GetRoomByIdx(currentRoomGridIndex)` method or the `getRoomDescriptor` helper function
     * instead.
     */
    GetCurrentRoomDesc: () => Readonly<RoomDescriptor>;

    /** Returns the current room's grid index. */
    GetCurrentRoomIndex: () => int;

    // cspell:ignore Maldición oscuridad

    /**
     * Returns the name of the current floor's curse, like "Curse of the Unknown!". If there are two
     * or more curses on the floor, this will only return the name of the curse with the lowest ID.
     * Note that this will return the localized curse name, like "Maldición de oscuridad" for Curse
     * of Darkness in Spanish.
     */
    GetCurseName: () => string;

    GetCurses: () => BitFlags<LevelCurse>;
    GetDevilAngelRoomRNG: () => RNG;
    GetDungeonPlacementSeed: () => Seed;
    GetEnterPosition: () => Vector;
    GetHeartPicked: () => boolean;
    GetLastBossRoomListIndex: () => int;

    /**
     * Note that this returns a read-only copy of the `RoomDescriptor` object and writing to any of
     * its properties will fail. If you need to update anything in this object, use the
     * `GetRoomByIdx(currentRoomGridIndex)` method or the `getRoomDescriptor` helper function
     * instead.
     */
    GetLastRoomDesc: () => Readonly<RoomDescriptor>;

    /**
     * @param levelStage Default value is the current stage.
     * @param stageType Default value is the current stage type.
     * @param curses Default value is the current curses.
     * @param infiniteLevel Default value is the current infinite level setting.
     * @param dyslexia Default value is the current dyslexia setting.
     */
    GetName: (
      levelStage?: LevelStage,
      stageType?: StageType,
      curses?: int,
      infiniteLevel?: int,
      dyslexia?: boolean,
    ) => string;

    /**
     * Returns the grid index of an unexplored or uncleared room on the floor. Returns -1 if all
     * rooms have been explored and cleared.
     */
    GetNonCompleteRoomIndex: () => int;

    /** Returns the probability of getting a Planetarium (in the 0-1 range). */
    GetPlanetariumChance: () => float;

    /** Returns the grid index of the previous room. */
    GetPreviousRoomIndex: () => int;

    /** Returns a random grid index of the floor. */
    GetRandomRoomIndex: (IAmErrorRoom: boolean, seed: Seed) => int;

    /**
     * @param roomGridIndex The grid index of the room to get.
     * @param dimension Default is `Dimension.CURRENT`.
     */
    GetRoomByIdx: (
      roomGridIndex: int | GridRoom,
      dimension?: Dimension,
    ) => RoomDescriptor;

    GetRoomCount: () => int;
    GetRooms: () => RoomList;
    GetStage: () => LevelStage;
    GetStageType: () => StageType;

    /** Returns the grid index of the starting room on the floor. */
    GetStartingRoomIndex: () => int;

    GetStateFlag: (levelStateFlag: LevelStateFlag) => boolean;
    HasBossChallenge: () => boolean;
    InitializeDevilAngelRoom: (
      forceAngel: boolean,
      forceDevil: boolean,
    ) => void;
    IsAltStage: () => boolean;

    /** Returns true if the player is in the Ascent. */
    IsAscent: () => boolean;

    IsDevilRoomDisabled: () => boolean;
    IsNextStageAvailable: () => boolean;

    /** Returns true if the player is in the version of Mausoleum/Gehenna leading to the Ascent. */
    IsPreAscent: () => boolean;

    /**
     * Attempts to create a red room door in the given room at the given door slot. Returns true on
     * success.
     */
    MakeRedRoomDoor: (
      roomGridIndex: int | GridRoom,
      doorSlot: DoorSlot,
    ) => boolean;

    /**
     * @param roomType
     * @param visited
     * @param rng
     * @param ignoreGroup If set to true, includes rooms that do not have the same group ID as the
     *                    current room. Default is false.
     */
    QueryRoomTypeIndex: (
      roomType: RoomType,
      visited: boolean,
      rng: RNG,
      ignoreGroup?: boolean,
    ) => int;

    RemoveCompassEffect: () => void;

    /**
     * This is currently bugged and maps internally to `Level.RemoveCurse`. The old
     * `Level.RemoveCurses` is not currently accessible.
     */
    RemoveCurses: (levelCurse: LevelCurse) => void;

    SetCanSeeEverything: (value: boolean) => void;
    SetHeartPicked: () => void;

    /**
     * Puts you in the next stage without applying any of the floor changes. You are meant to call
     * the `Level.StartStageTransition` method after using this function.
     */
    SetNextStage: () => void;

    SetRedHeartDamage: () => void;
    SetStage: (levelStage: LevelStage, stageType: StageType) => void;
    SetStateFlag: (levelStateFlag: LevelStateFlag, value: boolean) => void;

    /**
     * Reveals the entire map except for the Super Secret Room. (This is the same as the World card
     * or Sun card.)
     */
    ShowMap: () => void;

    /**
     * Displays the streak text near the top of the screen that shows the name of the current level.
     */
    ShowName: (sticky: boolean) => void;

    /**
     * Uncovers the door on both sides by modifying the saved grid entities for neighboring room.
     */
    UncoverHiddenDoor: (currentRoomIdx: int, doorSlot: DoorSlot) => void;

    Update: () => void;

    /**
     * Call this method to update the mini-map after changing the `DisplayFlags` field of a room.
     */
    UpdateVisibility: () => void;

    /** The position that the player will return to if they exit a crawl space. */
    DungeonReturnPosition: Vector;

    /** The grid index that the player will return to if they exit a crawl space. */
    DungeonReturnRoomIndex: int;

    /** The `DoorSlot` that the player entered the room at. */
    EnterDoor: DoorSlot;

    GreedModeWave: int;

    /** The `DoorSlot` that the player left the previous room at. */
    LeaveDoor: DoorSlot;
  }
}

----
types\classes\Mod.d.ts
import type { CallbackPriority } from "../../enums/CallbackPriority";

declare global {
  /**
   * The Lua object corresponding to this interface is defined as a local variable in the
   * "scripts/main.lua" file.
   */
  interface Mod {
    /**
     * Registers a function to be executed when an in-game event happens. For example, the
     * `ModCallback.POST_UPDATE` event corresponds to event of an in-game logic frame being
     * finished.
     *
     * The different types of callbacks are represented in the `ModCallback` enum.
     *
     * Some callbacks take an optional third argument to specify that you only want it the function
     * to fire on a specific thing. For example:
     *
     * ```ts
     * mod.AddCallback(
     *   ModCallback.POST_EFFECT_UPDATE,
     *   postEffectUpdatePoof1,
     *   EffectVariant.POOF_1,
     * )
     * ```
     */
    AddCallback: <T extends keyof AddCallbackParameters | string>(
      modCallback: T,
      ...args: T extends keyof AddCallbackParameters
        ? AddCallbackParameters[T]
        : unknown[]
    ) => void;

    /**
     * The same as the `Mod.AddCallback` method, but allows setting a custom priority. By default,
     * callbacks are added with a priority of 0, so this allows you to add early or late callbacks
     * as necessary. See the `CallbackPriority` enum.
     */
    AddPriorityCallback: <T extends keyof AddCallbackParameters | string>(
      modCallback: T,
      priority: CallbackPriority | int,
      ...args: T extends keyof AddCallbackParameters
        ? AddCallbackParameters[T]
        : unknown[]
    ) => void;

    /** Returns whether a corresponding "save#.dat" file exists for the current mod. */
    HasData: () => boolean;

    /**
     * Returns a string containing all of the data inside of the corresponding "save#.dat" file for
     * this mod.
     */
    LoadData: () => string;

    /**
     * Unregisters a function that was previously registered with the `AddCallback` method.
     *
     * This method does not care about the tertiary argument. In other words, regardless of the
     * conditions of how you registered the callback, it will be removed.
     */
    RemoveCallback: <T extends keyof AddCallbackParameters>(
      modCallback: T,
      callback: AddCallbackParameters[T][0],
    ) => void;

    /** Deletes the corresponding "save#.dat" file for this mod, if it exists. */
    RemoveData: () => void;

    /**
     * Creates or updates the corresponding "save#.dat" file for this mod with the provided string.
     */
    SaveData: (data: string) => void;

    /**
     * The `RegisterMod` function stores the name of the mod on the mod object for some reason. (It
     * is never used or referenced.)
     */
    Name: string;
  }
}

----
types\classes\ModDescription.d.ts
import type { CallbackPriority } from "../../enums/CallbackPriority";

declare global {
  interface ModDescription<T extends keyof AddCallbackParameters | string> {
    Function: T extends keyof AddCallbackParameters
      ? AddCallbackParameters[T][0]
      : unknown;

    Mod: Mod;

    /** The tertiary argument, if any. */
    Param?: int;

    /** The default is 0. */
    Priority: CallbackPriority | int;
  }
}

----
types\classes\MusicManager.d.ts
import type { Music } from "../../enums/Music";

declare global {
  function MusicManager(this: void): MusicManager;

  interface MusicManager extends IsaacAPIClass {
    /**
     * @param music
     * @param fadeRate Default is 0.08.
     */
    Crossfade: (music: Music, fadeRate?: float) => void;

    Disable: () => void;

    /** @param layerID Default is 0. */
    DisableLayer: (layerID?: int) => void;

    Enable: () => void;

    /**
     * @param layerID Default is 0.
     * @param instant Default is false.
     */
    EnableLayer: (layerID?: int, instant?: boolean) => void;

    /**
     * @param music
     * @param volume Default is 1.
     * @param fadeRate Default is 0.08.
     */
    Fadein: (music: Music, volume?: float, fadeRate?: float) => void;

    /** @param fadeRate Default is 0.08. */
    Fadeout: (fadeRate?: float) => void;

    GetCurrentMusicID: () => Music;
    GetQueuedMusicID: () => Music;
    IsEnabled: () => boolean;

    /** @param layerID Default is 0. */
    IsLayerEnabled: (layerID?: int) => boolean;

    Pause: () => void;
    PitchSlide: (targetPitch: float) => void;

    /**
     * You should always call the `MusicManager.UpdateVolume` method after using `MusicManager.Play`
     * in order to get the music to play at the correct volume. Alternatively, you can use the
     * `MusicManager.Crossfade` method, which will keep the current volume.
     *
     * @param music
     * @param volume Optional. Default is 1.
     */
    Play: (music: Music, volume?: float) => void;

    Queue: (music: Music) => void;
    ResetPitch: () => void;
    Resume: () => void;
    UpdateVolume: () => void;

    /**
     * @param targetVolume
     * @param fadeRate Default is 0.08.
     */
    VolumeSlide: (targetVolume: float, fadeRate?: float) => void;
  }
}

----
types\classes\Options.d.ts
import type { LanguageAbbreviation } from "../../enums/LanguageAbbreviation";

declare global {
  /**
   * This contains the options that correspond to the settings in the "options.ini" file.
   *
   * The fields are listed in order of how they appear in the in-game options menu (rather than
   * alphabetically).
   *
   * `Options` is technically not an Isaac API class; it has a type of `table` (instead of
   * `userdata`).
   */
  namespace Options {
    /**
     * How loud the non-music sound effects should be.
     *
     * This can be changed from the in-game options menu.
     *
     * Valid values are from 0-1.
     */
    let SFXVolume: float;

    /**
     * How loud the in-game music should be.
     *
     * This can be changed from the in-game options menu.
     *
     * Valid values are from 0-1.
     */
    let MusicVolume: float;

    /**
     * How faded the in-game map will be.
     *
     * This can be changed from the in-game options menu.
     *
     * Valid values are from 0-1.
     */
    let MapOpacity: float;

    /** This can be changed from the in-game options menu. */
    let Fullscreen: boolean;

    /**
     * The filter is a setting that makes the game look more like the Flash version (i.e. Wrath of
     * the Lamb).
     *
     * This can be changed from the in-game options menu.
     */
    let Filter: boolean;

    /**
     * This can be changed from the in-game options menu.
     *
     * Valid values are from 0.5-1.5.
     */
    let Gamma: float;

    /**
     * Whether achievement pop-ups will display (e.g. "A Small Rock has appeared in the basement").
     *
     * This can be changed from the in-game options menu.
     */
    let DisplayPopups: boolean;

    /**
     * This can be changed from the in-game options menu, but only when in the main menu and not in
     * a run.
     */
    const Language: LanguageAbbreviation;

    /**
     * Toggles the active camera.
     *
     * This can be changed from the in-game options menu.
     *
     * 1: on, 2: off.
     */
    let CameraStyle: 1 | 2;

    /**
     * Sets the style of the Extra HUD (i.e. the in-game item tracker).
     *
     * This can be changed from the in-game options menu.
     *
     * 0: off, 1: on, 2: mini.
     */
    let ExtraHUDStyle: 0 | 1 | 2;

    /**
     * This can be changed from the in-game options menu.
     *
     * Valid values are from 0-1.
     */
    let HUDOffset: float;

    /**
     * The Found HUD is the in-game stat menu. The name is a reference to MissingHUD, which was a
     * stat HUD added by a mod.
     *
     * This can be changed from the in-game options menu.
     */
    let FoundHUD: boolean;

    /**
     * Toggles charge bars that show the charging progress for items like Brimstone.
     *
     * This can be changed from the in-game options menu.
     */
    let ChargeBars: boolean;

    /**
     * Toggles a shiny effect added to enemy projectiles.
     *
     * This can be changed from the in-game options menu.
     */
    let BulletVisibility: boolean;

    /**
     * Whether the announcer voice should play when using items, pills, cards, and runes.
     *
     * This cannot be changed in-game and is only exposed in the "options.ini" file.
     *
     * 0: random, 1: always off, 2: always on.
     */
    let AnnouncerVoiceMode: 0 | 1 | 2;

    /**
     * How big the text in the debug console should be.
     *
     * This cannot be changed in-game and is only exposed in the "options.ini" file.
     *
     * 0: default, 1: small, 2: tiny.
     */
    let ConsoleFont: 0 | 1 | 2;

    /** This cannot be changed in-game and is only exposed in the "options.ini" file. */
    let DebugConsoleEnabled: boolean;

    /**
     * When enabled, Lua errors and other console output will be shown in-game without having to
     * manually bring up the console.
     *
     * This cannot be changed in-game and is only exposed in the "options.ini" file.
     */
    let FadedConsoleDisplay: boolean;

    /**
     * How big the window can be before the game changes the rendering to fill the screen.
     *
     * This cannot be changed in-game and is only exposed in the "options.ini" file.
     *
     * Valid values are from 1-99.
     */
    let MaxRenderScale: int;

    /**
     * This cannot be changed in-game and is only exposed in the "options.ini" file.
     *
     * Valid values are from 1-99.
     */
    let MaxScale: int;

    /**
     * Whether the mouse can be used to shoot tears and control items like Epic Fetus or Marked.
     *
     * This cannot be changed in-game and is only exposed in the "options.ini" file.
     */
    let MouseControl: boolean;

    /**
     * Whether the game will automatically pause if you switch to a different program.
     *
     * This cannot be changed in-game and is only exposed in the "options.ini" file.
     */
    let PauseOnFocusLost: boolean;

    /**
     * Whether the rumble feature is enabled for controller players.
     *
     * This cannot be changed in-game and is only exposed in the "options.ini" file.
     */
    let RumbleEnabled: boolean;

    /**
     * Whether the game will save the history of executed debug console commands.
     *
     * This cannot be changed in-game and is only exposed in the "options.ini" file.
     */
    let SaveCommandHistory: boolean;

    /**
     * This only takes effect if the `Fullscreen` option is also set to true.
     *
     * This cannot be changed in-game and is only exposed in the "options.ini" file.
     */
    let UseBorderlessFullscreen: boolean;

    /** This cannot be changed in-game and is only exposed in the "options.ini" file. */
    let VSync: boolean;
  }
}

----
types\classes\PathFinder.d.ts
declare interface PathFinder extends IsaacAPIClass {
  EvadeTarget: (targetPos: Vector) => void;

  FindGridPath: (
    position: Vector,
    speed: float,
    pathMarker: int,
    useDirectPath: boolean,
  ) => void;

  GetEvadeMovementCountdown: () => int;
  GetGridIndex: () => int;
  HasDirectPath: () => boolean;
  HasPathToPos: (position: Vector, ignorePoop: boolean) => boolean;
  MoveRandomly: (ignoreStatusEffects: boolean) => boolean;
  MoveRandomlyAxisAligned: (speed: float, ignoreStatusEffects: boolean) => void;
  MoveRandomlyBoss: (ignoreStatusEffects: boolean) => void;
  Reset: () => void;
  ResetMovementTarget: () => void;
  SetCanCrushRocks: (value: boolean) => void;
  UpdateGridIndex: () => void;
}

----
types\classes\PillConfigList.d.ts
declare interface PillConfigList extends IsaacAPIClass {
  Get: (idx: int) => ItemConfigPillEffect | undefined;

  readonly Size: int;
}

----
types\classes\ProjectileParams.d.ts
import type { ProjectileVariant } from "../../enums/collections/variants";
import type { ProjectileFlag } from "../../enums/flags/ProjectileFlag";

declare global {
  function ProjectileParams(this: void): ProjectileParams;

  interface ProjectileParams extends IsaacAPIClass {
    Acceleration: float;
    BulletFlags: BitFlags<ProjectileFlag>;
    ChangeFlags: BitFlags<ProjectileFlag>;
    ChangeTimeout: int;
    ChangeVelocity: float;
    CircleAngle: float;
    Color: Color;
    CurvingStrength: float;
    DepthOffset: float;
    DotProductLimit: float;
    FallingAccelModifier: float;
    FallingSpeedModifier: float;
    FireDirectionLimit: Vector;
    GridCollision: boolean;
    HeightModifier: float;
    HomingStrength: float;
    PositionOffset: Vector;
    Scale: float;
    Spread: float;
    TargetPosition: Vector;
    Variant: ProjectileVariant;
    VelocityMulti: float;
    WiggleFrameOffset: int;
  }
}

----
types\classes\QueueItemData.d.ts
declare interface QueueItemData extends IsaacAPIClass {
  Charge: int;

  Item?: ItemConfigItem;

  Touched: boolean;
}

----
types\classes\RNG.d.ts
import type { CopyableIsaacAPIClassType } from "../../enums/CopyableIsaacAPIClassType";

declare global {
  /**
   * It is recommended to never use the `RNG` constructor directly and instead use the `newRNG`
   * helper function, which can help avoid crashes.
   *
   * Note that new RNG objects from this constructor are always initialized with a seed of
   * 2853650767. Thus, after invoking the constructor, you must set the seed of the new RNG object
   * to the initial seed that you want. In some cases, this can just be a new random number between
   * 1 and 4294967295. You can use the `Random` global function to get a starting seed for these
   * cases, but check to make sure that values of 0 are not allowed, since that will crash the game.
   * However, in most cases, seeding with a completely random number would be a bug in your mod,
   * because all behavior in Isaac should be deterministic based on the starting seed of the run, or
   * the seed of the level, or the seed of the room, and so on.
   */
  function RNG(this: void): RNG;

  interface RNG extends IsaacAPIClass {
    GetSeed: () => Seed;

    /**
     * "Iterates" the RNG object and returns the iterated seed, which will be a new random number
     * between 1 and 4294967295 (2^32 - 1).
     */
    Next: () => Seed;

    /**
     * Returns a random float between 0 and 1. It is inclusive on the lower end and exclusive on the
     * higher end.
     *
     * Note that this will automatically call the `RNG.Next` method before retrieving the random
     * number. Since this mutates the RNG object, you should use this method with care.
     */
    RandomFloat: () => float;

    /**
     * Returns a random integer between 0 and max. It is inclusive on the lower end and exclusive on
     * the higher end.
     *
     * For example, `rng.RandomInt(4)` will return either 0, 1, 2, or 3.
     *
     * Note that this will automatically call the `RNG.Next` method before retrieving the random
     * number. Since this mutates the RNG object, you should use this method with care.
     */
    RandomInt: (max: int) => int;

    /**
     * It is recommended to never use the `RNG.SetSeed` method directly and instead use the
     * `setSeed` helper function from `isaacscript-common`, since it prevent the game from crashing.
     *
     * When setting the seed with this method, it is recommended to use a shift index of 35, which
     * is what most of the game's internal functions use. Document this number as a constant using
     * SHOUTING_SNAKE_CASE so that you avoid using magic numbers in your program.
     *
     * The shift index table can be found here:
     * https://gist.github.com/bladecoding/17b341ed08ff94d2deb704ebda8ffc5f
     *
     * @param seed
     * @param shiftIdx Can be any value between 0 and 80 (inclusive).
     * @deprecated
     */
    SetSeed: (seed: Seed, shiftIdx: int) => void;

    /** An identifier that does not exist at run-time. */
    __kind: CopyableIsaacAPIClassType.RNG;
  }
}

----
types\classes\Room.d.ts
import type { BackdropType } from "../../enums/BackdropType";
import type { BrokenWatchState } from "../../enums/BrokenWatchState";
import type { BossID } from "../../enums/collections/roomSubTypes";
import type { CollectibleType } from "../../enums/collections/subTypes";
import type { DoorSlot } from "../../enums/DoorSlot";
import type { GridCollisionClass } from "../../enums/GridCollisionClass";
import type { GridEntityType } from "../../enums/GridEntityType";
import type { GridPath } from "../../enums/GridPath";
import type { LineCheckMode } from "../../enums/LineCheckMode";
import type { RenderMode } from "../../enums/RenderMode";
import type { RoomShape } from "../../enums/RoomShape";
import type { RoomType } from "../../enums/RoomType";

declare global {
  interface Room extends IsaacAPIClass {
    /**
     * @param position1
     * @param position2
     * @param lineCheckMode
     * @param gridPathThreshold Default is 0.
     * @param ignoreWalls Default is false.
     * @param ignoreCrushable Default is false.
     * @returns 2 values:
     * - clear - True if there are no obstructions between `position` and `position2`, false
     *   otherwise.
     * - collidePos - The first hit position from `position1` to `position2`. Returns `position2` if
     *   the line didn't hit anything.
     */
    CheckLine: (
      position1: Vector,
      position2: Vector,
      lineCheckMode: LineCheckMode,
      gridPathThreshold?: int | GridPath,
      ignoreWalls?: boolean,
      ignoreCrushable?: boolean,
    ) => LuaMultiReturn<[clear: boolean, collidePos: Vector]>;

    DamageGrid: (index: int, damage: int) => boolean;
    DestroyGrid: (index: int, immediate: boolean) => boolean;
    EmitBloodFromWalls: (duration: int, count: int) => void;

    /**
     * @param position
     * @param initialStep Default is 0.
     * @param avoidActiveEntities Default is false.
     * @param allowPits Default is false.
     */
    FindFreePickupSpawnPosition: (
      position: Vector,
      initialStep?: float,
      avoidActiveEntities?: boolean,
      allowPits?: boolean,
    ) => Vector;

    FindFreeTilePosition: (
      position: Vector,
      distanceThreshold: float,
    ) => Vector;
    GetAliveBossesCount: () => int;
    GetAliveEnemiesCount: () => int;
    GetAwardSeed: () => Seed;
    GetBackdropType: () => BackdropType;

    /**
     * Returns 0 if this is not a boss room.
     *
     * @deprecated It is recommended to never use `Room.GetBossID` directly and instead use the
     *             `getBossID` helper function from `isaacscript-common`, since it has a saner
     *             return type and correctly handles Dogma, The Beast, and Ultra Greedier.
     */
    GetBossID: () => BossID | 0;

    GetBottomRightPos: () => Vector;
    GetBrokenWatchState: () => int;
    GetCenterPos: () => Vector;
    GetClampedGridIndex: (position: Vector) => int;
    GetClampedPosition: (position: Vector, margin: float) => Vector;
    GetDecorationSeed: () => Seed;
    GetDeliriumDistance: () => int;
    GetDevilRoomChance: () => float;
    GetDoor: (doorSlot: DoorSlot) => GridEntityDoor | undefined;
    GetDoorSlotPosition: (doorSlot: DoorSlot) => Vector;
    GetDungeonRockIdx: () => int;

    /**
     * Returns the total amount of HP lost by all enemies in the room between the last game frame
     * and this one.
     *
     * This is used by items that charge on damage inflicted (e.g. Berserk!).
     */
    GetEnemyDamageInflicted: () => int;

    /** @deprecated Use the `Isaac.GetRoomEntities` method instead. */
    GetEntities: () => EntityList;

    GetFrameCount: () => int;
    GetGridCollision: (gridIndex: int) => GridCollisionClass;
    GetGridCollisionAtPos: (position: Vector) => GridCollisionClass;
    GetGridEntity: (gridIndex: int) => GridEntity | undefined;
    GetGridEntityFromPos: (position: Vector) => GridEntity | undefined;
    GetGridHeight: () => int;
    GetGridIndex: (position: Vector) => int;
    GetGridPath: (index: int) => int;
    GetGridPathFromPos: (position: Vector) => int;
    GetGridPosition: (gridIndex: int) => Vector;
    GetGridSize: () => int;

    /** Note that if you call this in the main menu, the game will sometimes crash. */
    GetGridWidth: () => int;

    GetLaserTarget: (position: Vector, direction: Vector) => Vector;

    /**
     * Usually returns 1, unless the lava is in the process of being cooled down by Flush or other
     * room flooding effects, in which case this will gradually decrease down to 0.
     */
    GetLavaIntensity: () => float;

    GetLightingAlpha: () => float;

    // GetLRoomAreaDesc is not implemented.

    // GetLRoomTileDesc is not implemented.

    GetRandomPosition: (margin: float) => Vector;
    GetRandomTileIndex: (seed: Seed) => int;
    GetRedHeartDamage: () => boolean;

    /**
     * Returns the current render mode, which can be used to render entities differently depending
     * on the context (i.e. custom water reflections).
     */
    GetRenderMode: () => RenderMode;

    GetRenderScrollOffset: () => Readonly<Vector>;
    GetRenderSurfaceTopLeft: () => Readonly<Vector>;
    GetRoomConfigStage: () => int;
    GetRoomShape: () => RoomShape;

    /** Returns 0 if this is not a Double Trouble boss room. */
    GetSecondBossID: () => BossID | 0;

    /**
     * @param seed
     * @param noDecrease If true, the collectible will not be removed from the pool that it came
     *                   from. Default is false.
     */
    GetSeededCollectible: (seed: Seed, noDecrease?: boolean) => CollectibleType;

    GetShopLevel: () => int;
    GetSpawnSeed: () => Seed;
    GetTintedRockIdx: () => int;
    GetTopLeftPos: () => Vector;
    GetType: () => RoomType;

    /** Returns a vector corresponding to any water current in the room. */
    GetWaterCurrent: () => Vector;

    /** Returns true if the player is inside the abandoned mineshaft. */
    HasCurseMist: () => boolean;

    /** Returns true if the room contains lava pits. */
    HasLava: () => boolean;

    HasSlowDown: () => boolean;
    HasTriggerPressurePlates: () => boolean;
    HasWater: () => boolean;
    HasWaterPits: () => boolean;

    /** Causes chest previews from Guppy's Eye to be updated on the next frame. */
    InvalidatePickupVision: () => void;

    IsAmbushActive: () => boolean;
    IsAmbushDone: () => boolean;
    IsClear: () => boolean;
    IsCurrentRoomLastBoss: () => boolean;

    /**
     * Returns whether the supplied door slot is valid for the current room. This is contingent on
     * the room definition in the STB/XML file. (Basement Renovator displays valid doors as brown
     * and invalid doors as white.) The value returned by this method is independent of whether a
     * door currently exists at the given slot.
     *
     * For example, in the starting room of a floor (i.e. a 1x1 room), this method would return true
     * for `DoorSlot.LEFT_0`, `DoorSlot.UP_0`, `DoorSlot.RIGHT_0`, and `DoorSlot.DOWN_0`, and false
     * for all other values (regardless of what doors happen to exist).
     *
     * For example, there is a relatively common 1x1 room in the Caves with 4 Boom Flies and a
     * narrow bridge from the top door to the bottom door. In this room, the doors on the left side
     * and the right side are disabled. In this room, this method would return true for
     * `DoorSlot.UP0` and `DoorSlot.DOWN0`, and false for all other values (regardless of what doors
     * happen to exist).
     */
    IsDoorSlotAllowed: (doorSlot: DoorSlot) => boolean;

    IsFirstEnemyDead: () => boolean;
    IsFirstVisit: () => boolean;
    IsInitialized: () => boolean;
    IsLShapedRoom: () => boolean;

    /** Returns true if the player is inside the mirror dimension. */
    IsMirrorWorld: () => boolean;

    IsPositionInRoom: (position: Vector, margin: float) => boolean;
    IsSacrificeDone: () => boolean;
    KeepDoorsClosed: () => void;
    MamaMegaExplosion: (position: Vector) => void;
    PlayMusic: () => void;
    RemoveDoor: (doorSlot: DoorSlot) => void;

    RemoveGridEntity: (
      gridIndex: int,
      pathTrail: int,
      keepDecoration: boolean,
    ) => void;

    Render: () => void;
    RespawnEnemies: () => void;
    ScreenWrapPosition: (position: Vector, margin: float) => Vector;
    SetAmbushDone: (value: boolean) => void;
    SetBrokenWatchState: (brokenWatchState: BrokenWatchState) => void;
    SetCardAgainstHumanity: () => void;
    SetClear: (clear: boolean) => void;
    SetFirstEnemyDead: (value: boolean) => void;
    SetFloorColor: (floorColor: Color) => void;
    SetGridPath: (index: int, value: int) => boolean;
    SetRedHeartDamage: () => void;
    SetSacrificeDone: (done: boolean) => void;
    SetSlowDown: (duration: int) => void;
    SetWallColor: (wallColor: Color) => void;
    ShopReshuffle: (
      keepCollectibleIdx: boolean,
      reselectSaleItem: boolean,
    ) => void;
    ShopRestockFull: () => void;
    ShopRestockPartial: () => void;
    SpawnClearAward: () => void;

    SpawnGridEntity: (
      gridIndex: int,
      gridEntityType: GridEntityType,
      variant: int,
      seed: Seed,
      varData: int,
    ) => boolean;

    /** Stops any rain effects in the room. */
    StopRain: () => void;

    /**
     * Triggers all room clear effects (e.g. Sack of Pennies dropping coins). Does not actually
     * clear the room.
     *
     * @param silent Default is false. Set to true to mute the door opening sounds.
     */
    TriggerClear: (silent?: boolean) => void;

    /**
     * This function was updated to take two arguments in Repentance. The reason for this is that
     * bridges can be spike bridges, so the specifying the type of rock is necessary.
     */
    TryMakeBridge: (pit: GridEntity, rock: GridEntity) => boolean;

    TryPlaceLadder: (
      playerPos: Vector,
      playerVelocity: Vector,
      ladder: Entity,
    ) => void;

    /**
     * Attempts to spawn a door to the Blue Womb. This usually does nothing outside of the Mom's
     * Heart's boss room unless `force` is set to true.
     *
     * @param firstTime Default is true.
     * @param ignoreTime Default is false.
     * @param force Default is false.
     */
    TrySpawnBlueWombDoor: (
      firstTime?: boolean,
      ignoreTime?: boolean,
      force?: boolean,
    ) => boolean;

    /**
     * Attempts to spawn a door to the Boss Rush. This usually does nothing outside of the Mom Boss
     * Room unless `force` is set to true.
     *
     * @param ignoreTime Default is false.
     * @param force Default is false.
     */
    TrySpawnBossRushDoor: (ignoreTime?: boolean, force?: boolean) => boolean;

    /**
     * Attempts to spawn a door to the devil or angel room. This usually does nothing inside of
     * non-boss rooms unless `force` is set to true.
     *
     * @param animate Default is false.
     * @param force Default is false.
     */
    TrySpawnDevilRoomDoor: (animate?: boolean, force?: boolean) => boolean;

    /**
     * Attempts to spawn a door to Mega Satan. This usually does nothing outside of the starting
     * room of the Chest / Dark Room unless `force` is set to true.
     *
     * @param force Default is false.
     */
    TrySpawnMegaSatanRoomDoor: (force?: boolean) => boolean;

    /**
     * Attempts to spawn a door to the Downpour, Mines, or Mausoleum "secret exit", depending on the
     * current floor. This usually does nothing outside of boss rooms unless `force` is set to true.
     *
     * Note that if "force" is set to true and all of the available doors in the room are taken,
     * then this method may spawn the door on a slot outside the normal bounds of the room. For this
     * reason, it is recommended to check for available doors before invoking this method.
     *
     * @param animate Default is false.
     * @param force Default is false.
     */
    TrySpawnSecretExit: (animate?: boolean, force?: boolean) => void;

    /**
     * Attempts to spawn a trapdoor to the Member Card shop within the current room. This usually
     * does nothing outside of shops (or if the player does not have a Member Card) unless `force`
     * is set to true.
     *
     * @param force Default is false.
     */
    TrySpawnSecretShop: (force?: boolean) => void;

    /**
     * Attempts to spawn a door to the Mirror Dimension in Downpour or the abandoned mineshaft in
     * the Mines.
     */
    TrySpawnSpecialQuestDoor: () => void;

    /**
     * Attempts to spawn a door to a room containing a Void portal. This usually does nothing
     * outside of Hush's boss room unless `force` is set to true.
     *
     * @param force Default is false.
     */
    TrySpawnTheVoidDoor: (force?: boolean) => boolean;

    TurnGold: () => void;
    Update: () => void;
    WorldToScreenPosition: (worldPos: Vector) => Vector;
  }
}

----
types\classes\RoomConfig.d.ts
import type { DoorSlotFlag } from "../../enums/flags/DoorSlotFlag";
import type { RoomDifficulty } from "../../enums/RoomDifficulty";
import type { RoomShape } from "../../enums/RoomShape";
import type { RoomType } from "../../enums/RoomType";
import type { StageID } from "../../enums/StageID";

declare global {
  /**
   * This is equal to `RoomConfigRoom` in the docs:
   * https://wofsauge.github.io/IsaacDocs/rep/RoomConfig_Room.html
   */
  interface RoomConfig extends IsaacAPIClass {
    readonly Difficulty: RoomDifficulty;

    /**
     * This does not match the actual doors in the room, but rather the valid door positions from
     * the STB for this room.
     */
    readonly Doors: BitFlags<DoorSlotFlag>;

    readonly Height: int;
    readonly InitialWeight: float;

    // Mode is not implemented since it returns useless userdata.

    readonly Name: string;
    readonly OriginalVariant: int;
    readonly Shape: RoomShape;
    readonly SpawnCount: int;
    readonly Spawns: SpawnList;
    readonly StageID: StageID;
    readonly Subtype: int;
    readonly Type: RoomType;
    readonly Variant: int;
    readonly Weight: float;
    readonly Width: int;
  }
}

----
types\classes\RoomConfigEntry.d.ts
import type { EntityType } from "../../enums/EntityType";

declare global {
  interface RoomConfigEntry extends IsaacAPIClass {
    Subtype: int;
    Type: EntityType;
    Variant: int;
    Weight: int;
  }
}

----
types\classes\RoomConfigSpawn.d.ts
declare interface RoomConfigSpawn extends IsaacAPIClass {
  PickEntry: (r: float) => Readonly<RoomConfigEntry>;

  Entries: EntriesList;
  EntryCount: int;
  SumWeights: float;
  X: int;
  Y: int;
}

----
types\classes\RoomDescriptor.d.ts
import type { DisplayFlag } from "../../enums/flags/DisplayFlag";
import type { RoomDescriptorFlag } from "../../enums/flags/RoomDescriptorFlag";

declare global {
  interface RoomDescriptor extends IsaacAPIClass {
    // AllowedDoors is not implemented.

    AwardSeed: Seed;
    ChallengeDone: boolean;
    Clear: boolean;
    ClearCount: int;
    Data?: RoomConfig;
    DecorationSeed: Seed;
    DeliriumDistance: int;

    /**
     * After modifying this value, you must call the `Level.UpdateVisibility` method for it to take
     * effect.
     */
    DisplayFlags: BitFlags<DisplayFlag>;

    Flags: BitFlags<RoomDescriptorFlag>;

    /**
     * - For a 1x1 room, this is equal to the 1x1 grid index of the room.
     * - For a room bigger than a 1x1 room, this is equal to the top left 1x1 quadrant.
     * - For `RoomShape.LTL` rooms (i.e. rooms that look like a "J"), this is equal to the 1x1
     *   quadrant where the gap in the room is. In other words, it is a 1x1 quadrant that is not
     *   actually contained within the room.
     * - This can also be a special negative value represented by the `GridRoom` enum (for rooms
     *   that are outside of the grid).
     * - Note that this value **is different** than the value returned by the
     *   `Level.GetCurrentRoomIndex` method. (That method returns the 1x1 quadrant that the room was
     *   entered in.)
     * - Data structures that store data per room should use `ListIndex` as a key instead of
     *   `GridIndex`, since the former is unique across different dimensions.
     * - `GridIndex` is bugged for rooms outside of the grid, as demonstrated by entering a Genesis
     *   room and entering `l print(Game():GetLevel():GetCurrentRoomDesc().SafeGridIndex)` into the
     *   console. (It prints -1 instead of -12.)
     */
    GridIndex: int;

    HasWater: boolean;

    /**
     * The index for this room corresponding to the `RoomList.Get` method. This is equal to the
     * order that the room was created by the floor generation algorithm.
     *
     * Use this as an index for data structures that store data per room, since it is unique across
     * different dimensions.
     */
    ListIndex: int;

    NoReward: boolean;
    OverrideData: RoomConfig;
    PitsCount: int;
    PoopCount: int;
    PressurePlatesTriggered: boolean;
    SacrificeDone: boolean;

    /**
     * - For a 1x1 room, this is equal to the 1x1 grid index of the room.
     * - For a room bigger than a 1x1 room, this is equal to the top left 1x1 quadrant.
     * - For `RoomType.LTL` rooms (i.e. rooms that look like a "J"), this is equal to the top right
     *   1x1 quadrant.
     * - This can also be a special negative value represented by the `GridRoom` enum (for rooms
     *   that are outside of the grid).
     * - Note that this value **is different** than the value returned by the
     *   `Level.GetCurrentRoomIndex` method. (That method returns the 1x1 quadrant that the room was
     *   entered in.)
     * - Data structures that store data per room should use `ListIndex` as a key instead of
     *   `SafeGridIndex`, since the former is unique across different dimensions.
     * - `SafeGridIndex` is bugged for rooms outside of the grid, as demonstrated by entering a
     *   Genesis room and entering `l print(Game():GetLevel():GetCurrentRoomDesc().SafeGridIndex)`
     *   into the console. (It prints -1 instead of -12.)
     */
    SafeGridIndex: int;

    ShopItemDiscountIdx: int;
    ShopItemIdx: int;
    SpawnSeed: Seed;
    SurpriseMiniboss: boolean;

    /**
     * The number of times that the room has been visited.
     *
     * This will be inaccurate during the period before the `POST_NEW_ROOM` callback has fired (i.e.
     * when entities are initializing and performing their first update). This is because this
     * variable is only incremented immediately before the `POST_NEW_ROOM` callback fires.
     */
    VisitedCount: int;

    /**
     * In the "enums.lua" file, the RoomDescriptor class is extended with many members:
     *
     * - RoomDescriptor.DISPLAY_*
     * - RoomDescriptor.FLAG_*
     *
     * In IsaacScript, these are instead implemented as enums, since it is cleaner. See the
     * `RoomDescriptorDisplayType` and `RoomDescriptorFlag` enums, respectively.
     */
  }
}

----
types\classes\RoomList.d.ts
declare interface RoomList extends IsaacAPIClass {
  Get: (idx: int) => Readonly<RoomDescriptor> | undefined;

  Size: int;
}

----
types\classes\SFXManager.d.ts
import type { SoundEffect } from "../../enums/SoundEffect";

declare global {
  function SFXManager(this: void): SFXManager;

  interface SFXManager extends IsaacAPIClass {
    AdjustPitch: (soundEffect: SoundEffect, pitch: float) => void;
    AdjustVolume: (soundEffect: SoundEffect, volume: float) => void;
    GetAmbientSoundVolume: (soundEffect: SoundEffect) => float;
    IsPlaying: (soundEffect: SoundEffect) => boolean;

    /**
     * @param soundEffect
     * @param volume Default is 1.
     * @param frameDelay Default is 2.
     * @param loop Default is false.
     * @param pitch Default is 1.
     * @param pan Default is 0.
     */
    Play: (
      soundEffect: SoundEffect,
      volume?: float,
      frameDelay?: int,
      loop?: boolean,
      pitch?: float,
      pan?: float,
    ) => void;

    Preload: (soundEffect: SoundEffect) => void;

    SetAmbientSound: (
      soundEffect: SoundEffect,
      volume: float,
      pitch: float,
    ) => void;

    Stop: (soundEffect: SoundEffect) => void;
    StopLoopingSounds: () => void;
  }
}

----
types\classes\Seeds.d.ts
import type { Challenge } from "../../enums/Challenge";
import type { LevelStage } from "../../enums/LevelStage";
import type { SeedEffect } from "../../enums/SeedEffect";

declare global {
  interface Seeds extends IsaacAPIClass {
    AddSeedEffect: (seedEffect: SeedEffect) => void;
    CanAddSeedEffect: (seedEffect: SeedEffect) => boolean;
    ClearSeedEffects: () => void;
    ClearStartSeed: () => void;
    CountSeedEffects: () => int;
    ForgetStageSeed: (levelStage: LevelStage) => void;
    GetNextSeed: () => Seed;
    GetPlayerInitSeed: () => Seed;
    GetStageSeed: (levelStage: LevelStage) => Seed;

    /**
     * The "start seed" is a number between 1 and (2^32 - 1) that is used to generate the random
     * elements for the current run. The seed displayed in the pause menu is this number represented
     * in string form.
     *
     * This method will return 0 if it is run in the main menu.
     */
    GetStartSeed: () => Seed;

    // cspell:ignore ABCD EFGH

    /**
     * The "start seed" is a number between 1 and (2^32 - 1) that is used to generate the random
     * elements for the current run. When converted to a string, it looks like "ABCD EFGH". (This is
     * the form that is displayed on the pause menu.)
     *
     * This method will return "B911 99JA" if it is run in the main menu.
     */
    GetStartSeedString: () => string;

    HasSeedEffect: (seedEffect: SeedEffect) => boolean;

    /** Returns true if the player is in a challenge run or a seeded run. */
    IsCustomRun: () => boolean;

    IsInitialized: () => boolean;
    IsSeedComboBanned: (
      seedEffect1: SeedEffect,
      seedEffect2: SeedEffect,
    ) => boolean;

    /** Removes seed effects that are banned in conjunction with the given seed. */
    RemoveBlockingSeedEffects: (seedEffect: SeedEffect) => void;

    RemoveSeedEffect: (seedEffect: SeedEffect) => void;

    /** Removes all seed effects. Only takes effect when the run is restarted. */
    Reset: () => void;

    /** Re-selects a random start seed, but only if the start seed was not custom. */
    Restart: (challenge: Challenge) => void;

    /** Passing an empty string will cause the game to pick a new random seed. */
    SetStartSeed: (startSeed: string) => void;
  }

  /** @noSelf */
  namespace Seeds {
    function CountUnlockedSeedEffects(): int;
    function GetSeedEffect(str: string): SeedEffect;
    function InitSeedInfo(): void;
    function IsSpecialSeed(str: string): boolean;
    function IsStringValidSeed(str: string): boolean;

    /**
     * Converts a numerical seed into the format used in the in-game pause menu. For example,
     * converts 0 to "B911 99JA".
     */
    function Seed2String(seed: int): string;

    /** Converts a seed string into a number. For example, converts "B911 99JA" to 0. */
    function String2Seed(str: string): Seed;
  }
}

----
types\classes\SpawnList.d.ts
declare interface SpawnList extends IsaacAPIClass {
  Get: (idx: int) => RoomConfigSpawn | undefined;

  Size: int;
}

----
types\classes\Sprite.d.ts
declare function Sprite(this: void): Sprite;

declare interface Sprite extends IsaacAPIClass {
  /** Return the name of the currently played animation. */
  GetAnimation: () => string;

  /** Returns the `DefaultAnimation` value from the currently loaded anm2 file. */
  GetDefaultAnimation: () => string;

  /**
   * The `Sprite.GetDefaultAnimationName` method is identical to the `Sprite.GetDefaultAnimation`
   * method, so the former is preferred.
   */
  // GetDefaultAnimationName(): string;

  /** Returns the path to the anm2 file that is loaded on the sprite. */
  GetFilename: () => string;

  /** Returns the frame number of the animation that is currently being rendered. */
  GetFrame: () => int;

  /**
   * Returns the number of layers in the anm2 file that is loaded on the sprite. All animations use
   * the same amount of layers.
   */
  GetLayerCount: () => int;

  /**
   * Returns the name of the currently playing overlay animation. (The overlay animation is an
   * independent secondary animation that can be played at the same time as the normal animation.)
   */
  GetOverlayAnimation: () => string;

  /**
   * Returns the frame number of the overlay animation that is currently being rendered. (The
   * overlay animation is an independent secondary animation that can be played at the same time as
   * the normal animation.)
   */
  GetOverlayFrame: () => int;

  /**
   * Returns the color of the pixel of the sprite at the given sample position.
   *
   * @param samplePos
   * @param renderPos
   * @param alphaThreshold
   * @param layerID Default is 0.
   */
  GetTexel: (
    samplePos: Vector,
    renderPos: Vector,
    alphaThreshold: float,
    layerID?: int,
  ) => KColor;

  /** Returns true if the specified event in the animation is currently being triggered. */
  IsEventTriggered: (eventName: string) => boolean;

  /**
   * Returns whether the current animation is finished.
   *
   * @param animation Default is the name of the last played animation.
   */
  IsFinished: (animation?: string) => boolean;

  IsLoaded: () => boolean;

  /**
   * Returns whether the current overlay animation is finished.
   *
   * @param animation Default is the name of the last played animation.
   */
  IsOverlayFinished: (animation?: string) => boolean;

  /**
   * Returns whether the current overlay animation is played or stopped.
   *
   * @param animation Default is the name of the last played animation.
   */
  IsOverlayPlaying: (animation?: string) => boolean;

  /**
   * Returns whether the current animation is played or stopped.
   *
   * @param animation Default is the name of the last played animation.
   */
  IsPlaying: (animation?: string) => boolean;

  /**
   * Loads the provided anm2 file to the sprite. Each sprite must have an anm2 file loaded in order
   * for it to display anything.
   *
   * @param anm2Path The path to the anm2 file that contains all of the animations for this sprite.
   *                 This should be relative to the "resources" folder.
   * @param loadGraphics Whether to immediately load the spritesheet PNG files. If false is passed,
   *                     then you must call the `Sprite.LoadGraphics` method at some point in the
   *                     future. Typically, you would pass false for this argument if you are
   *                     intending to use the `Sprite.ReplaceSpritesheet` method after loading the
   *                     anm2.
   */
  Load: (anm2Path: string, loadGraphics: boolean) => void;

  /**
   * Used to load the PNG files that are specified in the sprite's anm2. Typically, you would only
   * call this method if you have previously passed false to the `loadGraphics` argument of the
   * `Sprite.Load` method or you have called the `Sprite.ReplaceSpritesheet` method.
   */
  LoadGraphics: () => void;

  /**
   * Starts executing the given animation, starting at frame 0. After calling this method, you must
   * call the `Sprite.Update` method on every render frame in order to advance the animation to the
   * next frame. (Typically, you would also check to see if the animation is finished by using the
   * `Sprite.IsFinished` method.)
   *
   * Calling this method again will reset the current frame back to 0.
   *
   * @param animation The name of the animation to play.
   * @param force If true, the currently playing animation will be stopped. If false, and there is
   *              already a currently playing animation, this method will do nothing and the current
   *              animation will continue to play.
   */
  Play: (animation: string, force: boolean) => void;

  /**
   * Starts executing the given overlay animation, starting at frame 0. (The overlay animation is an
   * independent secondary animation that can be played at the same time as the normal animation.)
   * After calling this method, you must call the `Sprite.Update` method on every render frame in
   * order to advance the animation to the next frame. (Typically, you would also check to see if
   * the animation is finished by using the `Sprite.IsOverlayFinished` method.)
   *
   * @param animation The name of the overlay animation to play.
   * @param force If true, the currently playing animation will be stopped. If false, and there is
   *              already a currently playing animation, this method will do nothing and the current
   *              animation will continue to play.
   */
  PlayOverlay: (animation: string, force: boolean) => void;

  /** Plays a random animation from the currently loaded anm2 file. */
  PlayRandom: (seed: Seed) => void;

  Reload: () => void;
  RemoveOverlay: () => void;

  /**
   * Renders the sprite at a given screen position, where (0, 0) is the top left corner of the
   * screen.
   *
   * In order for the sprite to be drawn, this function needs to be called on every render frame.
   * (For example in the `MC_POST_RENDER` callback.)
   *
   * @param position
   * @param topLeftClamp Default is `Vector.Zero`. This can be used to crop the sprite.
   * @param bottomRightClamp Default is `Vector.Zero`. This can be used to crop the sprite.
   */
  Render: (
    position: Vector,
    topLeftClamp?: Vector,
    bottomRightClamp?: Vector,
  ) => void;

  /**
   * Renders a specific layer of the sprite at a given screen position, where (0, 0) is the top left
   * corner of the screen.
   *
   * This is similar to the `Sprite.Render` method, but it will only render a specific layer of the
   * sprite instead of all of the layers at once.
   *
   * @param layerID
   * @param position
   * @param topLeftClamp Default is `Vector.Zero`. This can be used to crop the sprite.
   * @param bottomRightClamp Default is `Vector.Zero`. This can be used to crop the sprite.
   */
  RenderLayer: (
    layerID: int,
    position: Vector,
    topLeftClamp?: Vector,
    bottomRightClamp?: Vector,
  ) => void;

  /**
   * Changes the ".png" file associated with a specific layer of a sprite. (This does not change any
   * layers other than the one that is explicitly specified.)
   *
   * After replacing a spritesheet, you must call the `Sprite.LoadGraphics` method afterwards.
   *
   * @param layerID
   * @param pngPath The full path to the PNG file. For example:
   *                "gfx/items/collectibles/questionmark.png"
   */
  ReplaceSpritesheet: (layerID: int, pngPath: string) => void;

  /**
   * Resets the sprite such that it will be equivalent to a new sprite created with the `Sprite`
   * constructor.
   *
   * Doing this will obviously make the sprite disappear since the anm2 file will be unloaded.
   */
  Reset: () => void;

  /**
   * Similar to the `Sprite.Play` method, but does not start the animation.
   *
   * @param animation
   * @param reset Default is true. Passing false will continue the animation from the current frame.
   *              This can be useful for seamlessly switching between two similar animations.
   */
  SetAnimation: (animation: string, reset?: boolean) => boolean;

  /**
   * Changes the current animation to a specific frame.
   *
   * Note that normally, you would use the `Sprite.Update` method to automatically iterate the
   * sprite's animation frame. Thus, this method is typically used for sprites that don't play
   * animations.
   *
   * The `Sprite.SetFrame` method has two overloads: one which supports setting an animation at the
   * same time, and one that uses the currently playing animation.
   *
   * @param frameNum The frame number of the current animation to set.
   */
  SetFrame: ((frameNum: int) => void) &
    ((animation: string, frameNum: int) => void);

  SetLastFrame: () => void;
  SetLayerFrame: (layerID: int, frameNum: int) => void;

  /**
   * Similar to the `Sprite.PlayOverlay` method, but does not start the animation.
   *
   * @param animation
   * @param reset Default is true. Passing false will continue the animation from the current frame.
   *              This can be useful for seamlessly switching between two similar animations.
   */
  SetOverlayAnimation: (animation: string) => boolean;

  SetOverlayFrame: (animation: string, frameNum: int) => void;
  SetOverlayRenderPriority: (renderFirst: boolean) => void;
  Stop: () => void;

  /**
   * Advances the currently playing animation by one frame. If a new animation was played, this will
   * set the frame to 0 (so that the 0th frame will not get skipped over).
   *
   * If the sprite is playing an animation, you need to call this on every render frame before you
   * render it.
   */
  Update: () => void;

  /**
   * Returns true if the specified event in the animation was triggered at some point. (It remains
   * true until the animation stops playing.)
   */
  WasEventTriggered: (eventName: string) => boolean;

  /**
   * You cannot modify the values of this `Color` class directly. Instead, replace the entire class
   * with a new object.
   *
   * For example:
   *
   * ```ts
   * const faded = copyColor(sprite.Color);
   * faded.A = 0.5;
   * sprite.Color = faded;
   * ```
   */
  Color: Readonly<Color>;

  FlipX: boolean;
  FlipY: boolean;
  Offset: Vector;
  PlaybackSpeed: float;
  Rotation: float;
  Scale: Vector;
}

----
types\classes\TearParams.d.ts
import type { TearVariant } from "../../enums/collections/variants";
import type { TearFlag } from "../../enums/flags/TearFlag";

declare global {
  interface TearParams extends IsaacAPIClass {
    BombVariant: int;
    TearColor: Color;
    TearDamage: float;
    TearFlags: BitFlags<TearFlag>;
    TearHeight: float;
    TearScale: float;
    TearVariant: TearVariant;
  }
}

----
types\classes\TemporaryEffect.d.ts
declare interface TemporaryEffect extends IsaacAPIClass {
  Cooldown: int;
  Count: int;
  Item: ItemConfigItem;
}

----
types\classes\TemporaryEffects.d.ts
import type {
  CollectibleType,
  TrinketType,
} from "../../enums/collections/subTypes";
import type { NullItemID } from "../../enums/NullItemID";

declare global {
  interface TemporaryEffects extends IsaacAPIClass {
    /**
     * This will only work properly with specific collectibles.
     *
     * @param collectibleType
     * @param addCostume Default is true.
     * @param count Default is 1.
     */
    AddCollectibleEffect: (
      collectibleType: TemporaryCollectibleType,
      addCostume?: boolean,
      count?: int,
    ) => void;

    /**
     * @param nullItemID
     * @param addCostume
     * @param count Default is 1.
     */
    AddNullEffect: (
      nullItemID: NullItemID,
      addCostume: boolean,
      count?: int,
    ) => void;

    /**
     * @param trinketType
     * @param addCostume
     * @param count Default is 1.
     */
    AddTrinketEffect: (
      trinketType: TrinketType,
      addCostume: boolean,
      count?: int,
    ) => void;

    ClearEffects: () => void;

    GetCollectibleEffect: (
      collectibleType: CollectibleType,
    ) => Readonly<TemporaryEffect> | undefined;

    GetCollectibleEffectNum: (collectibleType: CollectibleType) => int;
    GetEffectsList: () => Readonly<EffectList>;

    GetNullEffect: (
      nullItemID: NullItemID,
    ) => Readonly<TemporaryEffect> | undefined;

    GetNullEffectNum: (nullItemID: NullItemID) => int;

    GetTrinketEffect: (
      trinketType: TrinketType,
    ) => Readonly<TemporaryEffect> | undefined;

    GetTrinketEffectNum: (trinketType: TrinketType) => int;
    HasCollectibleEffect: (collectibleType: CollectibleType) => boolean;
    HasNullEffect: (nullItemID: NullItemID) => boolean;
    HasTrinketEffect: (trinketType: TrinketType) => boolean;

    /**
     * @param collectibleType
     * @param count Use -1 to remove all instances. Default is 1.
     */
    RemoveCollectibleEffect: (
      collectibleType: CollectibleType,
      count?: int,
    ) => void;

    /**
     * @param nullItemID
     * @param count Use -1 to remove all instances. Default is 1.
     */
    RemoveNullEffect: (nullItemID: NullItemID, count?: int) => void;

    /**
     * @param trinketType
     * @param count Use -1 to remove all instances. Default is 1.
     */
    RemoveTrinketEffect: (trinketType: TrinketType, count?: int) => void;
  }
}

----
types\classes\Vector.d.ts
import type { CopyableIsaacAPIClassType } from "../../enums/CopyableIsaacAPIClassType";

declare global {
  function Vector(this: void, x: float, y: float): Vector;

  interface Vector extends IsaacAPIClass {
    Clamp: (minX: float, minY: float, maxX: float, maxY: float) => void;
    Clamped: (minX: float, minY: float, maxX: float, maxY: float) => Vector;
    Cross: (secondVector: Vector) => float;
    Distance: (secondVector: Vector) => float;
    DistanceSquared: (secondVector: Vector) => float;
    Dot: (secondVector: Vector) => float;

    /**
     * This method returns a value from -180 to 180.
     *
     * Note that this function considers 0 degrees to be pointing to the right, which is unusual
     * because 0 normally corresponds to up.
     *
     * - Right: 0
     * - Up: -90
     * - Left: 180
     * - Down: 90
     */
    GetAngleDegrees: () => float;

    Length: () => float;
    LengthSquared: () => float;
    Lerp: (secondVector: Vector, t: float) => Vector;
    Normalize: () => void;
    Normalized: () => Vector;
    Resize: (newLength: float) => void;
    Resized: (newLength: float) => Vector;
    Rotated: (angleDegrees: float) => Vector;

    X: float;
    Y: float;

    /** An identifier that does not exist at run-time. */
    __kind: CopyableIsaacAPIClassType.VECTOR;

    // The underscore methods like `__add` are not implemented in favor of having `add` and so on.
    // https://typescripttolua.github.io/docs/advanced/language-extensions/#operator-map-types

    add: LuaAdditionMethod<Vector, Vector>;

    /**
     * Vector multiplication was extended to allow numbers or vectors in Repentance. However, this
     * functionality does not apply to division.
     */
    div: LuaDivisionMethod<number, Vector>;

    /** Vector multiplication was extended to allow numbers or vectors in Repentance. */
    mul: LuaMultiplicationMethod<number | Vector, Vector>;

    sub: LuaSubtractionMethod<Vector, Vector>;
  }

  /** @noSelf */
  namespace Vector {
    function FromAngle(angleDegrees: float): Vector;

    // The `One` and `Zero` constants are deliberately not implemented, since they are unsafe. See
    // the `VectorOne` and `VectorZero` constants.
  }
}

----
types\classes\VectorList.d.ts
declare interface VectorList extends IsaacAPIClass {
  Get: (idx: int) => Vector | undefined;

  readonly Size: int;
}

----
types\functions.d.ts
/**
 * These are global functions provided by C++ code. Note that additional global functions are
 * located in the "main.d.ts" file (which corresponds to the "main.lua" file).
 *
 * @noSelfInFile
 * @module
 */

/**
 * Comparing two API objects directly in mod code will not work, even if the Lua metadata points to
 * the same pointer in memory. As a workaround, use this function to get a numerical hash of the
 * object.
 *
 * A `PtrHash` object is simply a branded number for better type safety and code clarity.
 */
declare function GetPtrHash(
  pointer: Entity | GridEntity | Readonly<RoomDescriptor>,
): PtrHash;

/**
 * Returns a random integer between 0 and 4294967296 (2^32). It is inclusive on the lower end and
 * exclusive on the higher end.
 *
 * For most situations in which you need a random number, you should use the `getRandom`,
 * `getRandomInt`, and `getRandomFloat` helper functions from the standard library instead of this
 * function.
 *
 * This function is mostly useful for generating a random seed. However, for this purposes, you
 * should always use the `getRandomSeed` helper function instead, since `Random` can return a value
 * of 0 and crash the game.
 *
 * @deprecated Can return a value of 0 and crash the game.
 */
declare function Random(): int;

/**
 * Returns a random vector between (-1, -1) and (1, 1).
 *
 * To get random vectors with a bigger length, multiply this with a number.
 */
declare function RandomVector(): Vector;

----
types\index.d.ts
/**
 * In a file where any import occurs, the "declare global" directive must be used:
 * https://stackoverflow.com/questions/39040108/import-class-in-definition-file-d-ts
 *
 * In a file without imports, "declare global" cannot be used.
 */

// --------
// External
// --------

// The Isaac definitions automatically bundle the definitions for Lua 5.3 as a convenience.
/// <reference types="lua-types/5.3" />

// -------------
// Miscellaneous
// -------------

/// <reference path="./functions.d.ts" />
/// <reference path="./json.d.ts" />
/// <reference path="./main.d.ts" />
/// <reference path="./socket.d.ts" />

// -------
// Classes
// -------

/// <reference path="./classes/BitSet128.d.ts" />
/// <reference path="./classes/CardConfigList.d.ts" />
/// <reference path="./classes/Color.d.ts" />
/// <reference path="./classes/EffectList.d.ts" />
/// <reference path="./classes/Entity.d.ts" />
/// <reference path="./classes/EntityBomb.d.ts" />
/// <reference path="./classes/EntityEffect.d.ts" />
/// <reference path="./classes/EntityFamiliar.d.ts" />
/// <reference path="./classes/EntityKnife.d.ts" />
/// <reference path="./classes/EntityLaser.d.ts" />
/// <reference path="./classes/EntityList.d.ts" />
/// <reference path="./classes/EntityNPC.d.ts" />
/// <reference path="./classes/EntityPickup.d.ts" />
/// <reference path="./classes/EntityPlayer.d.ts" />
/// <reference path="./classes/EntityProjectile.d.ts" />
/// <reference path="./classes/EntityPtr.d.ts" />
/// <reference path="./classes/EntityRef.d.ts" />
/// <reference path="./classes/EntityTear.d.ts" />
/// <reference path="./classes/EntriesList.d.ts" />
/// <reference path="./classes/Font.d.ts" />
/// <reference path="./classes/Game.d.ts" />
/// <reference path="./classes/GridEntity.d.ts" />
/// <reference path="./classes/GridEntityDesc.d.ts" />
/// <reference path="./classes/GridEntityDoor.d.ts" />
/// <reference path="./classes/GridEntityPit.d.ts" />
/// <reference path="./classes/GridEntityPoop.d.ts" />
/// <reference path="./classes/GridEntityPressurePlate.d.ts" />
/// <reference path="./classes/GridEntityRock.d.ts" />
/// <reference path="./classes/GridEntitySpikes.d.ts" />
/// <reference path="./classes/GridEntityTNT.d.ts" />
/// <reference path="./classes/HUD.d.ts" />
/// <reference path="./classes/Input.d.ts" />
/// <reference path="./classes/Isaac.d.ts" />
/// <reference path="./classes/ItemConfig.d.ts" />
/// <reference path="./classes/ItemConfigCard.d.ts" />
/// <reference path="./classes/ItemConfigCostume.d.ts" />
/// <reference path="./classes/ItemConfigItem.d.ts" />
/// <reference path="./classes/ItemConfigList.d.ts" />
/// <reference path="./classes/ItemConfigPillEffect.d.ts" />
/// <reference path="./classes/ItemPool.d.ts" />
/// <reference path="./classes/KColor.d.ts" />
/// <reference path="./classes/Level.d.ts" />
/// <reference path="./classes/Mod.d.ts" />
/// <reference path="./classes/ModDescription.d.ts" />
/// <reference path="./classes/MusicManager.d.ts" />
/// <reference path="./classes/PathFinder.d.ts" />
/// <reference path="./classes/PillConfigList.d.ts" />
/// <reference path="./classes/ProjectileParams.d.ts" />
/// <reference path="./classes/QueueItemData.d.ts" />
/// <reference path="./classes/Options.d.ts" />
/// <reference path="./classes/RNG.d.ts" />
/// <reference path="./classes/Room.d.ts" />
/// <reference path="./classes/RoomConfig.d.ts" />
/// <reference path="./classes/RoomConfigEntry.d.ts" />
/// <reference path="./classes/RoomConfigSpawn.d.ts" />
/// <reference path="./classes/RoomDescriptor.d.ts" />
/// <reference path="./classes/RoomList.d.ts" />
/// <reference path="./classes/Seeds.d.ts" />
/// <reference path="./classes/SFXManager.d.ts" />
/// <reference path="./classes/SpawnList.d.ts" />
/// <reference path="./classes/Sprite.d.ts" />
/// <reference path="./classes/TearParams.d.ts" />
/// <reference path="./classes/TemporaryEffect.d.ts" />
/// <reference path="./classes/TemporaryEffects.d.ts" />
/// <reference path="./classes/Vector.d.ts" />
/// <reference path="./classes/VectorList.d.ts" />

// ----------------------------
// Unofficial Classes and Types
// ----------------------------

/// <reference path="./unofficial/primitives.d.ts" />

/// <reference path="./unofficial/AddCallbackParameters.d.ts" />
/// <reference path="./unofficial/APIVersion.d.ts" />
/// <reference path="./unofficial/BitFlag.d.ts" />
/// <reference path="./unofficial/BitFlag128.d.ts" />
/// <reference path="./unofficial/BitFlags.d.ts" />
/// <reference path="./unofficial/EntitySubPlayer.d.ts" />
/// <reference path="./unofficial/IsaacAPIClass.d.ts" />
/// <reference path="./unofficial/PtrHash.d.ts" />
/// <reference path="./unofficial/Quality.d.ts" />
/// <reference path="./unofficial/Seed.d.ts" />
/// <reference path="./unofficial/TemporaryCollectibleType.d.ts" />
/// <reference path="./unofficial/ZodiacCollectibleType.d.ts" />

// ----------------------------
// Definitions for Popular Mods
// ----------------------------

/// <reference path="./mods/EID.d.ts" />
/// <reference path="./mods/Encyclopedia.d.ts" />
/// <reference path="./mods/InputHelper.d.ts" />
/// <reference path="./mods/MinimapAPI.d.ts" />
/// <reference path="./mods/ModConfigMenu.d.ts" />
/// <reference path="./mods/MusicModCallback.d.ts" />
/// <reference path="./mods/Sandbox.d.ts" />
/// <reference path="./mods/SandboxGlobals.d.ts" />
/// <reference path="./mods/StageAPI.d.ts" />
/// <reference path="./mods/StageAPIInterfaces.d.ts" />
/// <reference path="./mods/StageAPIUnofficial.d.ts" />

----
types\json.d.ts
/**
 * The "json.lua" module exists at:
 *
 * ```text
 * C:\Program Files (x86)\Steam\steamapps\common\The Binding of Isaac Rebirth\resources\scripts\json.lua
 * ```
 *
 * IsaacScript mods should avoid consuming it directly and instead use the `jsonEncode` and
 * `jsonDecode` helper functions.
 *
 * (These helper functions use a custom JSON parser that was benchmarked to be 11.8 times faster
 * than the vanilla parser.)
 *
 * @module
 */

/**
 * We need to specify the "@noResolution" TSTL compiler annotation here because the "json.lua" file
 * is not supposed to exist inside of end-user mods.
 *
 * @noResolution
 * @noSelf
 */
declare module "json" {
  function encode(data: unknown): string;
  function decode(data: string): unknown;
}

----
types\main.d.ts
/**
 * These are functions and constants from the "main.lua" file, which is located at:
 *
 * ```text
 * C:\Program Files (x86)\Steam\steamapps\common\The Binding of Isaac Rebirth\resources\main.lua
 * ```
 *
 * @noSelfInFile
 * @module
 */

/**
 * This is a global function used to create a `Mod` object. Every mod needs to use this function in
 * order to subscribe to the game's various callbacks.
 *
 * @param name The name is stored locally in the `Mod.Name` field, but is otherwise not used for
 *             anything.
 * @param apiVersion In both Afterbirth and Repentance, the only valid API version is 1.
 */
declare function RegisterMod(name: string, apiVersion: APIVersion): Mod;

/**
 * This starts a debug session with ZeroBrane Studio. For more information, see the
 * [documentation](https://wofsauge.github.io/IsaacDocs/rep/tutorials/ZeroBraneStudio.html).
 */
declare function StartDebug(): void;

/**
 * This can be overwritten by other mods, so it is not safe to use. Use the `isRepentance` helper
 * function instead.
 *
 * @deprecated
 */
declare const REPENTANCE: never;

----
types\mods\EID.d.ts
declare const EID: EIDInterface | undefined;

declare interface EIDDescriptionObject {
  Description: string;
  ID: int;
  ItemType: int;
  ItemVariant: int;
  Name: string;
  RealID: int;
  Transformation: string;
  fullItemString: string;
}

/**
 * @param LeftOffset Default is -1.
 * @param TopOffset Default is 0.
 * @param SpriteObject Default is `EID.InlineIconSprite`.
 */
declare type EIDInlineIcon = [
  AnimationName: string,
  Frame: int,
  Width: int,
  Height: int,
  LeftOffset?: int,
  TopOffset?: int,
  SpriteObject?: Sprite,
];

declare type EIDTransformationTargetType =
  | "collectible"
  | "trinket"
  | "card"
  | "pill"
  | "entity";

declare interface EIDInterface {
  /** Gets the size of the screen. */
  GetScreenSize: () => Vector;

  /** Adds a character specific description for the item "Birthright". */
  addBirthright: (
    characterId: int,
    description: string,
    playerName?: string,
    language?: string,
  ) => void;

  /** Adds a description for a card/rune. */
  addCard: (
    id: int,
    description: string,
    itemName?: string,
    language?: string,
  ) => void;

  /** Adds a description for a collectible. */
  addCollectible: (
    id: int,
    description: string,
    itemName?: string,
    language?: string,
  ) => void;

  /**
   * Adds a new color object with the shortcut defined in the "shortcut" variable.
   *
   * Shortcuts are case-sensitive! Shortcuts can be overridden with this function to allow for full
   * control over everything.
   *
   * Define a callback to let it be called when interpreting the color-markup. Define a `KColor`
   * otherwise for a simple color change.
   */
  addColor: (
    shortcut: string,
    kColor: KColor,
    callback?: (color: KColor) => KColor,
  ) => void;

  /**
   * Adds Description object modifiers. Used for altering descriptions. Examples: Spindown Dice,
   * Tarot Cloth, etc.
   *
   * @param condition A function that returns `true` if `callback` should be called on the given
   *                  EIDDescriptionObject.
   * @param callback A function that returns a modified version of the given EIDDescriptionObject.
   */
  addDescriptionModifier: (
    modifierName: string,
    condition: (this: void, testDescription: EIDDescriptionObject) => boolean,
    callback: (
      this: void,
      oldDescription: EIDDescriptionObject,
    ) => EIDDescriptionObject,
  ) => void;

  /**
   * Adds a description for an entity.
   *
   * When subtype is -1 or undefined, it will affect all subtypes of that entity.
   */
  addEntity: (
    id: int,
    variant: int,
    subtype: int | undefined,
    entityName: string,
    description: string,
    language?: string,
  ) => void;

  /**
   * Adds a new icon object with the shortcut defined in the "shortcut" variable.
   *
   * Shortcuts are case-sensitive! Shortcuts can be overridden with this function to allow for full
   * control over everything.
   *
   * @param shortcut
   * @param animationName
   * @param animationFrame Setting to -1 will play the animation.
   * @param width
   * @param height
   * @param leftOffset Default is -1.
   * @param topOffset Default is 0.
   * @param spriteObject Needs to be a `Sprite` with an .anm2 loaded.
   */
  addIcon: (
    shortcut: string,
    animationName: string,
    animationFrame: int,
    width: int,
    height: int,
    leftOffset: float | undefined,
    topOffset: float | undefined,
    spriteObject: Sprite,
  ) => void;

  /** Adds a description for a pill effect. */
  addPill: (
    id: int,
    description: string,
    itemName?: string,
    language?: string,
  ) => void;

  /**
   * Adds a text position modifier `Vector`, which will be applied to the text position variable.
   *
   * Useful to add small offsets. For example: for schoolbag HUD.
   */
  addTextPosModifier: (identifier: string, modifierVector: Vector) => void;

  /** Adds a description for a trinket. */
  addTrinket: (
    id: int,
    description: string,
    itemName?: string,
    language?: string,
  ) => void;

  /**
   * Changes the initial position of all EID descriptions.
   *
   * Useful to totally alter and override the current initial overlay position.
   */
  alterTextPos: (newPosVector: Vector) => void;

  /** Appends a given string to the description of a given `EIDDescriptionObj`. */
  appendToDescription: (
    descObj: EIDDescriptionObject,
    appendString: string,
  ) => void;

  /** Compares two KColors. Returns true if they are equal. */
  areColorsEqual: (c1: KColor, c2: KColor) => boolean;

  /**
   * Assigns transformations to an entity (Adds to existing transformations).
   *
   * When type = entity, targetIdentifier must be in the format "ID.Variant.subtype". For any other
   * type, it can just be the id.
   *
   * Example: `EID.assignTransformation("collectible", 1, "My Transformation")`.
   */
  assignTransformation: (
    targetType: EIDTransformationTargetType,
    targetIdentifier: string | int,
    transformationString: string,
  ) => void;

  /** Creates a copy of a `KColor` object. This prevents overwriting existing `KColor` objects. */
  copyKColor: (colorObj: KColor) => KColor;

  /**
   * Tries to read special markup used to generate icons for all collectibles/trinkets and the
   * default cards/pills.
   *
   * @returns An `EIDInlineIcon` Object or `undefined` if no parsing was possible.
   */
  createItemIconObject: (str: string) => EIDInlineIcon | undefined;

  /** Creates a new transformation. */
  createTransformation: (
    uniqueName: string,
    displayName: string,
    language?: string,
  ) => void;

  /**
   * Overrides all potentially displayed texts and permanently displays the given texts. Can be
   * turned off again using `EID.hidePermanentText`.
   */
  displayPermanentText: (descriptionObject: EIDDescriptionObject) => void;

  /**
   * Filters a given string and looks for `KColor` markup. Splits the text into subsections limited
   * by them.
   *
   * @returns An array of tables containing subsections of the text, their respective `KColor`, and
   *          the width of the subsection.
   */
  filterColorMarkup: (
    text: string,
    baseKColor: KColor,
  ) => Array<[string, KColor, int]>;

  /**
   * Searches through the given string and replaces Icon placeholders with icons. Returns 2 values:
   *
   * - The string without the placeholders but with an accurate space between lines.
   * - An array of tables containing each Inline Sprite and the preceding text width.
   */
  filterIconMarkup: (
    text: string,
    textPosX?: int,
    textPosY?: int,
  ) => LuaMultiReturn<[string, Array<[EIDInlineIcon, int]>]>;

  /**
   * Fits a given string to a specific width.
   *
   * @returns The string as a table of lines.
   */
  fitTextToWidth: (
    str: string,
    textboxWidth: number, // cspell:ignore textbox
  ) => string[];

  /**
   * Generates a string with the defined pixel-length using a custom 1px wide character.
   *
   * This will only work for EID's specific custom font.
   */
  generatePlaceholderString: (length: int) => string;

  /** Returns an adjusted SubType id for special cases like Horse Pills and Golden Trinkets. */
  getAdjustedSubtype: (Type: int, Variant: int, SubType: int) => int;

  /**
   * Gets a `KColor` from a Markup-string (example Input: `"{{ColorText}}"`).
   *
   * @returns The `KColor` object and a `boolean` value indicating if the given string was a color
   *          markup.
   */
  getColor: (
    str: string,
    baseKColor: KColor,
  ) => LuaMultiReturn<[KColor, boolean]>;

  /**
   * Returns the description data table in the current language related to a given id, variant and
   * subtype.
   *
   * Falls back to English if it doesn't exist.
   */
  getDescriptionData: (
    Type: int,
    Variant: int,
    SubType: int,
  ) => EIDDescriptionObject;

  /**
   * Returns the specified object table in the current language.
   *
   * Falls back to English if it doesn't exist.
   */
  getDescriptionEntry: (
    objTable: string,
    objID?: string,
  ) => EIDDescriptionObject;

  /**
   * Returns the description object of the specified entity.
   *
   * Falls back to English if the objID isn't available.
   */
  getDescriptionObj: (
    Type: int,
    Variant: int,
    SubType: int,
  ) => EIDDescriptionObject;

  /** Get `KColor` object of "Error" texts. */
  getErrorColor: () => KColor;

  /** Turns entity type names into actual in-game ID.Variant pairs. */
  getIDVariantString: (typeName: string) => string;

  /**
   * Returns the `EIDInlineIcon` object of a given icon string.
   *
   * Can be used to validate an icon string.
   */
  getIcon: (str: string) => EIDInlineIcon;

  /**
   * Returns the entity that is currently described. Returns last described entity if currently not
   * displaying text.
   */
  getLastDescribedEntity: () => Entity;

  /**
   * Fetches description table from the legacy mod descriptions if they exist.
   *
   * @returns ["", "", description], ["", name, description], or `undefined` (if there is no legacy
   *          description).
   */
  getLegacyModDescription: (
    Type: int,
    Variant: int,
    SubType: int,
  ) => ["", "", string] | ["", string, string] | undefined;

  /** Get `KColor` object of "Entity Name" texts. */
  getNameColor: () => KColor;

  /** Tries to get the in-game name of an item based on its ID. */
  getObjectName: (Type: int, Variant: int, SubType: int) => string;

  /** Converts a given CollectibleID into the respective Spindown dice result. */
  getSpindownResult: (collectibleID: int) => int;

  /** Returns the width of a given string in pixels. */
  getStrWidth: (str: string) => int;

  /** Turns entity type and variants into their EID table-name. */
  getTableName: (Type: int, Variant: int, SubType: int) => string;

  /** Get `KColor` object of "Description" texts. */
  getTextColor: () => KColor;

  /** Returns the current text position. */
  getTextPosition: () => Vector;

  /**
   * Gets the transformation uniqueName / ID of a given entity.
   *
   * Example: `EID:getTransformation(5,100,34)` will return `"12"` which is the id for Bookworm.
   */
  getTransformation: (Type: int, Variant: int, SubType: int) => string;

  /** Get `KColor` object of "Transformation" texts. */
  getTransformationColor: () => KColor;

  /** Returns the icon for a given transformation name or ID. */
  getTransformationIcon: (str: string) => EIDInlineIcon;

  /**
   * Gets the name of the given transformation by its uniqueName / ID.
   *
   * (Note: this function might be broken.)
   */
  getTransformationName: (id: string) => string;

  /**
   * Tries to get the in-game description of an object, based on their description in the XML files.
   *
   * @returns `"(no description available)"` if it cannot find the given object's description.
   */
  getXMLDescription: (Type: int, Variant: int, SubType: int) => string;

  /**
   * Returns the icon used for the bullet-point. It will look at the first word in the given string.
   */
  handleBulletpointIcon: (text: string) => EIDInlineIcon; // cspell:ignore Bulletpoint

  /** Returns `true`, if curse of blind is active. */
  hasCurseBlind: () => boolean;

  /** Check if an entity is part of the describable entities. */
  hasDescription: (entity: Entity) => boolean;

  /** Hides permanently displayed text objects if they exist. */
  hidePermanentText: () => void;

  /** Interpolates between 2 KColors with a given fraction. */
  interpolateColors: (
    kColor1: KColor,
    kColor2: KColor,
    fraction: number,
  ) => KColor;

  /** Returns if EID is displaying text right now. */
  isDisplayingText: () => boolean;

  /** Loads a given font from a given file path and use it to render text. */
  loadFont: (fontFileName: string) => boolean;

  /**
   * Removes a Description object modifier. Used for altering descriptions.
   *
   * Examples: Spindown Dice, Tarot Cloth, etc.
   */
  removeDescriptionModifier: (modifierName: string) => void;

  /**
   * Removes a given value from the string inside a table.
   *
   * Example: `"1,2,3"`, removing `2` will return `"1,3"`.
   */
  removeEntryFromString: (
    sourceTable: LuaMap<string | number, string> | readonly string[],
    entryKey: string | number,
    entryValue: string,
  ) => void;

  /**
   * Removes a text position modifier `Vector`.
   *
   * Useful to remove small offsets. For example: for schoolbag HUD.
   */
  removeTextPosModifier: (identifier: string) => void;

  /**
   * Removes a transformation from an entity.
   *
   * When type = entity, targetIdentifier must be in the format "ID.Variant.subtype". For any other
   * type, it can just be the id.
   *
   * EXAMPLE: `EID.removeTransformation("collectible", 1, "My Transformation")`.
   */
  removeTransformation: (
    targetType: EIDTransformationTargetType,
    targetIdentifier: string | int,
    transformationString: string,
  ) => void;

  /** Helper function to render Icons in specific EID settings. */
  renderIcon: (spriteObj: Sprite, posX: int, posY: int) => void;

  /**
   * Renders a list of given inline sprite objects returned by the `EID.filterIconMarkup` function.
   */
  renderInlineIcons: (
    spriteTable: ReadonlyArray<readonly [icon: EIDInlineIcon, width: int]>,
    posX: int,
    posY: int,
  ) => void;

  /**
   * Renders a given string using the EID custom font. This will also apply any markup and render
   * icons.
   *
   * Needs to be called in a render callback.
   *
   * @returns The last used `KColor`.
   */
  renderString: (
    str: string,
    position: Vector,
    scale: Vector,
    kColor: KColor,
  ) => KColor;

  /** Replaces shorthand-representations of a character with the internal reference. */
  replaceShortMarkupStrings: (text: string) => string;

  /**
   * Converts a given table into a string containing the crafting icons of the table.
   *
   * Example input: `{1,2,3,4,5,6,7,8}`
   *
   * Result:
   * `"{{Crafting8}}{{Crafting7}}{{Crafting6}}{{Crafting5}}{{Crafting4}}{{Crafting3}}{{Crafting2}}{{Crafting1}}"`
   *
   * Prefer `EID.tableToCraftingIconsMerged` due to improved render performance.
   */
  tableToCraftingIconsFull: (craftTable: readonly int[]) => string;

  /**
   * Converts a given table into a string containing the crafting icons of the table, which are also
   * grouped to reduce render lag.
   *
   * Example input: `{1,1,1,2,2,3,3,3}`.
   *
   * Result: `"3{{Crafting3}}2{{Crafting2}}3{{Crafting1}}"`.
   */
  tableToCraftingIconsMerged: (craftTable: readonly int[]) => string;
}

----
types\mods\Encyclopedia.d.ts
import type { PlayerType } from "../../enums/collections/subTypes";
import type { EncyclopediaItemPoolType } from "../../enums/mods/EncyclopediaItemPoolType";

declare global {
  const Encyclopedia: EncyclopediaInterface | undefined;

  /** @noSelf */
  interface EncyclopediaInterface {
    AddCharacter: (args: {
      Class?: string;
      CloseFunc?: (vars: EncyclopediaItemVars) => void;
      CompletionRenderFuncs?: [
        (vec: Vector, notes: EncyclopediaNotes, type: string) => void,
      ];
      CompletionTrackerFuncs?: [() => EncyclopediaItemVars[]];
      Description?: string;
      Hide?: boolean;
      ID: PlayerType;
      ModName?: string;
      Name?: string;
      Sprite?: Sprite;
      UnlockFunc?: (vars: EncyclopediaItemVars) => EncyclopediaItemVars;
      WikiDesc?: EncyclopediaWikiDescription;
    }) => void;

    AddCharacterTainted: (args: {
      Class?: string;
      CloseFunc?: (vars: EncyclopediaItemVars) => void;
      CompletionRenderFuncs?: [
        (vec: Vector, notes: EncyclopediaNotes, type: string) => void,
      ];
      CompletionTrackerFuncs?: [() => EncyclopediaItemVars[]];
      Description?: string;
      Hide?: boolean;
      ID: PlayerType;
      ModName?: string;
      Name?: string;
      Sprite?: Sprite;
      UnlockFunc?: (vars: EncyclopediaItemVars) => EncyclopediaItemVars;
      WikiDesc?: EncyclopediaWikiDescription;
    }) => void;

    AddItem: (itemTab: {
      ActiveCharge?: number;
      Class?: string;
      CloseFunc?: (vars: EncyclopediaItemVars) => void;
      Desc?: string;
      Hide?: boolean;
      ID: number;
      ModName?: string;
      Name?: string;
      Pools?: EncyclopediaItemPoolType[];
      Sprite?: Sprite;
      StatusFunc?: (vars: EncyclopediaItemVars) => EncyclopediaItemVars;
      UnlockFunc?: (vars: EncyclopediaItemVars) => EncyclopediaItemVars;
      WikiDesc?: EncyclopediaWikiDescription;
    }) => void;

    AddItemPoolSprite: (id: number, sprite: Sprite) => void;

    AddPocketItem: (
      itemTab: {
        Class?: string;
        Desc?: string;
        Hide?: boolean;
        ID: number;
        ModName?: string;
        Name?: string;
        Sprite?: Sprite;
        StatusClose?: (vars: EncyclopediaItemVars) => void;
        StatusFunc?: (vars: EncyclopediaItemVars) => EncyclopediaItemVars;
        UnlockFunc?: (
          vars: EncyclopediaItemVars,
        ) => EncyclopediaItemVars | undefined;
        WikiDesc?: EncyclopediaWikiDescription;
      },
      eType: string,
    ) => void;

    AddRune: (itemTab: {
      Class?: string;
      Desc?: string;
      ID: number;
      ModName?: string;
      Name?: string;
      RuneType?: number;
      Sprite?: Sprite;
      StatusClose?: (vars: EncyclopediaItemVars) => void;
      StatusFunc?: (vars: EncyclopediaItemVars) => EncyclopediaItemVars;
      UnlockFunc?: (
        vars: EncyclopediaItemVars,
      ) => EncyclopediaItemVars | undefined;
      WikiDesc?: EncyclopediaWikiDescription;
    }) => void;

    AddTrinket: (itemTab: {
      Class?: string;
      Desc?: string;
      Hide?: boolean;
      ID: number;
      ModName?: string;
      Name?: string;
      Sprite?: Sprite;
      StatusClose?: (vars: EncyclopediaItemVars) => void;
      StatusFunc?: (vars: EncyclopediaItemVars) => EncyclopediaItemVars;
      UnlockFunc?: (
        vars: EncyclopediaItemVars,
      ) => EncyclopediaItemVars | undefined;
      WikiDesc?: EncyclopediaWikiDescription;
    }) => void;

    EIDtoWiki: (desc: string, title?: string) => void;

    GetItemPoolIdByName: (name: string) => number;

    RegisterSprite: (
      gfxRoot: string,
      anmToPlay: string,
      anmFrame: number,
      newSprite?: string,
      layer?: number,
    ) => Sprite;
    ItemPools: int;
  }

  /**
   * Contains Encyclopedia's custom item pool system. It uses custom item pools in order to allow
   * better compatibility with modded pools. The same as the ItemPoolType enum, but every pool is 1
   * value higher, "to handle table indices better".
   */
  type EncyclopediaItemPools = Record<string, number>;

  /**
   * A description for an item. Each object in the array is a category, containing a header and as
   * many paragraphs as are needed.
   */

  interface EncyclopediaWikiDescriptionLine {
    clr?: number;
    fsize?: number; // cspell:ignore fsize
    halign?: number; // cspell:ignore halign
    str: string;
  }

  type EncyclopediaWikiDescription = EncyclopediaWikiDescriptionLine[][];

  /** Encyclopedia's "General Item Variables" object. Used to store data about an item. */
  interface EncyclopediaItemVars {
    CloseFunc: (vars: EncyclopediaItemVars) => void;
    StatusFunc: (vars: EncyclopediaItemVars) => EncyclopediaItemVars;

    AllIndex?: number;
    AllIntIndex: number;
    Class: string;
    Desc?: string;
    Index?: number;
    ItemID: number;
    Name?: string;
    Pools?: EncyclopediaItemPools;
    Spr: Sprite;
    Title?: string;
    WikiDesc?: EncyclopediaWikiDescription;
    typeString: string;
  }

  /** A single entry on the unlock Post-It. */
  interface EncyclopediaPostItUnlock {
    Hard: boolean;
    Unlock: boolean;
  }

  /** Encyclopedia's "Post-It Notes" object. Used for rendering custom Post-Its. */
  interface EncyclopediaNotes {
    Beast: EncyclopediaPostItUnlock;
    BlueBaby: EncyclopediaPostItUnlock;
    BossRush: EncyclopediaPostItUnlock;
    Delirium: EncyclopediaPostItUnlock;
    Hush: EncyclopediaPostItUnlock;
    Isaac: EncyclopediaPostItUnlock;
    Lamb: EncyclopediaPostItUnlock;
    MegaSatan: EncyclopediaPostItUnlock;
    MomsHeart: EncyclopediaPostItUnlock;
    Mother: EncyclopediaPostItUnlock;
    Satan: EncyclopediaPostItUnlock;
  }
}

----
types\mods\InputHelper.d.ts
import type { Keyboard } from "../../enums/Keyboard";

declare global {
  /** This is a global variable exposed as part of ModConfigMenu. */
  const InputHelper: InputHelperInterface | undefined;

  /** @noSelf */
  interface InputHelperInterface {
    KeyboardPressed: (key: Keyboard, controllerIndex: int) => boolean;

    ControllerToString: LuaMap<Keyboard, string>;
    KeyboardToString: LuaMap<Keyboard, string>;
  }
}

----
types\mods\MinimapAPI.d.ts
import type { Dimension } from "../../enums/Dimension";
import type { DoorSlot } from "../../enums/DoorSlot";
import type { EntityType } from "../../enums/EntityType";
import type { DisplayFlag } from "../../enums/flags/DisplayFlag";
import type { GridRoom } from "../../enums/GridRoom";
import type { RoomShape } from "../../enums/RoomShape";
import type { RoomType } from "../../enums/RoomType";

declare global {
  const MinimapAPI: MinimapAPIInterface | undefined;

  interface MinimapAPIInterface {
    AddDisplayFlagsCallback: (
      mod: Mod,
      func: (
        room: MinimapAPIRoomDescriptor,
        flags: BitFlags<DisplayFlag>,
      ) => BitFlags<DisplayFlag> | undefined,
    ) => void;

    AddIcon: (
      id: number | string,
      sprite: Sprite,
      animationName: string,
      frame: number,
      color?: Color,
    ) => {
      Sprite: Sprite;
      animationName: string;
      color?: Color;
      frame: number;
      id: number | string;
    };

    AddMapFlag: (
      id: number | string,
      condition: () => boolean,
      sprite: Sprite,
      animName: string,
      animFrame: number | (() => number),
    ) => {
      ID: number | string;
      anim: string;
      color: Color;
      condition: () => boolean;
      frame: number | (() => number);
      sprite: Sprite;
    };

    AddPickup: (
      id: number | string,
      icon: string | MinimapAPIIcon,
      entityType: EntityType,
      variant: number,
      subtype: number,
      func: (pickup: EntityPickup) => boolean | undefined,
      icongroup: string | number, // cspell:ignore icongroup
      priority: number,
    ) => MinimapAPIRoomDescriptor;

    AddPlayerPositionCallback: (
      mod: Mod,
      func: (
        room: MinimapAPIRoomDescriptor,
        position: Vector,
      ) => Vector | undefined,
    ) => void;

    AddRoom: (table: {
      /**
       * The display flags that this room will take on if seen from an adjacent room. This is
       * usually 0 for secret rooms, 3 for locked rooms and 5 for all others.
       */
      AdjacentDisplayFlags?: DisplayFlag | BitFlags<DisplayFlag>;

      /**
       * The API will automatically remove a room if you add this in the same position, setting this
       * to true will disable this functionality.
       */
      AllowRoomOverlap?: boolean;

      /** The clear boolean for the room. */
      Clear?: boolean;

      /** A Color object that is applied when this room is rendered on the map. */
      Color?: Color;

      /**
       * A RoomDescriptor object if you are attaching a vanilla room to this table. Setting this
       * will cause this room's display flags and clear boolean to be taken from this
       * RoomDescriptor.
       */
      Descriptor?: RoomDescriptor;

      /** The display flags for the room. Matches the format of `RoomDescriptor.DisplayFlags`. */
      DisplayFlags?: DisplayFlag | BitFlags<DisplayFlag>;

      /** See the `Hidden` property of `MinimapAPIRoomDescriptor`. */
      Hidden?: boolean;

      /** Any value. This is used to identify your room later. */
      ID: number | string;

      /**
       * A list of icon IDs that display on the map (e.g. keys and hearts). This will be overridden
       * once the player enters this room.
       */
      ItemIcons?: number[];

      /**
       * A list of strings. This is only shown when the player does not know the room's type (e.g.
       * locked shop, dice room).
       */
      LockedIcons?: string[];

      /**
       * A boolean. If true, then this room's minimap appearance will never be changed by the API
       * itself, meaning its display flags, clear status, visited status and pickup icons will have
       * to be updated externally.
       */
      NoUpdate?: boolean;

      /** A vector representing the position of the room on the minimap. */
      Position: Vector;

      /**
       * A RoomShape enum value that represents the sprite on the minimap and where icons will be
       * placed.
       */
      Shape: RoomShape;

      /**
       * A RoomType enum value. Optional, but recommended if you want the room to work as expected
       * with minimap revealing items.
       */
      Type?: RoomType;

      /**
       * Whether the room has been visited. This will be set to true as soon as the player's map
       * position is in line with this room.
       */
      Visited?: boolean;
    }) => MinimapAPIRoomDescriptor;

    AddRoomShape: (
      id: number | string,
      smallAnims: MinimapAPIRoomAnimsTable, // cspell:ignore Anims
      largeAnims: MinimapAPIRoomAnimsTable,
      gridPivot: Vector,
      gridSize: Vector,
      positions: readonly Vector[],
      iconPositions: readonly Vector[],
      iconPositionCenter: Vector,
      largeIconPositions: readonly Vector[],
      largeIconPositionCenter: readonly Vector[],
      adjacentCoords: Vector,
      doorSlots?: readonly DoorSlot[],
    ) => void;

    GetConfig: (configOption: string) => boolean | number | undefined;

    GetCurrentRoom: () => MinimapAPIRoomDescriptor | undefined;

    GetLevel: (dimension?: Dimension) => MinimapAPIRoomDescriptor[];

    GetPlayerPosition: () => Vector;

    GetPositionRelativeToDoor: (
      room: MinimapAPIRoomDescriptor,
      doorslot: DoorSlot, // cspell:ignore doorslot
    ) => Vector;

    GetRoom: (position: Vector) => MinimapAPIRoomDescriptor | undefined;

    GetRoomAtPosition: (
      position: Vector,
    ) => MinimapAPIRoomDescriptor | undefined;

    GetRoomById: (id: number | string) => MinimapAPIRoomDescriptor | undefined;

    GetRoomByIdx: (
      roomGridIndex: int | GridRoom,
    ) => MinimapAPIRoomDescriptor | undefined;

    GetSaveTable: (menuExit: boolean) => LuaMap;

    IsPositionFree: (position: Vector) => boolean;

    IsPositionFreeNoAlign: (position: Vector, roomShape?: RoomShape) => boolean;

    IsRoomAdjacent: (
      room1: MinimapAPIRoomDescriptor,
      room2: MinimapAPIRoomDescriptor,
    ) => boolean;

    PlayerInRoom: (room: MinimapAPIRoomDescriptor) => boolean;

    RemoveIcon: (id: string | number) => void;

    RemoveRoom: (position: Vector) => void;

    RemoveRoomByID: (id: number | string) => void;

    SetPlayerPosition: (position: Vector) => void;

    Config: {
      Disable: boolean;
      DisplayExploredRooms: boolean;
      DisplayMode: 0 | 1 | 2;
      DisplayOnNoHUD: boolean;
      HideInCombat: boolean;
      MapFrameHeight: number;
      MapFrameWidth: number;
      OverrideLost: boolean;
      OverrideVoid: boolean;
      PositionX: number;
      PositionY: number;
      ShowCurrentRoomItems: boolean;
      ShowIcons: boolean;
      ShowLevelFlags: boolean;
      ShowShadows: boolean;
      SmoothSlidingSpeed: number;
    };

    Debug: {
      Colors: () => void;
      Icons: () => void;
      RandomMap: () => void;
      Shapes: () => void;
    };

    Levels: Map<Dimension, MinimapAPIRoomDescriptor[]>;

    OverrideConfig: {
      Disable?: boolean;
      DisplayExploredRooms?: boolean;
      DisplayMode?: 0 | 1 | 2;
      DisplayOnNoHUD?: boolean;
      HideInCombat?: boolean;
      MapFrameHeight?: number;
      MapFrameWidth?: number;
      OverrideLost?: boolean;
      OverrideVoid?: boolean;
      PositionX?: number;
      PositionY?: number;
      ShowCurrentRoomItems?: boolean;
      ShowIcons?: boolean;
      ShowLevelFlags?: boolean;
      ShowShadows?: boolean;
      SmoothSlidingSpeed?: number;
    };

    PickupChestNotCollected: (pickup: EntityPickup) => boolean | undefined;
    PickupNotCollected: (pickup: EntityPickup) => boolean | undefined;
    PickupSlotMachineNotBroken: (slot: Entity) => boolean | undefined;

    ReleaseVersion?: number;
    Version: string | number;
  }

  interface MinimapAPITeleportHandler {
    CanTeleport: (
      room: MinimapAPIRoomDescriptor,
      cheatMode: boolean,
    ) => boolean;
    Teleport: (room: MinimapAPIRoomDescriptor) => void;
  }

  interface MinimapAPIIcon {
    Color: Color;
    anim: string;
    frame: number;
    sprite: Sprite;
  }

  interface MinimapAPIRoomAnimsTable {
    RoomCurrent: {
      anim: string;
      frame: number;
      sprite: Sprite;
    };

    // cspell:ignore Semivisited
    RoomSemivisited: {
      anim: string;
      frame: number;
      sprite: Sprite;
    };

    RoomUnvisited: {
      anim: string;
      frame: number;
      sprite: Sprite;
    };

    RoomVisited: {
      anim: string;
      frame: number;
      sprite: Sprite;
    };
  }

  interface MinimapAPIRoomDescriptor {
    AddAdjacentRoom: (room: MinimapAPIRoomDescriptor) => void;
    GetAdjacentRooms: () => MinimapAPIRoomDescriptor[];
    GetColor: () => Color;
    GetDisplayFlags: () => BitFlags<DisplayFlag>;
    GetDisplayPosition: () => Vector;
    GetPosition: () => Vector;
    IsClear: () => boolean;
    IsIconVisible: () => boolean;
    IsShadow: () => boolean;
    IsValidTeleportTarget: () => boolean;
    IsVisible: () => boolean;
    IsVisited: () => boolean;
    Remove: () => void;
    RemoveAdjacentRoom: (
      roomToRemove: MinimapAPIRoomDescriptor,
    ) => MinimapAPIRoomDescriptor;
    Reveal: () => void;
    SetDisplayFlags: (displayFlags: BitFlags<DisplayFlag>) => void;
    SetPosition: (pos: Vector) => void;
    SyncRoomDescriptor: () => void;
    UpdateAdjacentRoomsCache: () => void;
    UpdateType: () => void;

    AdjacentDisplayFlags: BitFlags<DisplayFlag>;
    Clear: boolean;
    Color: Color;
    Descriptor: RoomDescriptor;
    Dimension: int;
    DisplayFlags: BitFlags<DisplayFlag>;
    DisplayPosition: Vector;

    /**
     * External mods can set this to unconditionally hide a specific room (regardless of whether the
     * player is in or next to the room).
     *
     * MinimapAPI does not ever set this internally.
     */
    Hidden: boolean;

    ID: int;
    IgnoreDescriptorFlags: boolean;
    ItemIcons: string[];
    LockedIcons: string[];
    NoUpdate: boolean;
    PermanentIcons: string[];
    Position: Vector;
    RenderOffset: Vector;
    Shape: RoomShape;
    TargetRenderOffset: Vector;
    TeleportHandler: MinimapAPITeleportHandler;
    Type: RoomType;
    Visited: boolean;
    VisitedIcons: string[];
  }
}

----
types\mods\ModConfigMenu.d.ts
import type { Controller } from "../../enums/Controller";
import type { Keyboard } from "../../enums/Keyboard";
import type { ModConfigMenuOptionType } from "../../enums/mods/ModConfigMenuOptionType";

declare global {
  const ModConfigMenu: ModConfigMenuInterface | undefined;

  /** @noSelf */
  interface ModConfigMenuInterface {
    AddBooleanSetting: (
      categoryName: string,
      subcategoryName: string,
      attribute: string,
      defaultValue: boolean,
      displayText: string,
      displayValueProxies: LuaMap<boolean, string>,
      info: string,
      color?: string,
    ) => void;

    AddControllerSetting: (
      categoryName: string,
      subcategoryName: string,
      attribute: string,
      defaultValue: Controller,
      displayText: string,
      displayDevice: boolean,
      info: string,
      color?: string,
    ) => void;

    AddKeyboardSetting: (
      categoryName: string,
      subcategoryName: string,
      attribute: string,
      defaultValue: Keyboard,
      displayText: string,
      displayDevice: boolean,
      info: string,
      color?: string,
    ) => void;

    AddNumberSetting: (
      categoryName: string,
      subcategoryName: string,
      attribute: string,
      minValue: number,
      maxValue: number,
      modifyBy: number,
      defaultValue: number,
      displayText: string,
      displayValueProxies: LuaMap<number, string>,
      info: string,
      color?: string,
    ) => void;

    AddScrollSetting: (
      categoryName: string,
      subcategoryName: string,
      attribute: string,
      defaultValue: number,
      displayText: string,
      info: string,
      color?: string,
    ) => void;

    AddSetting: (
      categoryName: string,
      subcategoryName?: string,
      setting?: ModConfigMenuSetting,
    ) => void;

    AddSpace: (categoryName: string, subcategoryName: string) => void;

    AddText: (
      categoryName: string,
      subcategoryName: string,
      text: string | (() => string),
      color?: string,
    ) => void;

    AddTitle: (
      categoryName: string,
      subcategoryName: string,
      text: string,
      color?: string,
    ) => void;

    GetCategoryIDByName: (categoryName: string) => int | undefined;

    GetSubcategoryIDByName: (
      category: string | number,
      subcategoryName: string,
    ) => int;

    RemoveCategory: (categoryName: string) => void;

    RemoveSetting: (
      categoryName: string,
      subcategoryString: string,
      settingAttribute: string,
    ) => void;

    RemoveSubcategory: (categoryName: string, subcategoryName: string) => void;

    SetCategoryInfo: (categoryName: string, info: string) => void;

    SimpleAddSetting: (
      settingType: ModConfigMenuOptionType,
      categoryName: string,
      subcategoryName: string,
      attribute: string,
      minValue: number,
      maxValue: number,
      modifyBy: number,
      defaultValue: number | boolean,
      displayText: string,
      displayValueProxies: LuaMap<number, string> | LuaMap<boolean, string>,
      displayDevice: boolean,
      info: string,
      color?: string,
      functionName?: string,
    ) => void;

    UpdateCategory: (
      categoryName: string,
      categoryData: ModConfigMenuCategoryData,
    ) => void;

    UpdateSubcategory: (
      categoryName: string,
      subcategoryName: string,
      subcategoryData: ModConfigMenuSubcategoryData,
    ) => void;

    Config: {
      General: {
        HudOffset: int;
      };
      LastBackPressed: Keyboard | Controller;
    };

    IsVisible: boolean;

    /**
     * MenuData is not normally supposed to be accessed, but we access it to wipe data during a mod
     * reload.
     */
    MenuData: LuaMap<int, ModConfigMenuData>;

    // cspell:ignore modconfig

    PopupGfx: {
      THIN_SMALL: "gfx/ui/modconfig/popup_thin_small.png";
      THIN_MEDIUM: "gfx/ui/modconfig/popup_thin_medium.png";
      THIN_LARGE: "gfx/ui/modconfig/popup_thin_large.png";
      WIDE_SMALL: "gfx/ui/modconfig/popup_wide_small.png";
      WIDE_MEDIUM: "gfx/ui/modconfig/popup_wide_medium.png";
      WIDE_LARGE: "gfx/ui/modconfig/popup_wide_large.png";
    };

    Version: int;
  }

  /** @noSelf */
  interface ModConfigMenuSetting {
    CurrentSetting: () => number | boolean;
    Display: () => string;
    Info: string[];
    Maximum?: number;
    Minimum?: number;
    ModifyBy?: number;

    /** This will be undefined if the user canceled the popup dialog. */
    OnChange: (newValue: number | boolean | undefined) => void;

    Popup?: () => void;
    PopupGfx?: string;
    PopupWidth?: int;
    Type: ModConfigMenuOptionType;
  }

  interface ModConfigMenuCategoryData {
    Info: string;
    IsOld: boolean;
    Name: string;
  }

  interface ModConfigMenuSubcategoryData {
    Info: string;
    Name: string;
  }

  interface ModConfigMenuData {
    Name: string;
    Subcategories: string[];
  }
}

----
types\mods\MusicModCallback.d.ts
import type { Music } from "../../enums/Music";

declare global {
  const MMC: MusicModCallback | undefined;

  /** @noSelf */
  interface MusicModCallback {
    /**
     * Adds a callback to be triggered whenever a track is about to play. Used for changing music.
     *
     * @param mod The `Mod` object of your mod.
     * @param callback A function that is called every time a track is about to play. The function
     *                 should return one of the following:
     * - a track ID to play that instead
     * - a LuaMultiReturn<[jingleID: Music, trackID: Music]> to play a jingle and queue the track
     * - 0 to prevent the track from playing, and allow the current one to continue
     * - -1 to stop all music
     * - undefined to continue to internal code
     * @param tracks The tracks that will trigger your function call. If this argument is omitted,
     *               all music changes will trigger this callback.
     */
    AddMusicCallback: (
      mod: Mod,
      callback: (
        id: Music,
      ) =>
        | Music
        | LuaMultiReturn<[jingleID: Music, trackID: Music]>
        | number
        | undefined,
      ...tracks: readonly Music[]
    ) => void;

    /**
     * @returns The ID of the intended boss room entry music for this room (e.g. Satan, Mom). If not
     *          in a boss room, it will simply return one of the two generic themes.
     */
    GetBossTrack: () => Music;

    /**
     * @returns Either the ID of the current room's music, or a `LuaMultiReturn` containing the
     *          current jingle's ID and the current room's track ID.
     *
     * WARNING: Using this in an uncleared boss room will return ONLY the boss jingle. If you want
     * the intended boss music, use the `GetBossTrack` method.
     */
    GetMusicTrack: () => LuaMultiReturn<
      [currentRoomMusicOrJingle: Music, currentRoomMusic?: Music]
    >;

    GetStageTrack: () => Music;
    InCustomStage: () => boolean;

    /**
     * @returns A table that behaves identically to the MusicManager class, except that it will call
     *          all mod callbacks. Useful if you want to allow others to change the music of your
     *          custom room or stage with Music API.
     */
    Manager: () => MusicManager;

    /**
     * This will remove all callbacks associated with the mod.
     *
     * @param mod The mod object that you created with RegisterMod.
     */
    RemoveMusicCallback: (mod: Mod) => void;

    /**
     * True if music layers are disabled in favour of a mod that does not allow them. False by
     * default.
     *
     * Change to true if your mod does not support layers.
     *
     * This is not associated with the `MusicManager.DisableLayer` method. It takes priority if
     * true.
     */
    DisableMusicLayers: boolean;

    /** This variable is true if the mod has fully loaded. False otherwise. */
    Initialised: boolean; // cspell:ignore Initialised

    /**
     * The current version of the API. You can check that the right version is installed with your
     * mod, as there is a slight possibility that future versions will not be backwards compatible.
     * The mod version in metadata may not match this.
     */
    Version: string;
  }
}

----
types\mods\Sandbox.d.ts
// This is the Racing+ sandbox provided by the Electron client.

/** @noSelf */
declare interface Sandbox {
  connect: (
    hostname: string,
    port: int,
    useTCP: boolean,
  ) => SocketClient | undefined;
  connectLocalhost: (port: int, useTCP: boolean) => SocketClient | undefined;
  getDate: (format?: string) => string;
  getParentFunctionDescription: (levels: int) => string;
  getTime: () => float;
  getTraceback: () => string;
  init: () => void;
  isSocketInitialized: () => boolean;
  traceback: () => void;
}

----
types\mods\SandboxGlobals.d.ts
/** @noSelfInFile */

/**
 * This is a global function provided by the Racing+ client sandbox. If the sandbox is not present,
 * it will be undefined.
 */
declare const SandboxGetDate: (() => string) | undefined;

/**
 * This is a global function provided by the Racing+ client sandbox. If the sandbox is not present,
 * it will be undefined.
 *
 * @param levels The amount of levels to look backwards in the call stack.
 */
declare const SandboxGetParentFunctionDescription:
  | ((levels: int) => string)
  | undefined;

/**
 * This is a global function provided by the Racing+ client sandbox. If the sandbox is not present,
 * it will be undefined.
 */
declare const SandboxGetTime: (() => float) | undefined;

/**
 * This is a global function provided by the Racing+ client sandbox. If the sandbox is not present,
 * it will be undefined.
 */
declare const SandboxGetTraceback: (() => string) | undefined;

/**
 * This is a global function provided by the Racing+ client sandbox. If the sandbox is not present,
 * it will be undefined.
 */
declare const SandboxTraceback: (() => void) | undefined;

----
types\mods\StageAPI.d.ts
// cspell:ignore STAGEAPI

import type { Direction } from "../../enums/Direction";
import type { DoorSlot } from "../../enums/DoorSlot";
import type { GridEntityType } from "../../enums/GridEntityType";
import type { LevelStage } from "../../enums/LevelStage";
import type { RoomShape } from "../../enums/RoomShape";
import type { RoomTransitionAnim } from "../../enums/RoomTransitionAnim";
import type { RoomType } from "../../enums/RoomType";
import type { StageType } from "../../enums/StageType";
import type { StageAPICallback } from "../../enums/mods/StageAPIEnums";

declare global {
  const StageAPI: StageAPIInterface | undefined;

  interface StageAPICallbackParameters {
    [StageAPICallback.POST_CHANGE_ROOM_GFX]: [callback: (this: void) => void];

    [StageAPICallback.POST_CHECK_VALID_ROOM]: [
      callback: (
        this: void,
        roomList: unknown,
        seed: Seed,
        shape: RoomShape,
        rType: RoomType,
        requireRoomType: unknown,
      ) => void,
    ];

    [StageAPICallback.POST_CUSTOM_DOOR_UPDATE]: [
      callback: (
        door: unknown,
        data: unknown,
        sprite: unknown,
        customDoor: unknown,
        persistData: unknown,
      ) => void,
    ];

    [StageAPICallback.POST_CUSTOM_GRID_PROJECTILE_HELPER_UPDATE]: [
      callback: (
        customGridEntity: unknown,
        projectileHelper: unknown,
        projectileHelperParent: unknown,
      ) => void,
    ];

    [StageAPICallback.POST_CUSTOM_GRID_PROJECTILE_UPDATE]: [
      callback: (customGridEntity: unknown, projectile: unknown) => void,
    ];

    [StageAPICallback.POST_CUSTOM_GRID_REMOVE]: [
      callback: (
        spawnIndex: unknown,
        persistData: unknown,
        customGrid: unknown,
        customGridTypeName: unknown,
      ) => void,
    ];

    [StageAPICallback.POST_CUSTOM_GRID_UPDATE]: [
      callback: (customGridEntity: unknown) => void,
    ];

    [StageAPICallback.POST_GRID_UPDATE]: [callback: () => void];

    [StageAPICallback.POST_OVERRIDDEN_GRID_BREAK]: [
      callback: (
        this: void,
        gridIndex: int,
        grid: GridEntity,
        justBrokenGridSpawns?: LuaMap<int, StageAPIRemovedEntityData>,
      ) => false | undefined,
    ];

    [StageAPICallback.POST_ROOM_INIT]: [
      callback: (
        this: void,
        currentRoom: StageAPILevelRoom,
        fromSaveData: unknown,
        saveData: unknown,
      ) => void,
    ];

    [StageAPICallback.POST_ROOM_LOAD]: [
      callback: (
        this: void,
        currentRoom: StageAPILevelRoom,
        isFirstLoad: boolean,
        isExtraRoom: boolean,
      ) => void,
    ];

    [StageAPICallback.POST_SPAWN_CUSTOM_DOOR]: [
      callback: (
        door: unknown,
        data: unknown,
        sprite: unknown,
        customDoor: unknown,
        persistData: unknown,
        index: unknown,
        force: unknown,
        respawning: unknown,
        grid: unknown,
        customGrid: unknown,
      ) => void,
    ];

    [StageAPICallback.POST_SPAWN_CUSTOM_GRID]: [
      callback: (
        customGridEntity: unknown,
        force: unknown,
        respawning: unknown,
      ) => void,
    ];

    [StageAPICallback.POST_STAGEAPI_NEW_ROOM]: [callback: () => void];

    [StageAPICallback.POST_STAGEAPI_NEW_ROOM_GENERATION]: [
      callback: (justGenerated: unknown, currentRoom: unknown) => void,
    ];

    [StageAPICallback.PRE_BOSS_SELECT]: [
      callback: (bosses: unknown, allowHorseman: unknown, rng: unknown) => void,
    ];

    [StageAPICallback.PRE_CHANGE_ROOM_GFX]: [
      callback: (currentRoom: unknown) => void,
    ];

    [StageAPICallback.PRE_ROOM_LAYOUT_CHOOSE]: [
      callback: (
        this: void,
        currentRoom: unknown,
        roomsList: unknown,
      ) => StageAPICustomRoomConfig | undefined,
    ];

    [StageAPICallback.PRE_SELECT_ENTITY_LIST]: [
      callback: (
        entityList: unknown,
        spawnIndex: unknown,
        addEntities: unknown,
      ) => void,
    ];

    // cspell:ignore GRIDENTITY
    [StageAPICallback.PRE_SELECT_GRIDENTITY_LIST]: [
      callback: (gridDataList: unknown, spawnIndex: unknown) => void,
    ];

    [StageAPICallback.PRE_SELECT_NEXT_STAGE]: [
      callback: (currentStage: unknown) => void,
    ];

    [StageAPICallback.PRE_SPAWN_ENTITY]: [
      callback: (
        entityInfo: unknown,
        entityList: unknown,
        index: unknown,
        doGrids: unknown,
        doPersistentOnly: unknown,
        doAutoPersistent: unknown,
        avoidSpawning: unknown,
        persistenceData: unknown,
        shouldSpawnEntity: unknown,
      ) => void,
    ];

    [StageAPICallback.PRE_SPAWN_ENTITY_LIST]: [
      callback: (
        entityList: unknown,
        spawnIndex: unknown,
        doGrids: unknown,
        doPersistentOnly: unknown,
        doAutoPersistent: unknown,
        avoidSpawning: unknown,
        persistenceData: unknown,
      ) => void,
    ];

    [StageAPICallback.PRE_SPAWN_GRID]: [
      callback: (
        this: void,
        gridData: unknown,
        gridInformation: unknown,
        entities: unknown,
        gridSpawnRNG: RNG,
      ) => boolean | undefined,
    ];

    [StageAPICallback.PRE_STAGEAPI_NEW_ROOM]: [callback: (this: void) => void];

    [StageAPICallback.PRE_TRANSITION_RENDER]: [callback: () => void];

    [StageAPICallback.PRE_UPDATE_GRID_GFX]: [callback: () => void];
  }

  /** @noSelf */
  interface StageAPIInterface {
    /** Creates a custom boss. */
    AddBossData: (id: string, bossData: StageAPIBossData) => void;

    /** Add boss to current floor. */
    AddBossToBaseFloorPool: (
      pool: StageAPIPoolEntry,
      stage: LevelStage,
      stageType: StageType,
    ) => void;

    /**
     * Stores a function and its params in a table indexed by `ID` and sorted by `priority`, where
     * low priority is at the start.
     */
    AddCallback: <T extends StageAPICallback>(
      modID: string,
      id: T,
      priority: int,
      ...args: StageAPICallbackParameters[T]
    ) => void;

    /**
     * Convenience function that assembles filenames and packages them in a Backdrop for you.
     *
     * @param prefix The path to the directory containing the backdrop sprite sheets, as well as any
     *               shared prefix. Example: `gfx/backdrop/revel1/glacier/main_`
     * @param suffix Generally the file extension, e.g.: `".png"`
     */
    BackdropHelper: (
      backdrop: StageAPIBackdrop | readonly StageAPIBackdrop[],
      prefix: string,
      suffix: string,
    ) => StageAPIBackdrop[];

    ChangeBackdrop: ((
      backdrop: StageAPIBackdrop,
      justWalls?: boolean,
      storeBackdropEntities?: false,
    ) => void) &
      ((
        backdrop: StageAPIBackdrop,
        justWalls: boolean,
        storeBackdropEntities: true,
      ) => Entity[]);

    ChangeDecoration: (decoration: StageAPIGridContainer) => void;

    ChangeDoor: (
      container: StageAPIGridContainer,
      doorInfo: StageAPIDoorInfo,
      payToPlayFile?: string,
    ) => void;

    ChangePit: (
      gridContainer: StageAPIGridContainer,
      fileName?: string,
      bridgeFileName?: string,
      altFileName?: string,
    ) => void;

    ChangeRock: (container: StageAPIGridContainer) => void;

    CheckBridge: (
      gridEntity: GridEntity,
      gridIndex: int,
      bridgeFileName: string,
    ) => void;

    /** Function to create a custom floor layout. */
    CreateMapFromRoomsList: (
      roomsList: StageAPIRoomsList,
      mapRoomVariant?: int,
    ) => StageAPILevelMap;

    /**
     * Creates a new custom grid entity type. Any undocumented parameters are unknown in type and/or
     * usage.
     *
     * @param name NAME IS NOT OPTIONAL. USED FOR IDENTIFICATION AFTER SAVING.
     * @param anm2 Path to the anm2 file for this entity.
     * @param animation The animation name to play.
     * @param frame Which frame to display.
     */
    CustomGrid: (
      name: string,
      GridEntityType: GridEntityType,
      baseVariant: number,
      anm2: string,
      animation: string,
      frame: number,
      variantFrames: unknown,
      offset: unknown,
      overrideGridSpawns: boolean,
      overrideGridSpawnAtState: boolean,
      forceSpawning: boolean,
    ) => StageAPICustomGrid;

    /**
     * Creates a new custom stage.
     *
     * @param name MUST BE UNIQUE. USED TO IDENTIFY STAGE AND FOR SAVING CURRENT STAGE.
     * @param noSetReplaces Replaces defaults to catacombs one if noSetReplaces is not set.
     */
    CustomStage: (
      name: string,
      stageOverrideStage?: StageAPIStageOverrideStage,
      noSetReplaces?: boolean,
    ) => StageAPICustomStage;

    /** Used to go to a specific room when on a custom StageAPI floor. */
    ExtraRoomTransition: (
      levelMapRoomID: int,
      direction: Direction,
      transitionType: RoomTransitionAnim,
      levelMapID: unknown,
      leaveDoor?: int,
      enterDoor?: int,
      setPlayerPosition?: unknown,
      extraRoomBaseType?: unknown,
    ) => void;

    /**
     * On the first run after opening the game for the first time, StageAPI gathers a bunch of data
     * from vanilla rooms so that it can properly build custom stages. If a mod is initializing a
     * custom stage, they must first check on every `POST_RENDER` frame until this method returns
     * true.
     */
    FinishedLoadingData: () => boolean;

    GetBossData: (id: string) => StageAPIBossData;
    GetCurrentLevelMap: () => StageAPILevelMap;
    GetCurrentRoom: () => StageAPILevelRoom | undefined;

    /** Roughly analogous to the vanilla `Level.GetCurrentRoomIndex` function. */
    GetCurrentRoomID: () => int;

    GetCurrentRoomType: () => RoomType;

    /** Gets the current custom stage. */
    GetCurrentStage: () => StageAPICustomStage | undefined;

    GetCurrentStageDisplayName: () => string;

    GetCustomGrids: (
      index: int | undefined,
      name: string,
    ) => StageAPICustomGridEntity[];

    /** Teleports the player(s) to a specified stage. */
    GotoCustomStage: (
      customStage: StageAPICustomStage,
      playTransition?: boolean,
      noForgetSeed?: boolean,
    ) => void;

    GridGfx: () => StageAPIGridGfx;
    InNewStage: () => boolean;
    InOverrideStage: () => boolean;
    InOverridenStage: () => boolean; // cspell:ignore overriden
    InitCustomLevel: (
      levelMap: StageAPILevelMap,
      levelStartRoom: boolean,
    ) => void;
    IsCustomGrid: (gridIndex: int) => boolean;
    IsDoorSlotAllowed: (slot: DoorSlot) => boolean;

    LoadCustomMapRoomDoors: (
      levelRoom: StageAPILevelRoom,
      roomData: StageAPIRoomData,
      levelMap?: StageAPILevelMap,
    ) => void;

    PlayTextStreak: (params: StageAPITextStreakParams) => void;

    /** Constructor for the RoomGfx object. */
    RoomGfx: (
      backdrop: StageAPIBackdrop,
      gridGfx: StageAPIGridGfx | undefined,
      shadingName: string,
      shadingPrefix: string,
    ) => StageAPIRoomGfx;

    RoomsList: (
      name: string,
      ...layouts: readonly unknown[]
    ) => StageAPIRoomsList;
    SetCurrentRoom: (room: StageAPILevelRoom) => void;
    SetDoorOpen: (open: boolean, door: Entity) => void;

    SpawnCustomDoor: (
      slot: DoorSlot,
      leadsToExtraRoomName: string,
      levelMapID: unknown,
      doorDataName: string,
      data: unknown,
      exitSlot: DoorSlot | undefined,
    ) => void;

    SpawnCustomTrapdoor: (
      position: Vector,
      goesTo: StageAPICustomStage,
      anm2: string | undefined,
      size?: int,
    ) => Entity;

    /** Unregisters all mod callbacks, should be used when a mod loads, useful for `luamod`. */
    UnregisterCallbacks: (modID: string) => void;

    Callbacks: Record<StageAPICallback, unknown>;

    /** Where default doors should spawn. */
    DefaultDoorSpawn: StageAPIDoorInfo;

    /** Where default doors should spawn. */
    SecretDoorSpawn: StageAPIDoorInfo;

    StageOverride: {
      CatacombsOne: 1;
      CatacombsTwo: 2;
    };
  }
}

----
types\mods\StageAPIInterfaces.d.ts
import type { Dimension } from "../../enums/Dimension";
import type { EntityType } from "../../enums/EntityType";
import type { GridEntityType } from "../../enums/GridEntityType";
import type { LevelStage } from "../../enums/LevelStage";
import type { RoomShape } from "../../enums/RoomShape";
import type { RoomType } from "../../enums/RoomType";
import type { StageType } from "../../enums/StageType";

declare global {
  interface StageAPIBackdrop {
    Corners: string[];
    LFloors: string[];
    NFloors: string[];
    Walls: string[];
  }

  interface StageAPICustomDoor {
    AlwaysOpen: boolean;
    Anm2: string;
    CloseAnim: string;
    ClosedAnim: string;
    DirectionOffsets: unknown;
    ExitFunction: string;
    Name: string;
    NoAutoHandling: boolean;
    OpenAnim: string;
    OpenedAnim: string;
    TransitionAnim: int;
  }

  interface StageAPICustomGrid {
    Spawn: (
      grindex: number, // cspell:ignore grindex
      force: boolean,
      reSpawning: boolean,
      initialPersistData: unknown,
    ) => StageAPICustomGridEntity;
  }

  interface StageAPICustomGridEntity {
    Remove: (keepBaseGrid: boolean) => void;
    Data: Record<string, unknown>;
    GridConfig: StageAPICustomGrid;
    GridIndex: int;
    PersistentData: Record<string, unknown>;
  }

  interface StageAPIEntityInfo {
    Data: StageAPIEntityData;
    Persistent: boolean;
    PersistentData: boolean;
    PersistentIndex: int;
  }

  interface StageAPICustomStage {
    /** Gets the ID of the currently playing music. */
    GetPlayingMusic: () => int;

    /**
     * Automatically aliases the new stage to the old one, if noSetAlias is not set.
     *
     * This means that IsStage calls on either will return true if either is active.
     *
     * STILL NEEDS A UNIQUE NAME.
     */
    InheritInit: (name: string, noSetAlias?: boolean) => void;

    /** If this CustomStage is, in fact, a stage. */
    IsStage: (noAlias: boolean) => boolean;

    /**
     * Indicates that this stage overrides alt rock effects.
     *
     * @param rooms If present, only overrides rock alt effects for the specified RoomTypes. If
     *              absent, overrides alt rocks everywhere.
     *
     * DOES NOT add any new effects on its own.
     */
    OverrideRockAltEffects: (rooms?: readonly RoomType[]) => void;

    /** Sets the boss music used by the stage. */
    SetBossMusic: (
      musicID: int,
      clearedMusicID: int,
      introMusicID: int,
      outroMusicID: int,
    ) => void;

    /** Sets the available bosses for the stage. */
    SetBosses: (bossIDs: readonly string[]) => void;

    /** Sets the name displayed to the player. */
    SetDisplayName: (name: string) => void;

    /** Sets if this is the second half of a stage. */
    SetIsSecondStage: (isSecondStage: boolean) => void;

    /** Sets the music used by the stage. */
    SetMusic: (musicID: int, roomType: RoomType) => void;

    /**
     * Sets the internal name/id.
     *
     * MUST BE UNIQUE.
     */
    SetName: (name: string) => void;

    /** Sets the stage after this one. */
    SetNextStage: (
      nextStage: StageAPICustomStage | StageAPIVanillaStage,
    ) => void;

    /** Sets the stage this `CustomStage` overrides. */
    SetReplace: (stageOverrideStage: StageAPIStageOverrideStage) => void;

    /**
     * Sets the RoomGfx used by the stage.
     *
     * @param RoomTypes The room types these gfx apply to.
     *
     * Can be a string identifier, a `RoomType`, or an array of either.
     */
    SetRoomGfx: (
      roomGfx: StageAPIRoomGfx,
      roomTypes: string | RoomType | readonly string[] | readonly RoomType[],
    ) => void;

    /** Sets the list room layouts used by the stage. */
    SetRooms: (roomsList: StageAPIRoomsList) => void;

    /**
     * Sets the paths to the "spot" graphic, the patch of ground underneath the boss, and player
     * sprites in the pre-boss cutscene.
     */
    SetSpots: (
      bossSpot?: string,
      playerSpot?: string,
      bgColor?: Color,
      dirtColor?: Color,
    ) => void;

    /** Sets the stage's music. */
    SetStageMusic: (music: number, types: readonly RoomType[]) => void;

    /** Sets the stage's number. */
    SetStageNumber: (num: int) => void;

    /** Sets the path to the stage transition icon. */
    SetTransitionIcon: (iconPath: string) => void;
  }

  interface StageAPIDoorInfo {
    IsBossAmbush?: boolean;
    NotCurrent?: RoomType[];
    NotEither?: RoomType[];
    NotTarget?: RoomType[];
    RequireCurrent?: RoomType[];
    RequireEither?: RoomType[];
    RequireTarget?: RoomType[];
  }

  interface StageAPIGridContainer {
    Desc: GridEntityDesc;
    Grid: GridEntity;
    Index: int;
    Type: GridEntityType;
  }

  interface StageAPIGridGfx {
    /** Sets the path to the gfx sprite sheet of the specified subset of doors. */
    AddDoors: (filename: string, DoorInfo: StageAPIDoorInfo) => void;

    /** Sets the path to the bridge gfx sprite sheet. */
    SetBridges: (filename: string) => void;

    /** Sets the path to the decoration gfx sprite sheet. */
    SetDecorations: (filename: string) => void;

    /** Sets the path to the gfx sprite sheet for the specified `GridEntityType`. */
    SetGrid: (
      filename: string,
      GridEntityType: GridEntityType,
      variant: int,
    ) => void;

    /** Sets the path to the pay-to-play door gfx sprite sheet. */
    SetPayToPlayDoor: (filename: string) => void;

    /**
     * Sets the path to the pit gfx sprite sheet.
     *
     * Alt Pits are used where water pits would be.
     *
     * @param hasExtraFrames Controls for situations where the base game would not normally tile
     *                       pits specially.
     */
    SetPits: ((
      filename: string,
      altPitsFilename?: string,
      hasExtraFrames?: boolean,
    ) => void) &
      ((
        filenames: ReadonlyArray<{
          filename: string;
          hasExtraFrames?: boolean;
        }>,
        altPitsFilenames: ReadonlyArray<{
          filename: string;
          hasExtraFrames?: boolean;
        }>,
      ) => void);

    /** Sets the path to the rock gfx sprite sheet. */
    SetRocks: (filename: string) => void;
  }

  interface StageAPILevelMap {
    GetCurrentRoomData: () => StageAPIRoomData;
    GetRoom: (roomData: StageAPIRoomData) => StageAPILevelRoom;
    Map: StageAPIRoomData[];
  }

  interface StageAPIEntityData {
    GridX: int;
    GridY: int;
    Index: int;
    SubType: int;
    Type: int;
    Variant: int;
  }

  interface StageAPILevelRoom {
    SetTypeOverride: (typeOverride: RoomType) => void;
    AvoidSpawning: unknown;
    AwardSeed: Seed;
    ClearCount: int;
    Data: unknown;
    DecorationSeed: Seed;
    Dimension: Dimension;
    Doors: unknown;
    ExtraSpawn: unknown;
    FirstLoad: boolean;
    Layout: {
      Name: string;
      Variant: int;
    };
    PersistenceData: unknown;
    PersistentData: unknown;
    RoomType: RoomType;
    RoomsListName: string;
    Seed: Seed;
    Shape: RoomShape;
    SpawnSeed: Seed;
    SurpriseMiniboss: boolean;
    VisitCount: int;
  }

  interface StageAPIOverlay {
    Fade: (total: int, time: int, step: int) => void;
    Render: (noCenterCorrect: boolean) => void;
    SetAlpha: (alpha: int, noCancelFade: boolean) => void;
    Anm2: string;
    Offset?: Vector;
    Size?: Vector;
    Velocity?: Vector;
  }

  interface StageAPIRemovedEntityData {
    Position: Vector;
    Seed: Seed;
    Spawner?: Entity;
    SubType: int;
    Type: EntityType;
    Variant: int;
    Velocity: Vector;
  }

  interface StageAPIRoomData {
    MapID: int;
    RoomID: int;
    X: int;
    Y: int;
  }

  interface StageAPIRoomGfx {
    Backdrop: Sprite;
    GridGfx: Sprite;
    shadingName: string;
    shadingPrefix: string;
  }

  interface StageAPIGridData {
    GridX: int;
    GridY: int;
    Index: int;
    Type: int;
    Variant: int;
  }

  interface StageAPIRoomsList {
    AddRooms: (
      roomFiles: readonly string[] | readonly StageAPICustomRoomConfig[],
    ) => void;
  }

  interface StageAPIStageOverrideStage {
    OverrideStage: LevelStage;
    OverrideStageType: StageType;
    ReplaceWith: StageAPICustomStage | StageAPIVanillaStage;
  }

  interface StageAPITextStreakParams {
    Color?: Color;
    ExtraFontScale?: Vector;
    ExtraOffset?: Vector;
    Font?: Font;
    Hold?: boolean;
    HoldFrames?: int;
    LineSpacing?: int;
    RenderPos?: Vector;
    SmallFont?: Font;
    SpriteOffset?: Vector;
    Spritesheet?: string;
    Text: string;
    TextOffset: Vector;
  }

  interface StageAPIVanillaStage {
    NormalStage: true;
    Stage: LevelStage;
    StageType: StageType;
  }

  interface StageAPIBossData {
    Bossname: string; // cspell:ignore Bossname
    Entity?: {
      Type: EntityType;
      Variant: number;
    };
    Name: string;
    Offset?: Vector;
    Portrait: string;
    Rooms: StageAPIRoomsList;
  }

  interface StageAPIPoolEntry {
    AlwaysReplaceHorsemen?: boolean;
    AlwaysReplaceSubtype?: int;
    BossID: string;
    Horseman?: boolean;
    OnlyReplaceSubtype?: int;
    Weight?: int;
  }
}

----
types\mods\StageAPIUnofficial.d.ts
// cspell:ignore STAGEAPI GRIDENTITY

import type { DoorSlot } from "../../enums/DoorSlot";

declare global {
  type StageAPICustomRoomConfig = LuaMap<
    number | string,
    StageAPILuaRoomGenericEntity | number | string
  >;

  interface StageAPILuaRoomDoor extends StageAPILuaRoomGenericEntity {
    EXISTS: boolean;
    SLOT: DoorSlot;
  }

  interface StageAPILuaRoomEntity extends StageAPILuaRoomGenericEntity {
    1: {
      TYPE: int;
      VARIANT: int;
      SUBTYPE: int;
      WEIGHT: float;
      METADATA?: unknown;
    };
  }

  interface StageAPILuaRoomGenericEntity {
    GRIDX: int; // cspell:ignore GRIDX
    GRIDY: int; // cspell:ignore GRIDY
    ISDOOR: boolean; // cspell:ignore ISDOOR
  }
}

----
types\socket.d.ts
/**
 * The "socket.lua" module exists at:
 *
 * ```text
 * C:\Program Files (x86)\Steam\steamapps\common\The Binding of Isaac Rebirth\resources\scripts\socket.lua
 * ```
 *
 * It can only be used if the "--luadebug" launch option is enabled. For more information, see [the
 * wiki](https://bindingofisaacrebirth.fandom.com/wiki/Launch_Options).
 *
 * IsaacScript mods can import it like this:
 *
 * ```ts
 * let socket: Socket | null = null;
 * const [ok, requiredSocket] = pcall(require, "socket");
 * if (ok) {
 *   socket = requiredSocket as Socket;
 * } else {
 *   // The "--luadebug" launch option is not enabled. Handle the error case.
 * }
 * ```
 *
 * Also see the [documentation for the socket
 * library](https://web.tecgraf.puc-rio.br/luasocket/old/luasocket-2.0-beta/tcp.html).
 *
 * @noSelf
 */
declare interface Socket {
  /**
   * Returns the epoch timestamp in seconds, with four decimal places of precision (e.g.
   * `1640320492.5779`).
   */
  gettime: () => float;

  /**
   * Creates and returns a TCP master object. A master object can be transformed into a server
   * object with the method listen (after a call to bind) or into a client object with the method
   * connect. The only other method supported by a master object is the close method.
   *
   * In case of success, a new master object is returned. In case of error, nil is returned,
   * followed by an error message.
   */
  tcp: () => SocketClient;

  /**
   * Creates and returns an unconnected UDP object. Unconnected objects support the sendto, receive,
   * receivefrom, getsockname, setoption, settimeout, setpeername, setsockname, and close. The
   * setpeername is used to connect the object.
   *
   * In case of success, a new unconnected UDP object returned. In case of error, nil is returned,
   * followed by an error message.
   */
  udp: () => SocketClient;
}

declare interface SocketClient {
  /**
   * Closes a TCP object. The internal socket used by the object is closed and the local address to
   * which the object was bound is made available to other applications. No further operations
   * (except for further calls to the close method) are allowed on a closed socket.
   */
  close: () => void;

  /**
   * Attempts to connect a master object to a remote host, transforming it into a client object.
   * Client objects support methods `send`, `receive`, `getsockname`, `getpeername`, `settimeout`,
   * and close.
   *
   * Address can be an IP address or a host name. Port must be an integer number.
   *
   * In case of error, the method returns undefined followed by a string describing the error. In
   * case of success, the method returns 1.
   */
  connect: (
    host: string,
    port: int,
  ) => LuaMultiReturn<[returnCode: int, errMsg: string]>;

  /**
   * Reads data from a client object, according to the specified read pattern. Patterns follow the
   * Lua file I/O format, and the difference in performance between all patterns is negligible.
   *
   * Pattern can be any of the following:
   *
   * - '*a': reads from the socket until the connection is closed. No end-of-line translation is
   *   performed.
   * - '*l': reads a line of text from the socket. The line is terminated by a LF character (ASCII
   *   10), optionally preceded by a CR character (ASCII 13). The CR and LF characters are not
   *   included in the returned line. In fact, all CR characters are ignored by the pattern. This is
   *   the default pattern.
   * - number: causes the method to read a specified number of bytes from the socket.
   *
   * Prefix is an optional string to be concatenated to the beginning of any received data before
   * return.
   *
   * If successful, the method returns the received pattern. In case of error, the method returns
   * undefined followed by an error message which can be the string "closed" in case the connection
   * was closed before the transmission was completed or the string "timeout" in case there was a
   * timeout during the operation. Also, after the error message, the function returns the partial
   * result of the transmission.
   */
  receive: () => LuaMultiReturn<[data: string | undefined, errMsg: string]>;

  /**
   * Sends data through client object.
   *
   * Data is the string to be sent. The optional arguments i and j work exactly like the standard
   * string.sub Lua function to allow the selection of a substring to be sent.
   *
   * If successful, the method returns the index of the last byte within [i, j] that has been sent.
   * Notice that, if i is 1 or absent, this is effectively the total number of bytes sent. In case
   * of error, the method returns undefined, followed by an error message, followed by the index of
   * the last byte within [i, j] that has been sent. You might want to try again from the byte
   * following that. The error message can be "closed" in case the connection was closed before the
   * transmission was completed or the string 'timeout' in case there was a timeout during the
   * operation.
   */
  send: (
    msg: string,
  ) => LuaMultiReturn<[sentBytes: int | undefined, errMsg: string]>;

  /**
   * Changes the peer of a UDP object. This method turns an unconnected UDP object into a connected
   * UDP object or vice versa.
   *
   * For connected objects, outgoing datagrams will be sent to the specified peer, and datagrams
   * received from other peers will be discarded by the OS. Connected UDP objects must use the
   * `send` and `receive` methods instead of `sendto` and `receivefrom`.
   *
   * Address can be an IP address or a host name. Port is the port number. If address is "*" and the
   * object is connected, the peer association is removed and the object becomes an unconnected
   * object again. In that case, the port argument is ignored.
   *
   * In case of error the method returns undefined followed by an error message. In case of success,
   * the method returns 1.
   */
  setpeername: (
    host: string,
    port: int,
  ) => LuaMultiReturn<[returnCode: int, errMsg: string]>;

  /**
   * Changes the timeout values for the object. By default, all I/O operations are blocking. That
   * is, any call to the methods send, receive, and accept will block indefinitely, until the
   * operation completes. The settimeout method defines a limit on the amount of time the I/O
   * methods can block. When a timeout is set and the specified amount of time has elapsed, the
   * affected methods give up and fail with an error code.
   *
   * The amount of time to wait is specified as the value parameter, in seconds. There are two
   * timeout modes and both can be used together for fine tuning:
   *
   * - 'b': block timeout. Specifies the upper limit on the amount of time LuaSocket can be blocked
   *   by the operating system while waiting for completion of any single I/O operation. This is the
   *   default mode.
   * - 't': total timeout. Specifies the upper limit on the amount of time LuaSocket can block a Lua
   *   script before returning from a call.
   *
   * The nil timeout value allows operations to block indefinitely. Negative timeout values have the
   * same effect.
   */
  settimeout: (timeout: int) => void;
}

----
types\unofficial\APIVersion.d.ts
/** In both Afterbirth+ and Repentance, the only valid API version is 1. */
declare type APIVersion = 1;

----
types\unofficial\AddCallbackParameters.d.ts
/* eslint-disable deprecation/deprecation */

import type { ActiveSlot } from "../../enums/ActiveSlot";
import type { ButtonAction } from "../../enums/ButtonAction";
import type {
  CardType,
  CollectibleType,
  PillColor,
  PlayerType,
  TrinketType,
} from "../../enums/collections/subTypes";
import type {
  BombVariant,
  EffectVariant,
  FamiliarVariant,
  LaserVariant,
  PickupVariant,
  PlayerVariant,
  ProjectileVariant,
  TearVariant,
} from "../../enums/collections/variants";
import type { EntityType } from "../../enums/EntityType";
import type { CacheFlag } from "../../enums/flags/CacheFlag";
import type { DamageFlag } from "../../enums/flags/DamageFlag";
import type { LevelCurse } from "../../enums/flags/LevelCurse";
import type { UseFlag } from "../../enums/flags/UseFlag";
import type { GridEntityXMLType } from "../../enums/GridEntityXMLType";
import type { InputHook } from "../../enums/InputHook";
import type { ItemPoolType } from "../../enums/ItemPoolType";
import type { ModCallback } from "../../enums/ModCallback";
import type { PillEffect } from "../../enums/PillEffect";

declare global {
  interface AddCallbackParameters {
    // 0
    [ModCallback.POST_NPC_UPDATE]: [
      callback: (npc: EntityNPC) => void,
      entityType?: EntityType,
    ];

    // 1
    [ModCallback.POST_UPDATE]: [callback: () => void];

    // 2
    [ModCallback.POST_RENDER]: [callback: () => void];

    // 3
    [ModCallback.POST_USE_ITEM]: [
      callback: (
        collectibleType: CollectibleType,
        rng: RNG,
        player: EntityPlayer,
        useFlags: BitFlags<UseFlag>,
        activeSlot: ActiveSlot,
        customVarData: int,
      ) =>
        | boolean
        | { Discharge: boolean; Remove: boolean; ShowAnim: boolean }
        | undefined,
      collectibleType?: CollectibleType,
    ];

    // 4
    [ModCallback.POST_PEFFECT_UPDATE]: [
      callback: (player: EntityPlayer) => void,
      playerType?: PlayerType,
    ];

    // 5
    [ModCallback.POST_USE_CARD]: [
      callback: (
        cardType: CardType,
        player: EntityPlayer,
        useFlags: BitFlags<UseFlag>,
      ) => void,
      cardType?: CardType,
    ];

    // 6
    [ModCallback.POST_FAMILIAR_UPDATE]: [
      callback: (familiar: EntityFamiliar) => void,
      familiarVariant?: FamiliarVariant,
    ];

    // 7
    [ModCallback.POST_FAMILIAR_INIT]: [
      callback: (familiar: EntityFamiliar) => void,
      familiarVariant?: FamiliarVariant,
    ];

    // 8
    [ModCallback.EVALUATE_CACHE]: [
      callback: (player: EntityPlayer, cacheFlag: CacheFlag) => void,
      cacheFlag?: CacheFlag,
    ];

    // 9
    [ModCallback.POST_PLAYER_INIT]: [
      callback: (player: EntityPlayer) => void,
      playerVariant?: PlayerVariant,
    ];

    // 10
    [ModCallback.POST_USE_PILL]: [
      callback: (
        pillEffect: PillEffect,
        player: EntityPlayer,
        useFlags: BitFlags<UseFlag>,
      ) => void,
      pillEffect?: PillEffect,
    ];

    // 11
    [ModCallback.ENTITY_TAKE_DMG]: [
      callback: (
        entity: Entity,
        amount: float,
        damageFlags: BitFlags<DamageFlag>,
        source: EntityRef,
        countdownFrames: int,
      ) => boolean | undefined,
      entityType?: EntityType,
    ];

    // 12
    [ModCallback.POST_CURSE_EVAL]: [
      callback: (
        curses: BitFlags<LevelCurse>,
      ) => BitFlags<LevelCurse> | LevelCurse | undefined,
    ];

    // 13
    [ModCallback.INPUT_ACTION]: [
      callback: (
        entity: Entity | undefined,
        inputHook: InputHook,
        buttonAction: ButtonAction,
      ) => boolean | float | undefined,
      inputHook?: InputHook,
    ];

    // 14 is LEVEL_GENERATOR (not implemented).

    // 15
    [ModCallback.POST_GAME_STARTED]: [callback: (isContinued: boolean) => void];

    // 16
    [ModCallback.POST_GAME_END]: [callback: (isGameOver: boolean) => void];

    // 17
    [ModCallback.PRE_GAME_EXIT]: [callback: (shouldSave: boolean) => void];

    // 18
    [ModCallback.POST_NEW_LEVEL]: [callback: () => void];

    // 19
    [ModCallback.POST_NEW_ROOM]: [callback: () => void];

    // 20
    [ModCallback.GET_CARD]: [
      callback: (
        rng: RNG,
        cardType: CardType,
        includePlayingCards: boolean,
        includeRunes: boolean,
        onlyRunes: boolean,
      ) => CardType | undefined,
    ];

    // 21
    [ModCallback.GET_SHADER_PARAMS]: [
      callback: (shaderName: string) => Record<string, unknown> | undefined,
    ];

    // 22
    [ModCallback.EXECUTE_CMD]: [
      callback: (
        command: string,
        parameters: string,
        player: EntityPlayer,
      ) => void,
    ];

    // 23
    [ModCallback.PRE_USE_ITEM]: [
      callback: (
        collectibleType: CollectibleType,
        rng: RNG,
        player: EntityPlayer,
        useFlags: BitFlags<UseFlag>,
        activeSlot: ActiveSlot,
        customVarData: int,
      ) => boolean | undefined,
      collectibleType?: CollectibleType,
    ];

    // 24
    [ModCallback.PRE_ENTITY_SPAWN]: [
      callback: (
        entityType: EntityType,
        variant: int,
        subType: int,
        position: Vector,
        velocity: Vector,
        spawner: Entity | undefined,
        initSeed: Seed,
      ) =>
        | [entityType: EntityType, variant: int, subType: int, initSeed: Seed]
        | undefined,
    ];

    // 25
    [ModCallback.POST_FAMILIAR_RENDER]: [
      callback: (entityFamiliar: EntityFamiliar, renderOffset: Vector) => void,
      familiarVariant?: FamiliarVariant,
    ];

    // 26
    [ModCallback.PRE_FAMILIAR_COLLISION]: [
      callback: (
        familiar: EntityFamiliar,
        collider: Entity,
        low: boolean,
      ) => boolean | undefined,
      familiarVariant?: FamiliarVariant,
    ];

    // 27
    [ModCallback.POST_NPC_INIT]: [
      callback: (npc: EntityNPC) => void,
      entityType?: EntityType,
    ];

    // 28
    [ModCallback.POST_NPC_RENDER]: [
      callback: (npc: EntityNPC, renderOffset: Vector) => void,
      entityType?: EntityType,
    ];

    // 29
    [ModCallback.POST_NPC_DEATH]: [
      callback: (npc: EntityNPC) => void,
      entityType?: EntityType,
    ];

    // 30
    [ModCallback.PRE_NPC_COLLISION]: [
      callback: (
        npc: EntityNPC,
        collider: Entity,
        low: boolean,
      ) => boolean | undefined,
      entityType?: EntityType,
    ];

    // 31
    [ModCallback.POST_PLAYER_UPDATE]: [
      callback: (player: EntityPlayer) => void,
      playerVariant?: PlayerVariant,
    ];

    // 32
    [ModCallback.POST_PLAYER_RENDER]: [
      callback: (player: EntityPlayer, renderOffset: Vector) => void,
      playerVariant?: PlayerVariant,
    ];

    // 33
    [ModCallback.PRE_PLAYER_COLLISION]: [
      callback: (
        player: EntityPlayer,
        collider: Entity,
        low: boolean,
      ) => boolean | undefined,
      playerVariant?: PlayerVariant,
    ];

    // 34
    [ModCallback.POST_PICKUP_INIT]: [
      callback: (pickup: EntityPickup) => void,
      pickupVariant?: PickupVariant,
    ];

    // 35
    [ModCallback.POST_PICKUP_UPDATE]: [
      callback: (pickup: EntityPickup) => void,
      pickupVariant?: PickupVariant,
    ];

    // 36
    [ModCallback.POST_PICKUP_RENDER]: [
      callback: (pickup: EntityPickup, renderOffset: Vector) => void,
      pickupVariant?: PickupVariant,
    ];

    // 37
    [ModCallback.POST_PICKUP_SELECTION]: [
      callback: (
        pickup: EntityPickup,
        variant: PickupVariant,
        subType: int,
      ) => [pickupVariant: PickupVariant, subType: int] | undefined,
    ];

    // 38
    [ModCallback.PRE_PICKUP_COLLISION]: [
      callback: (
        pickup: EntityPickup,
        collider: Entity,
        low: boolean,
      ) => boolean | undefined,
      pickupVariant?: PickupVariant,
    ];

    // 39
    [ModCallback.POST_TEAR_INIT]: [
      callback: (tear: EntityTear) => void,
      tearVariant?: TearVariant,
    ];

    // 40
    [ModCallback.POST_TEAR_UPDATE]: [
      callback: (tear: EntityTear) => void,
      tearVariant?: TearVariant,
    ];

    // 41
    [ModCallback.POST_TEAR_RENDER]: [
      callback: (tear: EntityTear, renderOffset: Vector) => void,
      tearVariant?: TearVariant,
    ];

    // 42
    [ModCallback.PRE_TEAR_COLLISION]: [
      callback: (
        tear: EntityTear,
        collider: Entity,
        low: boolean,
      ) => boolean | undefined,
      tearVariant?: TearVariant,
    ];

    // 43
    [ModCallback.POST_PROJECTILE_INIT]: [
      callback: (projectile: EntityProjectile) => void,
      projectileVariant?: ProjectileVariant,
    ];

    // 44
    [ModCallback.POST_PROJECTILE_UPDATE]: [
      callback: (projectile: EntityProjectile) => void,
      projectileVariant?: ProjectileVariant,
    ];

    // 45
    [ModCallback.POST_PROJECTILE_RENDER]: [
      callback: (projectile: EntityProjectile, renderOffset: Vector) => void,
      projectileVariant?: ProjectileVariant,
    ];

    // 46
    [ModCallback.PRE_PROJECTILE_COLLISION]: [
      callback: (
        projectile: EntityProjectile,
        collider: Entity,
        low: boolean,
      ) => boolean | undefined,
      projectileVariant?: ProjectileVariant,
    ];

    // 47
    [ModCallback.POST_LASER_INIT]: [
      callback: (laser: EntityLaser) => void,
      laserVariant?: LaserVariant,
    ];

    // 48
    [ModCallback.POST_LASER_UPDATE]: [
      callback: (laser: EntityLaser) => void,
      laserVariant?: LaserVariant,
    ];

    // 49
    [ModCallback.POST_LASER_RENDER]: [
      callback: (laser: EntityLaser, renderOffset: Vector) => void,
      laserVariant?: LaserVariant,
    ];

    // 50
    [ModCallback.POST_KNIFE_INIT]: [
      callback: (knife: EntityKnife) => void,
      subType?: int, // The vanilla callback is bugged and uses sub-type instead of `KnifeVariant`.
    ];

    // 51
    [ModCallback.POST_KNIFE_UPDATE]: [
      callback: (knife: EntityKnife) => void,
      subType?: int, // The vanilla callback is bugged and uses sub-type instead of `KnifeVariant`.
    ];

    // 52
    [ModCallback.POST_KNIFE_RENDER]: [
      callback: (knife: EntityKnife, renderOffset: Vector) => void,
      subType?: int, // The vanilla callback is bugged and uses sub-type instead of `KnifeVariant`.
    ];

    // 53
    [ModCallback.PRE_KNIFE_COLLISION]: [
      callback: (
        knife: EntityKnife,
        collider: Entity,
        low: boolean,
      ) => boolean | undefined,
      subType?: int, // The vanilla callback is bugged and uses sub-type instead of `KnifeVariant`.
    ];

    // 54
    [ModCallback.POST_EFFECT_INIT]: [
      callback: (effect: EntityEffect) => void,
      effectVariant?: EffectVariant,
    ];

    // 55
    [ModCallback.POST_EFFECT_UPDATE]: [
      callback: (effect: EntityEffect) => void,
      effectVariant?: EffectVariant,
    ];

    // 56
    [ModCallback.POST_EFFECT_RENDER]: [
      callback: (effect: EntityEffect, renderOffset: Vector) => void,
      effectVariant?: EffectVariant,
    ];

    // 57
    [ModCallback.POST_BOMB_INIT]: [
      callback: (bomb: EntityBomb) => void,
      bombVariant?: BombVariant,
    ];

    // 58
    [ModCallback.POST_BOMB_UPDATE]: [
      callback: (bomb: EntityBomb) => void,
      bombVariant?: BombVariant,
    ];

    // 59
    [ModCallback.POST_BOMB_RENDER]: [
      callback: (bomb: EntityBomb, renderOffset: Vector) => void,
      bombVariant?: BombVariant,
    ];

    // 60
    [ModCallback.PRE_BOMB_COLLISION]: [
      callback: (
        bomb: EntityBomb,
        collider: Entity,
        low: boolean,
      ) => boolean | undefined,
      bombVariant?: BombVariant,
    ];

    // 61
    [ModCallback.POST_FIRE_TEAR]: [callback: (tear: EntityTear) => void];

    // 62
    [ModCallback.PRE_GET_COLLECTIBLE]: [
      callback: (
        itemPoolType: ItemPoolType,
        decrease: boolean,
        seed: Seed,
      ) => CollectibleType | undefined,
    ];

    // 63
    [ModCallback.POST_GET_COLLECTIBLE]: [
      callback: (
        collectibleType: CollectibleType,
        itemPoolType: ItemPoolType,
        decrease: boolean,
        seed: Seed,
      ) => CollectibleType | undefined,
    ];

    // 64
    [ModCallback.GET_PILL_COLOR]: [
      callback: (seed: Seed) => PillColor | undefined,
    ];

    // 65
    [ModCallback.GET_PILL_EFFECT]: [
      callback: (
        pillEffect: PillEffect,
        pillColor: PillColor,
      ) => PillEffect | undefined,
    ];

    // 66
    [ModCallback.GET_TRINKET]: [
      callback: (trinketType: TrinketType, rng: RNG) => TrinketType | undefined,
    ];

    // 67
    [ModCallback.POST_ENTITY_REMOVE]: [
      callback: (entity: Entity) => void,
      entityType?: EntityType,
    ];

    // 68
    [ModCallback.POST_ENTITY_KILL]: [
      callback: (entity: Entity) => void,
      entityType?: EntityType,
    ];

    // 69
    [ModCallback.PRE_NPC_UPDATE]: [
      callback: (npc: EntityNPC) => boolean | undefined,
      entityType?: EntityType,
    ];

    // 70
    [ModCallback.PRE_SPAWN_CLEAR_AWARD]: [
      callback: (rng: RNG, spawnPosition: Vector) => boolean | undefined,
    ];

    // 71
    [ModCallback.PRE_ROOM_ENTITY_SPAWN]: [
      callback: (
        entityTypeOrGridEntityXMLType: EntityType | GridEntityXMLType,
        variant: int,
        subType: int,
        gridIndex: int,
        initSeed: Seed,
      ) =>
        | [type: EntityType | GridEntityXMLType, variant: int, subType: int]
        | undefined,
    ];

    // 72
    [ModCallback.PRE_ENTITY_DEVOLVE]: [
      callback: (entity: Entity) => boolean | undefined,
    ];

    // 73
    [ModCallback.PRE_MOD_UNLOAD]: [callback: (mod: Mod) => void];
  }
}

----
types\unofficial\BitFlag.d.ts
declare type BitFlag = int & { readonly __bitFlagBrand: symbol };

----
types\unofficial\BitFlag128.d.ts
declare type BitFlag128 = BitSet128 & {
  readonly __bitFlag128Brand: symbol;
};

----
types\unofficial\BitFlags.d.ts
/**
 * This represents a composition of 0 or more bit flags.
 *
 * This type must be branded so that the compiler can differentiate between a variable that is
 * guaranteed to contain exactly one bit flag and a variable that has two or more bit flags (or zero
 * bit flags).
 */
declare type BitFlags<T extends BitFlag | BitFlag128> = T & {
  readonly __bitFlagsBrand: T;
};

----
types\unofficial\EntitySubPlayer.d.ts
import type {
  CardType,
  CollectibleType,
} from "../../enums/collections/subTypes";

declare global {
  /**
   * This is a "fake" interface used to represent an `EntityPlayer` class returned from the
   * `EntityPlayer.GetSubPlayer` method. The `EntityPlayer.IsSubPlayer` method should always return
   * true for these types of objects.
   */
  interface EntitySubPlayer extends EntityPlayer {
    /**
     * The RNG returned by the `EntitySubPlayer.GetCardRNG` method will not match the RNG for the
     * real player, so it should never be used. Instead, use the `getSubPlayerParent` helper
     * function to get the "parent" player, and call `GetCardRNG` from that.
     */
    GetCardRNG: (cardType: CardType) => never;

    /**
     * The RNG returned by the `EntitySubPlayer.GetCollectibleRNG` method will not match the RNG for
     * the real player, so it should never be used. Instead, use the `getSubPlayerParent` helper
     * function to get the "parent" player, and call `GetCollectibleRNG` from that.
     */
    GetCollectibleRNG: (collectibleType: CollectibleType) => never;

    /**
     * This will always return undefined if you call it on a sub-player. Instead, use the
     * `getSubPlayerParent` helper function to get the "parent" player.
     */
    GetSubPlayer: () => never;
  }
}

----
types\unofficial\IsaacAPIClass.d.ts
/**
 * This represents an object of type `userdata`. All Isaac API classes are typed to extend from this
 * type so that we can distinguish them from normal Lua tables.
 */
declare type IsaacAPIClass = LuaMap<string, unknown> & {
  readonly __isaacAPIClassBrand: symbol;
};

----
types\unofficial\PtrHash.d.ts
/** PtrHash is an integer between 0 and 2^32. It is branded for extra type safety. */
declare type PtrHash = number & { readonly __ptrHashBrand: symbol };

----
types\unofficial\Quality.d.ts
declare type Quality = 0 | 1 | 2 | 3 | 4;

----
types\unofficial\Seed.d.ts
/**
 * Seed is an integer between 1 and 4294967295 (2^32 - 1). It is branded for extra type safety.
 *
 * In rare cases, the seed value can also be 0, which represents an uninitialized seed. For example,
 * this can happen if you run the `Seeds.GetStartSeed` method while in the main menu.
 *
 * If you set the seed of an RNG object to 0, it will cause the game to crash.
 */
declare type Seed = number & { readonly __seedBrand: symbol };

----
types\unofficial\TemporaryCollectibleType.d.ts
import type { CollectibleType } from "../../enums/collections/subTypes";

declare global {
  /**
   * These are the valid collectible types that can be used with the
   * `TemporaryEffects.AddCollectibleEffect` method. Using a collectible type other than these will
   * not result in anything happening.
   */
  type TemporaryCollectibleType =
    | CollectibleType.SAD_ONION // 1
    | CollectibleType.INNER_EYE // 2
    | CollectibleType.SPOON_BENDER // 3
    | CollectibleType.MY_REFLECTION // 5
    | CollectibleType.NUMBER_ONE // 6
    | CollectibleType.BROTHER_BOBBY // 8
    | CollectibleType.MAGIC_MUSHROOM // 12
    | CollectibleType.VIRUS // 13
    | CollectibleType.ROID_RAGE // 14
    | CollectibleType.TRANSCENDENCE // 20
    | CollectibleType.MOMS_UNDERWEAR // 29
    | CollectibleType.MOMS_HEELS // 30
    | CollectibleType.MOMS_LIPSTICK // 31
    | CollectibleType.MOMS_EYE // 55
    | CollectibleType.DISTANT_ADMIRATION // 57
    | CollectibleType.SISTER_MAGGY // 67
    | CollectibleType.GROWTH_HORMONES // 70
    | CollectibleType.MINI_MUSH // 71
    | CollectibleType.CUBE_OF_MEAT // 73
    | CollectibleType.LITTLE_CHUBBY // 88
    | CollectibleType.SACK_OF_PENNIES // 94
    | CollectibleType.ROBO_BABY // 95
    | CollectibleType.LITTLE_CHAD // 96
    | CollectibleType.RELIC // 98
    | CollectibleType.LITTLE_GISH // 99
    | CollectibleType.LITTLE_STEVEN // 100
    | CollectibleType.WAFER // 108
    | CollectibleType.MOMS_CONTACTS // 110
    | CollectibleType.GUARDIAN_ANGEL // 112
    | CollectibleType.DEMON_BABY // 113
    | CollectibleType.MOMS_KNIFE // 114
    | CollectibleType.OUIJA_BOARD // 115
    | CollectibleType.DEAD_BIRD // 117
    | CollectibleType.BRIMSTONE // 118
    | CollectibleType.ODD_MUSHROOM_THIN // 120
    | CollectibleType.ODD_MUSHROOM_LARGE // 121
    | CollectibleType.WHORE_OF_BABYLON // 122
    | CollectibleType.FOREVER_ALONE // 128
    | CollectibleType.BOMB_BAG // 131
    | CollectibleType.SPEED_BALL // 143
    | CollectibleType.BUM_FRIEND // 144
    | CollectibleType.TOUGH_LOVE // 150
    | CollectibleType.PEEPER // 155
    | CollectibleType.GHOST_BABY // 163
    | CollectibleType.HARLEQUIN_BABY // 167
    | CollectibleType.DADDY_LONGLEGS // 170
    | CollectibleType.SACRIFICIAL_DAGGER // 172
    | CollectibleType.RAINBOW_BABY // 174
    | CollectibleType.HOLY_WATER // 178
    | CollectibleType.GUPPYS_HAIRBALL // 187
    | CollectibleType.ABEL // 188
    | CollectibleType.MOMS_KEY // 199
    | CollectibleType.MOMS_EYESHADOW // 200
    | CollectibleType.IRON_BAR // 201
    | CollectibleType.GUILLOTINE // 206
    | CollectibleType.BALL_OF_BANDAGES // 207
    | CollectibleType.ANEMIC // 214
    | CollectibleType.MOMS_WIG // 217
    | CollectibleType.MOMS_PERFUME // 228
    | CollectibleType.DEATHS_TOUCH // 237
    | CollectibleType.EXPERIMENTAL_TREATMENT // 240
    | CollectibleType.TWENTY_TWENTY // 245
    | CollectibleType.HIVE_MIND // 248
    | CollectibleType.FIRE_MIND // 257
    | CollectibleType.DARK_MATTER // 259
    | CollectibleType.PROPTOSIS // 261
    | CollectibleType.SMART_FLY // 264
    | CollectibleType.DRY_BABY // 265
    | CollectibleType.JUICY_SACK // 266
    | CollectibleType.ROBO_BABY_2 // 267
    | CollectibleType.ROTTEN_BABY // 268
    | CollectibleType.HEADLESS_BABY // 269
    | CollectibleType.LEECH // 270
    | CollectibleType.MYSTERY_SACK // 271
    | CollectibleType.BBF // 272
    | CollectibleType.BOBS_BRAIN // 273
    | CollectibleType.BEST_BUD // 274
    | CollectibleType.LIL_BRIMSTONE // 275
    | CollectibleType.LIL_HAUNT // 277
    | CollectibleType.DARK_BUM // 278
    | CollectibleType.BIG_FAN // 279
    | CollectibleType.SISSY_LONGLEGS // 280
    | CollectibleType.PUNCHING_BAG // 281
    | CollectibleType.LEO // 302
    | CollectibleType.HOLY_MANTLE // 313
    | CollectibleType.MYSTERIOUS_LIQUID // 317
    | CollectibleType.GEMINI // 318
    | CollectibleType.CAINS_OTHER_EYE // 319
    | CollectibleType.BLUE_BABYS_ONLY_FRIEND // 320
    | CollectibleType.SAMSONS_CHAINS // 321
    | CollectibleType.MONGO_BABY // 322
    | CollectibleType.BLUE_CAP // 342
    | CollectibleType.SYNTHOIL // 345
    | CollectibleType.MOMS_PEARLS // 355
    | CollectibleType.WIZ // 358
    | CollectibleType.INCUBUS // 360
    | CollectibleType.FATES_REWARD // 361
    | CollectibleType.LIL_CHEST // 362
    | CollectibleType.SWORN_PROTECTOR // 363
    | CollectibleType.FRIEND_ZONE // 364
    | CollectibleType.LOST_FLY // 365
    | CollectibleType.CHARGED_BABY // 372
    | CollectibleType.HOLY_LIGHT // 374
    | CollectibleType.LIL_GURDY // 384
    | CollectibleType.BUMBO // 385
    | CollectibleType.CENSER // 387
    | CollectibleType.KEY_BUM // 388
    | CollectibleType.RUNE_BAG // 389
    | CollectibleType.SERAPHIM // 390
    | CollectibleType.TRACTOR_BEAM // 397
    | CollectibleType.GODS_FLESH // 398
    | CollectibleType.SPIDER_MOD // 403
    | CollectibleType.FARTING_BABY // 404
    | CollectibleType.EMPTY_VESSEL // 409
    | CollectibleType.LUSTY_BLOOD // 411
    | CollectibleType.CROWN_OF_LIGHT // 415
    | CollectibleType.SUCCUBUS // 417
    | CollectibleType.FRUIT_CAKE // 418
    | CollectibleType.OBSESSED_FAN // 426
    | CollectibleType.HEAD_OF_THE_KEEPER // 429
    | CollectibleType.PAPA_FLY // 430
    | CollectibleType.MULTIDIMENSIONAL_BABY // 431
    | CollectibleType.LIL_LOKI // 435
    | CollectibleType.MILK // 436
    | CollectibleType.DARK_PRINCES_CROWN // 442
    | CollectibleType.FINGER // 467
    | CollectibleType.SHADE // 468
    | CollectibleType.DEPRESSION // 469
    | CollectibleType.HUSHY // 470
    | CollectibleType.LIL_MONSTRO // 471
    | CollectibleType.KING_BABY // 472
    | CollectibleType.BIG_CHUBBY // 473
    | CollectibleType.ACID_BABY // 491
    | CollectibleType.YO_LISTEN // 492
    | CollectibleType.ADRENALINE // 493
    | CollectibleType.EUTHANASIA // 496
    | CollectibleType.CAMO_UNDIES // 497
    | CollectibleType.SACK_OF_SACKS // 500
    | CollectibleType.MOMS_RAZOR // 508
    | CollectibleType.BLOODSHOT_EYE // 509
    | CollectibleType.ANGRY_FLY // 511
    | CollectibleType.BUDDY_IN_A_BOX // 518
    | CollectibleType.LIL_DELIRIUM // 519
    | CollectibleType.SEVEN_SEALS // 526
    | CollectibleType.ANGELIC_PRISM // 528
    | CollectibleType.LIL_SPEWER // 537
    | CollectibleType.MYSTERY_EGG // 539
    | CollectibleType.SLIPPED_RIB // 542
    | CollectibleType.HALLOWED_GROUND // 543
    | CollectibleType.POINTY_RIB // 544
    | CollectibleType.JAW_BONE // 548
    | CollectibleType.BLOOD_PUPPY // 565
    | CollectibleType.PASCHAL_CANDLE // 567
    | CollectibleType.EYE_OF_THE_OCCULT // 572
    | CollectibleType.INTRUDER // 575
    | CollectibleType.PSY_FLY // 581
    | CollectibleType.MARS // 593
    | CollectibleType.URANUS // 596
    | CollectibleType.BOILED_BABY // 607
    | CollectibleType.FREEZER_BABY // 608
    | CollectibleType.BIRD_CAGE // 610
    | CollectibleType.LIL_DUMPY // 615
    | CollectibleType.BOT_FLY // 629
    | CollectibleType.TINYTOMA // 645
    | CollectibleType.FRUITY_PLUM // 649
    | CollectibleType.CUBE_BABY // 652
    | CollectibleType.ASTRAL_PROJECTION // 677
    | CollectibleType.LIL_ABADDON // 679
    | CollectibleType.LIL_PORTAL // 681
    | CollectibleType.WORM_FRIEND // 682
    | CollectibleType.INNER_CHILD // 688
    | CollectibleType.TWISTED_PAIR // 698
    | CollectibleType.MOMS_RING; // 732
}

----
types\unofficial\ZodiacCollectibleType.d.ts
import type { CollectibleType } from "../../enums/collections/subTypes";

declare global {
  type ZodiacCollectibleType =
    | CollectibleType.CANCER
    | CollectibleType.ARIES
    | CollectibleType.LEO
    | CollectibleType.SCORPIO
    | CollectibleType.AQUARIUS
    | CollectibleType.PISCES
    | CollectibleType.TAURUS
    | CollectibleType.GEMINI
    | CollectibleType.CAPRICORN
    | CollectibleType.SAGITTARIUS
    | CollectibleType.LIBRA
    | CollectibleType.VIRGO;
}

----
types\unofficial\primitives.d.ts
// The Binding of Isaac: Rebirth Lua API expects certain values as either integers or floats, so we
// define those types here

/**
 * In TypeScript (and Lua), `number` is the same thing as `int`. We make an alias here so that the
 * API definitions better correspond to the official API documentation.
 *
 * To avoid verbose casting everywhere, we make `int` an alias for `number` (instead of branding
 * it).
 */
// We intersect with an empty object to prevent VSCode from replacing `int` with `number` on
// mouseover.
// eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/ban-types
declare type int = number & {};

/**
 * In TypeScript (and Lua), `number` is the same thing as `float`. We make an alias here so that the
 * API definitions better correspond to the official API documentation.
 *
 * To avoid verbose casting everywhere, we make `float` an alias for `number` (instead of branding
 * it).
 */
// We intersect with an empty object to prevent VSCode from replacing `float` with `number` on
// mouseover.
// eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/ban-types
declare type float = number & {};

--END--